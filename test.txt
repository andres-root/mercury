
Prefixes:
     xsd: http://www.w3.org/2001/XMLSchema
     ns0: http://www.travelport.com/soa/common/security/SessionContext_v1
     ns1: http://www.travelport.com/schema/air_v42_0
     ns2: http://www.travelport.com/schema/common_v42_0
     ns3: http://www.travelport.com/schema/rail_v42_0

Global elements:
     ns1:APISRequirements(Document: ns1:Document[], Key: xsd:anyType, Level: xsd:string, GenderRequired: xsd:boolean, DateOfBirthRequired: xsd:boolean, RequiredDocuments: xsd:string, NationalityRequired: xsd:boolean)
     ns1:APISRequirementsList(APISRequirements: ns1:APISRequirements[])
     ns1:AccountRelatedRules(BookingRules: ns1:BookingRules[], RoutingRules: ns1:RoutingRules)
     ns1:ActionDetails(PseudoCityCode: ns2:typePCC, AgentSine: xsd:string, EventDate: xsd:date, EventTime: xsd:time, Text: xsd:string)
     ns1:AdditionalInfo(Category: xsd:string)
     ns1:AddlBookingCodeInformation(ns2:typeNonBlanks)
     ns1:Adjustment(({Amount: ns2:typeMoney} | {Percent: xsd:float}), AdjustedTotalPrice: ns2:typeMoney, ApproximateAdjustedTotalPrice: ns2:typeMoney, BookingTravelerRef: ns2:typeRef)
     ns1:Affiliations(TravelArranger: ns1:TravelArranger[])
     ns1:AirAvailInfo(BookingCodeInfo: ns1:BookingCodeInfo[], FareTokenInfo: {FareInfoRef: xsd:string, HostTokenRef: xsd:string}[], ProviderCode: ns2:typeProviderCode, HostTokenRef: xsd:string)
     ns1:AirExchangeBundle(AirExchangeInfo: ns2:AirExchangeInfo, AirPricingInfoRef: ns1:AirPricingInfoRef[], Penalty: ns2:Penalty[])
     ns1:AirExchangeBundleTotal(AirExchangeInfo: ns2:AirExchangeInfo, Penalty: ns2:Penalty[])
     ns1:AirExchangeEligibilityReq(BillingPointOfSaleInfo: ns2:BillingPointOfSaleInfo, AgentIDOverride: ns2:AgentIDOverride[], TerminalSessionInfo: xsd:string, OverridePCC: ns2:OverridePCC, ProviderReservationInfo: {ProviderCode: ns2:typeProviderCode, ProviderLocatorCode: ns2:typeProviderLocatorCode}, TraceId: xsd:string, TokenId: xsd:string, AuthorizedBy: xsd:string, TargetBranch: ns2:typeBranchCode, OverrideLogging: ns2:typeLoggingLevel, LanguageCode: xsd:language, RetrieveProviderReservationDetails: xsd:boolean, Type: xsd:string)
     ns1:AirExchangeEligibilityRsp(ResponseMessage: ns2:ResponseMessage[], ExchangeEligibilityInfo: ns1:ExchangeEligibilityInfo, TraceId: xsd:string, TransactionId: xsd:string, ResponseTime: xsd:integer, CommandHistory: xsd:string)
     ns1:AirExchangeModifiers(ContractCodes: {ContractCode: ns1:ContractCode[]}, BookingDate: xsd:string, TicketingDate: xsd:string, AccountCode: xsd:string, TicketDesignator: ns1:typeTicketDesignator, AllowPenaltyFares: xsd:boolean, PrivateFaresOnly: xsd:boolean, UniversalRecordLocatorCode: ns2:typeLocatorCode, ProviderLocatorCode: ns2:typeLocatorCode, ProviderCode: xsd:string)
     ns1:AirExchangeQuoteReq(BillingPointOfSaleInfo: ns2:BillingPointOfSaleInfo, AgentIDOverride: ns2:AgentIDOverride[], TerminalSessionInfo: xsd:string, TicketNumber: ns2:StringLength1to13[], ProviderReservationInfo: {ProviderCode: ns2:typeProviderCode, ProviderLocatorCode: ns2:typeProviderLocatorCode}, AirPricingSolution: ns1:AirPricingSolution[], AirExchangeModifiers: ns1:AirExchangeModifiers, HostToken: ns2:HostToken[], OptionalServices: ns1:OptionalServices, FormOfPayment: ns2:FormOfPayment[], RepricingModifiers: ns1:RepricingModifiers, OriginalItineraryDetails: ns1:OriginalItineraryDetails, PCC: ns1:PCC, TraceId: xsd:string, TokenId: xsd:string, AuthorizedBy: xsd:string, TargetBranch: ns2:typeBranchCode, OverrideLogging: ns2:typeLoggingLevel, LanguageCode: xsd:language, FareRuleType: ns1:typeFareRuleType)
     ns1:AirExchangeQuoteRsp(ResponseMessage: ns2:ResponseMessage[], TicketNumber: ns2:StringLength1to13[], AirPricingSolution: ns1:AirPricingSolution[], AirExchangeBundleTotal: ns1:AirExchangeBundleTotal, AirExchangeBundle: ns1:AirExchangeBundle[], HostToken: ns2:HostToken[], OptionalServices: ns1:OptionalServices, FareRule: ns1:FareRule[], TraceId: xsd:string, TransactionId: xsd:string, ResponseTime: xsd:integer, CommandHistory: xsd:string)
     ns1:AirExchangeReq(BillingPointOfSaleInfo: ns2:BillingPointOfSaleInfo, AgentIDOverride: ns2:AgentIDOverride[], TerminalSessionInfo: xsd:string, OverridePCC: ns2:OverridePCC, AirReservationLocatorCode: ns1:AirReservationLocatorCode, TicketNumber: ns2:StringLength1to13[], SpecificSeatAssignment: ns1:SpecificSeatAssignment[], AirPricingSolution: ns1:AirPricingSolution[], AirExchangeModifiers: ns1:AirExchangeModifiers, AirExchangeBundleTotal: ns1:AirExchangeBundleTotal, AirExchangeBundle: ns1:AirExchangeBundle[], HostToken: ns2:HostToken[], OptionalServices: ns1:OptionalServices, FormOfPayment: ns2:FormOfPayment, FormOfPaymentRef: ns2:FormOfPaymentRef, SSRInfo: ns2:SSRInfo[], TraceId: xsd:string, TokenId: xsd:string, AuthorizedBy: xsd:string, TargetBranch: ns2:typeBranchCode, OverrideLogging: ns2:typeLoggingLevel, LanguageCode: xsd:language, RetrieveProviderReservationDetails: xsd:boolean, ReturnReservation: xsd:boolean)
     ns1:AirExchangeRsp(ResponseMessage: ns2:ResponseMessage[], TicketNumber: ns2:StringLength1to13[], BookingTraveler: ns2:BookingTraveler[], AirReservation: ns1:typeAirReservationWithFOP, ExchangeFailureInfo: ns1:typeTicketFailureInfo[], TraceId: xsd:string, TransactionId: xsd:string, ResponseTime: xsd:integer, CommandHistory: xsd:string)
     ns1:AirExchangeTicketBundle(TicketNumber: ns2:StringLength1to13, FormOfPayment: ns2:FormOfPayment[], FormOfPaymentRef: ns2:FormOfPaymentRef, WaiverCode: ns1:WaiverCode)
     ns1:AirExchangeTicketingReq(BillingPointOfSaleInfo: ns2:BillingPointOfSaleInfo, AgentIDOverride: ns2:AgentIDOverride[], TerminalSessionInfo: xsd:string, OverridePCC: ns2:OverridePCC, AirReservationLocatorCode: ns1:AirReservationLocatorCode, TicketNumber: ns2:StringLength1to13, TicketingModifiersRef: ns1:typeTicketingModifiersRef[], WaiverCode: ns1:WaiverCode, DetailedBillingInformation: ns1:DetailedBillingInformation[], AirTicketingModifiers: ns1:AirTicketingModifiers[], TraceId: xsd:string, TokenId: xsd:string, AuthorizedBy: xsd:string, TargetBranch: ns2:typeBranchCode, OverrideLogging: ns2:typeLoggingLevel, LanguageCode: xsd:language, RetrieveProviderReservationDetails: xsd:boolean, BulkTicket: xsd:boolean, ChangeFeeOnTicket: xsd:boolean)
     ns1:AirExchangeTicketingRsp(ResponseMessage: ns2:ResponseMessage[], ({AirSolutionChangedInfo: ns1:AirSolutionChangedInfo} | {ETR: ns1:ETR, TicketFailureInfo: ns1:TicketFailureInfo, DetailedBillingInformation: ns1:DetailedBillingInformation}), TraceId: xsd:string, TransactionId: xsd:string, ResponseTime: xsd:integer, CommandHistory: xsd:string)
     ns1:AirFareDiscount(Percentage: xsd:double, Amount: ns2:typeMoney, DiscountMethod: ns1:typeFareDiscount)
     ns1:AirFareDisplayModifiers(TripType: ns1:typeFareTripType[], CabinClass: ns2:CabinClass, PenaltyFareInformation: ns1:PenaltyFareInformation, MaxResponses: xsd:integer, DepartureDate: xsd:date, TicketingDate: xsd:date, ReturnDate: xsd:date, BaseFareOnly: xsd:boolean, UnrestrictedFaresOnly: xsd:boolean, FaresIndicator: ns1:typeFaresIndicator, CurrencyType: ns2:typeCurrency, IncludeTaxes: xsd:boolean, IncludeEstimatedTaxes: xsd:boolean, IncludeSurcharges: xsd:boolean, GlobalIndicator: ns1:typeATPCOGlobalIndicator, ProhibitMinStayFares: xsd:boolean, ProhibitMaxStayFares: xsd:boolean, ProhibitAdvancePurchaseFares: xsd:boolean, ProhibitNonRefundableFares: xsd:boolean, ValidatedFaresOnly: xsd:boolean, ProhibitTravelRestrictedFares: xsd:boolean, FiledCurrency: ns2:typeCurrency)
     ns1:AirFareDisplayReq(BillingPointOfSaleInfo: ns2:BillingPointOfSaleInfo, AgentIDOverride: ns2:AgentIDOverride[], TerminalSessionInfo: xsd:string, OverridePCC: ns2:OverridePCC, FareType: ns1:FareType[], PassengerType: ns2:typePassengerType[], BookingCode: ns1:BookingCode[], IncludeAddlBookingCodeInfo: ns1:IncludeAddlBookingCodeInfo, FareBasis: ns1:FareBasis, Carrier: ns2:Carrier[], AccountCode: ns2:AccountCode[], ContractCode: ns1:ContractCode, AirFareDisplayModifiers: ns1:AirFareDisplayModifiers, PointOfSale: ns2:PointOfSale[], AirFareDisplayRuleKey: ns1:AirFareDisplayRuleKey, TraceId: xsd:string, TokenId: xsd:string, AuthorizedBy: xsd:string, TargetBranch: ns2:typeBranchCode, OverrideLogging: ns2:typeLoggingLevel, LanguageCode: xsd:language, RetrieveProviderReservationDetails: xsd:boolean, Origin: ns2:typeIATACode, Destination: ns2:typeIATACode, ProviderCode: ns2:typeProviderCode, IncludeMileRouteInformation: ns1:typeMileOrRouteBasedFare, UnSaleableFaresOnly: xsd:boolean, ChannelId: ns1:ChannelId, NSCC: ns1:NSCC, ReturnMM: xsd:boolean)
     ns1:AirFareDisplayRsp(ResponseMessage: ns2:ResponseMessage[], FareDisplay: ns1:FareDisplay[], TraceId: xsd:string, TransactionId: xsd:string, ResponseTime: xsd:integer, CommandHistory: xsd:string)
     ns1:AirFareDisplayRuleKey(ns2:typeNonBlanks, ProviderCode: ns2:typeProviderCode)
     ns1:AirFareRuleCategory(CategoryCode: ns1:typeFareRuleCategoryCode[], FareInfoRef: ns2:typeRef)
     ns1:AirFareRulesModifier(AirFareRuleCategory: ns1:AirFareRuleCategory[])
     ns1:AirFareRulesReq(BillingPointOfSaleInfo: ns2:BillingPointOfSaleInfo, AgentIDOverride: ns2:AgentIDOverride[], TerminalSessionInfo: xsd:string, OverridePCC: ns2:OverridePCC, ({AirReservationSelector: {FareInfoRef: ns1:FareInfoRef[], AirReservationLocatorCode: ns2:typeLocatorCode}} | {FareRuleLookup: ns1:FareRuleLookup} | {FareRuleKey: ns1:FareRuleKey[]} | {AirFareDisplayRuleKey: ns1:AirFareDisplayRuleKey}), AirFareRulesModifier: ns1:AirFareRulesModifier, TraceId: xsd:string, TokenId: xsd:string, AuthorizedBy: xsd:string, TargetBranch: ns2:typeBranchCode, OverrideLogging: ns2:typeLoggingLevel, LanguageCode: xsd:language, RetrieveProviderReservationDetails: xsd:boolean, FareRuleType: ns1:typeFareRuleType)
     ns1:AirFareRulesRsp(ResponseMessage: ns2:ResponseMessage[], FareRule: ns1:FareRule[], TraceId: xsd:string, TransactionId: xsd:string, ResponseTime: xsd:integer, CommandHistory: xsd:string)
     ns1:AirItinerary(AirSegment: ns1:typeBaseAirSegment[], HostToken: ns2:HostToken[], APISRequirements: ns1:APISRequirements[])
     ns1:AirItineraryDetails(AirSegmentDetails: ns1:AirSegmentDetails[], PassengerDetails: ns1:PassengerDetails[], Key: ns2:typeRef)
     ns1:AirItinerarySolution(AirSegmentRef: ns1:AirSegmentRef[], Connection: ns1:Connection[], Key: ns2:typeRef)
     ns1:AirItinerarySolutionRef(Key: ns2:typeRef)
     ns1:AirLegModifiers(PermittedCabins: ns1:PermittedCabins, PreferredCabins: ns1:PreferredCabins, PermittedCarriers: ns1:PermittedCarriers, ProhibitedCarriers: ns1:ProhibitedCarriers, PreferredCarriers: ns1:PreferredCarriers, PermittedConnectionPoints: {ConnectionPoint: ns2:typeLocation[]}, ProhibitedConnectionPoints: {ConnectionPoint: ns2:typeLocation[]}, PreferredConnectionPoints: {ConnectionPoint: ns2:typeLocation[]}, PermittedBookingCodes: {BookingCode: ns1:BookingCode[]}, PreferredBookingCodes: ns1:PreferredBookingCodes, PreferredAlliances: {Alliance: ns1:Alliance[]}, ProhibitedBookingCodes: {BookingCode: ns1:BookingCode[]}, DisfavoredAlliances: {Alliance: ns1:Alliance[]}, FlightType: ns1:FlightType, AnchorFlightData: ns1:typeAnchorFlightData, ProhibitOvernightLayovers: xsd:boolean, MaxConnectionTime: xsd:integer, ReturnFirstAvailableOnly: xsd:boolean, AllowDirectAccess: xsd:boolean, ProhibitMultiAirportConnection: xsd:boolean, PreferNonStop: xsd:boolean, OrderBy: ns1:OrderBy, MaxJourneyTime: ns1:typeMaxJourneyTime)
     ns1:AirMerchandisingDetailsReq(BillingPointOfSaleInfo: ns2:BillingPointOfSaleInfo, AgentIDOverride: ns2:AgentIDOverride[], TerminalSessionInfo: xsd:string, OverridePCC: ns2:OverridePCC, ({MerchandisingDetails: ns1:MerchandisingDetails} | {OptionalServiceModifiers: ns1:OptionalServiceModifiers} | {MerchandisingAvailabilityDetails: ns1:MerchandisingAvailabilityDetails}), TraceId: xsd:string, TokenId: xsd:string, AuthorizedBy: xsd:string, TargetBranch: ns2:typeBranchCode, OverrideLogging: ns2:typeLoggingLevel, LanguageCode: xsd:language, RetrieveProviderReservationDetails: xsd:boolean)
     ns1:AirMerchandisingDetailsRsp(ResponseMessage: ns2:ResponseMessage[], OptionalServices: ns1:OptionalServices, Brand: ns1:Brand[], UnassociatedBookingCodeList: {ApplicableSegment: ns1:typeApplicableSegment[]}, TraceId: xsd:string, TransactionId: xsd:string, ResponseTime: xsd:integer, CommandHistory: xsd:string)
     ns1:AirMerchandisingOfferAvailabilityReq(BillingPointOfSaleInfo: ns2:BillingPointOfSaleInfo, AgentIDOverride: ns2:AgentIDOverride[], TerminalSessionInfo: xsd:string, OverridePCC: ns2:OverridePCC, AgencySellInfo: ns2:AgencySellInfo, AirSolution: ns1:AirSolution, HostReservation: ns1:HostReservation[], OfferAvailabilityModifiers: ns1:OfferAvailabilityModifiers[], MerchandisingPricingModifiers: ns1:MerchandisingPricingModifiers, TraceId: xsd:string, TokenId: xsd:string, AuthorizedBy: xsd:string, TargetBranch: ns2:typeBranchCode, OverrideLogging: ns2:typeLoggingLevel, LanguageCode: xsd:language, RetrieveProviderReservationDetails: xsd:boolean)
     ns1:AirMerchandisingOfferAvailabilityRsp(ResponseMessage: ns2:ResponseMessage[], AirSolution: ns1:AirSolution, Remark: ns2:Remark, OptionalServices: ns1:OptionalServices, EmbargoList: ns1:EmbargoList, TraceId: xsd:string, TransactionId: xsd:string, ResponseTime: xsd:integer, CommandHistory: xsd:string)
     ns1:AirPrePayReq(BillingPointOfSaleInfo: ns2:BillingPointOfSaleInfo, AgentIDOverride: ns2:AgentIDOverride[], TerminalSessionInfo: xsd:string, OverridePCC: ns2:OverridePCC, ({ListSearch: {({PersonNameSearch: ns1:PersonNameSearch} | {LoyaltyCard: ns2:LoyaltyCard[]}), StartFromResult: ns2:typeStartFromResult, MaxResults: ns2:typeMaxResults}} | {PrePayRetrieve: {Id: ns2:typeCardNumber, Type: xsd:string}}), TraceId: xsd:string, TokenId: xsd:string, AuthorizedBy: xsd:string, TargetBranch: ns2:typeBranchCode, OverrideLogging: ns2:typeLoggingLevel, LanguageCode: xsd:language, RetrieveProviderReservationDetails: xsd:boolean)
     ns1:AirPrePayRsp(ResponseMessage: ns2:ResponseMessage[], PrePayProfileInfo: ns1:PrePayProfileInfo[], TraceId: xsd:string, TransactionId: xsd:string, ResponseTime: xsd:integer, CommandHistory: xsd:string, MaxResults: ns2:typeMaxResults, MoreIndicator: xsd:boolean, MoreDataStartIndex: xsd:string)
     ns1:AirPricePoint(AirPricingInfo: ns1:AirPricingInfo[], AirPricingResultMessage: ns2:typeResultMessage[], FeeInfo: ns2:typeFeeInfo[], FareNote: ns1:FareNote[], TaxInfo: ns2:typeTaxInfo[], Key: ns2:typeRef, TotalPrice: ns2:typeMoney, BasePrice: ns2:typeMoney, ApproximateTotalPrice: ns2:typeMoney, ApproximateBasePrice: ns2:typeMoney, EquivalentBasePrice: ns2:typeMoney, Taxes: ns2:typeMoney, Fees: ns2:typeMoney, Services: ns2:typeMoney, ApproximateTaxes: ns2:typeMoney, ApproximateFees: ns2:typeMoney, CompleteItinerary: xsd:boolean)
     ns1:AirPricePointList(AirPricePoint: ns1:AirPricePoint[])
     ns1:AirPriceReq(BillingPointOfSaleInfo: ns2:BillingPointOfSaleInfo, AgentIDOverride: ns2:AgentIDOverride[], TerminalSessionInfo: xsd:string, AirItinerary: ns1:AirItinerary, AirPricingModifiers: ns1:AirPricingModifiers, SearchPassenger: ns2:SearchPassenger[], AirPricingCommand: ns1:AirPricingCommand[], AirReservationLocatorCode: ns1:AirReservationLocatorCode, OptionalServices: ns1:OptionalServices, FormOfPayment: ns2:FormOfPayment[], PCC: ns1:PCC, SSR: ns2:SSR[], TraceId: xsd:string, TokenId: xsd:string, AuthorizedBy: xsd:string, TargetBranch: ns2:typeBranchCode, OverrideLogging: ns2:typeLoggingLevel, LanguageCode: xsd:language, CheckOBFees: xsd:string, FareRuleType: ns1:typeFareRuleType, SupplierCode: ns2:typeSupplierCode, TicketDate: xsd:date, CheckFlightDetails: xsd:boolean, ReturnMM: xsd:boolean, NSCC: ns1:NSCC, SplitPricing: xsd:boolean)
     ns1:AirPriceResult(AirPricingSolution: ns1:AirPricingSolution[], FareRule: ns1:FareRule[], AirPriceError: ns2:typeResultMessage, CommandKey: ns1:CommandKey)
     ns1:AirPriceRsp(ResponseMessage: ns2:ResponseMessage[], AirItinerary: ns1:AirItinerary, AirPriceResult: ns1:AirPriceResult[], TraceId: xsd:string, TransactionId: xsd:string, ResponseTime: xsd:integer, CommandHistory: xsd:string)
     ns1:AirPricingAdjustment(Adjustment: ns1:Adjustment, Key: ns2:typeRef)
     ns1:AirPricingCommand(AirPricingModifiers: ns1:AirPricingModifiers, AirSegmentPricingModifiers: ns1:AirSegmentPricingModifiers[], CommandKey: ns1:CommandKey, CabinClass: xsd:string)
     ns1:AirPricingInfo(FareInfo: ns1:FareInfo[], FareStatus: ns1:FareStatus, FareInfoRef: ns1:FareInfoRef[], BookingInfo: ns1:BookingInfo[], TaxInfo: ns2:typeTaxInfo[], FareCalc: xsd:string, PassengerType: ns1:PassengerType[], BookingTravelerRef: ns2:BookingTravelerRef[], WaiverCode: ns1:WaiverCode, PaymentRef: ns1:PaymentRef[], ChangePenalty: ns1:typeFarePenalty, CancelPenalty: ns1:typeFarePenalty, FeeInfo: ns2:typeFeeInfo[], Adjustment: ns1:Adjustment[], Yield: ns1:Yield[], AirPricingModifiers: ns1:AirPricingModifiers, TicketingModifiersRef: ns1:TicketingModifiersRef[], AirSegmentPricingModifiers: ns1:AirSegmentPricingModifiers[], FlightOptionsList: ns1:FlightOptionsList, BaggageAllowances: ns1:BaggageAllowances, FareRulesFilter: ns1:FareRulesFilter, PolicyCodesList: ns1:PolicyCodesList, PriceChange: ns1:PriceChangeType[], ActionDetails: ns1:ActionDetails, Key: ns2:typeRef, CommandKey: ns1:CommandKey, TotalPrice: ns2:typeMoney, BasePrice: ns2:typeMoney, ApproximateTotalPrice: ns2:typeMoney, ApproximateBasePrice: ns2:typeMoney, EquivalentBasePrice: ns2:typeMoney, Taxes: ns2:typeMoney, Fees: ns2:typeMoney, Services: ns2:typeMoney, ApproximateTaxes: ns2:typeMoney, ApproximateFees: ns2:typeMoney, ProviderCode: ns2:typeProviderCode, SupplierCode: ns2:typeSupplierCode, AmountType: ns2:StringLength1to32, IncludesVAT: xsd:boolean, ExchangeAmount: ns2:typeMoney, ForfeitAmount: ns2:typeMoney, Refundable: xsd:boolean, Exchangeable: xsd:boolean, LatestTicketingTime: xsd:string, PricingMethod: ns1:typePricingMethod, Checksum: xsd:string, ETicketability: ns1:typeEticketability, PlatingCarrier: ns2:typeCarrier, ProviderReservationInfoRef: ns2:typeRef, AirPricingInfoGroup: xsd:int, TotalNetPrice: ns2:typeMoney, Ticketed: xsd:boolean, PricingType: ns1:PricingType, TrueLastDateToTicket: xsd:string, ElStat: ns2:typeElementStatus, KeyOverride: xsd:boolean, InPolicy: xsd:boolean, PreferredOption: xsd:boolean, FareCalculationInd: ns1:FareCalculationInd, Cat35Indicator: xsd:boolean)
     ns1:AirPricingInfoList(AirPricingInfo: ns1:AirPricingInfo[])
     ns1:AirPricingInfoRef(Key: ns2:typeRef)
     ns1:AirPricingModifiers(ProhibitedRuleCategories: {FareRuleCategory: ns1:FareRuleCategory[]}, AccountCodes: {AccountCode: ns2:AccountCode[]}, PermittedCabins: ns1:PermittedCabins, ContractCodes: {ContractCode: ns1:ContractCode[]}, ExemptTaxes: ns1:ExemptTaxes, PenaltyFareInformation: ns1:PenaltyFareInformation, DiscountCard: ns2:DiscountCard[], PromoCodes: {PromoCode: ns1:PromoCode[]}, ManualFareAdjustment: ns1:ManualFareAdjustment[], PointOfSale: ns2:PointOfSale, BrandModifiers: ns1:BrandModifiers, MultiGDSSearchIndicator: ns1:MultiGDSSearchIndicator[], ProhibitMinStayFares: xsd:boolean, ProhibitMaxStayFares: xsd:boolean, CurrencyType: ns2:typeCurrency, ProhibitAdvancePurchaseFares: xsd:boolean, ProhibitNonRefundableFares: xsd:boolean, ProhibitRestrictedFares: xsd:boolean, FaresIndicator: ns1:typeFaresIndicator, FiledCurrency: ns2:typeCurrency, PlatingCarrier: ns2:typeCarrier, OverrideCarrier: ns2:typeCarrier, ETicketability: ns1:typeEticketability, AccountCodeFaresOnly: xsd:boolean, Key: ns2:typeRef, ProhibitNonExchangeableFares: xsd:boolean, ForceSegmentSelect: xsd:boolean, InventoryRequestType: ns1:typeInventoryRequest, OneWayShop: xsd:boolean, ProhibitUnbundledFareTypes: xsd:boolean, ReturnServices: xsd:boolean, ChannelId: ns1:ChannelId, ReturnFareAttributes: xsd:boolean)
     ns1:AirPricingPayment(Payment: ns2:Payment[], ({FormOfPayment: ns2:FormOfPayment[]} | {FormOfPaymentRef: ns2:FormOfPaymentRef}), AirPricingInfoRef: ns1:AirPricingInfoRef[])
     ns1:AirPricingSolution(AirSegment: ns1:typeBaseAirSegment[], AirSegmentRef: ns1:AirSegmentRef[], Journey: ns1:Journey[], LegRef: ns1:LegRef[], AirPricingInfo: ns1:AirPricingInfo[], FareNote: ns1:FareNote[], FareNoteRef: ns1:FareNoteRef[], Connection: ns1:Connection[], MetaData: ns2:MetaData[], AirPricingResultMessage: ns2:typeResultMessage[], FeeInfo: ns2:typeFeeInfo[], TaxInfo: ns2:typeTaxInfo[], AirItinerarySolutionRef: ns1:AirItinerarySolutionRef[], HostToken: ns2:HostToken[], OptionalServices: ns1:OptionalServices, AvailableSSR: ns1:AvailableSSR, PricingDetails: ns1:PricingDetails, Key: ns2:typeRef, CompleteItinerary: xsd:boolean, QuoteDate: xsd:date, TotalPrice: ns2:typeMoney, BasePrice: ns2:typeMoney, ApproximateTotalPrice: ns2:typeMoney, ApproximateBasePrice: ns2:typeMoney, EquivalentBasePrice: ns2:typeMoney, Taxes: ns2:typeMoney, Fees: ns2:typeMoney, Services: ns2:typeMoney, ApproximateTaxes: ns2:typeMoney, ApproximateFees: ns2:typeMoney, Itinerary: ns1:Itinerary)
     ns1:AirPricingTicketingModifiers(AirPricingInfoRef: ns1:AirPricingInfoRef[], TicketingModifiers: ns1:TicketingModifiers)
     ns1:AirRefundBundle(AirRefundInfo: ns1:AirRefundInfo, Name: ns2:Name, TaxInfo: ns2:typeTaxInfo[], WaiverCode: ns1:WaiverCode, TicketNumber: xsd:string, RefundType: ns1:RefundType)
     ns1:AirRefundInfo(RefundRemark: ns2:RefundRemark[], RefundAmount: ns2:typeMoney, RetainAmount: ns2:typeMoney, RefundFee: ns2:typeMoney, ForfeitAmount: ns2:typeMoney, Retain: xsd:boolean, Refund: xsd:boolean)
     ns1:AirRefundModifiers(RefundDate: xsd:string, AccountCode: xsd:string, TicketDesignator: ns1:typeTicketDesignator)
     ns1:AirRefundQuoteReq(BillingPointOfSaleInfo: ns2:BillingPointOfSaleInfo, AgentIDOverride: ns2:AgentIDOverride[], TerminalSessionInfo: xsd:string, OverridePCC: ns2:OverridePCC, TicketNumber: ns2:StringLength1to13[], TCRNumber: ns1:typeTCRNumber[], AirRefundModifiers: ns1:AirRefundModifiers, HostToken: ns2:HostToken[], TraceId: xsd:string, TokenId: xsd:string, AuthorizedBy: xsd:string, TargetBranch: ns2:typeBranchCode, OverrideLogging: ns2:typeLoggingLevel, LanguageCode: xsd:language, RetrieveProviderReservationDetails: xsd:boolean, Ignore: xsd:boolean)
     ns1:AirRefundQuoteRsp(ResponseMessage: ns2:ResponseMessage[], AirRefundBundle: ns1:AirRefundBundle[], TCRRefundBundle: ns1:TCRRefundBundle[], TraceId: xsd:string, TransactionId: xsd:string, ResponseTime: xsd:integer, CommandHistory: xsd:string)
     ns1:AirRefundReq(BillingPointOfSaleInfo: ns2:BillingPointOfSaleInfo, AgentIDOverride: ns2:AgentIDOverride[], TerminalSessionInfo: xsd:string, OverridePCC: ns2:OverridePCC, AirRefundBundle: ns1:AirRefundBundle[], TCRRefundBundle: ns1:TCRRefundBundle[], AirRefundModifiers: ns1:AirRefundModifiers, Commission: ns2:Commission[], FormOfPayment: ns2:FormOfPayment, TraceId: xsd:string, TokenId: xsd:string, AuthorizedBy: xsd:string, TargetBranch: ns2:typeBranchCode, OverrideLogging: ns2:typeLoggingLevel, LanguageCode: xsd:language, RetrieveProviderReservationDetails: xsd:boolean)
     ns1:AirRefundRsp(ResponseMessage: ns2:ResponseMessage[], ETR: ns1:ETR[], TCR: ns1:TCR[], RefundFailureInfo: ns1:typeTicketFailureInfo[], TraceId: xsd:string, TransactionId: xsd:string, ResponseTime: xsd:integer, CommandHistory: xsd:string)
     ns1:AirRepriceReq(BillingPointOfSaleInfo: ns2:BillingPointOfSaleInfo, AgentIDOverride: ns2:AgentIDOverride[], TerminalSessionInfo: xsd:string, OverridePCC: ns2:OverridePCC, AirReservationLocatorCode: ns1:AirReservationLocatorCode, AirPricingSolution: ns1:AirPricingSolution, TraceId: xsd:string, TokenId: xsd:string, AuthorizedBy: xsd:string, TargetBranch: ns2:typeBranchCode, OverrideLogging: ns2:typeLoggingLevel, LanguageCode: xsd:language, RetrieveProviderReservationDetails: xsd:boolean, FareRuleType: ns1:typeFareRuleType, IgnoreAvailability: xsd:boolean)
     ns1:AirRepriceRsp(ResponseMessage: ns2:ResponseMessage[], AirPricingSolution: ns1:AirPricingSolution, FareRule: ns1:FareRule[], TraceId: xsd:string, TransactionId: xsd:string, ResponseTime: xsd:integer, CommandHistory: xsd:string)
     ns1:AirReservation(AccountingRemark: ns2:AccountingRemark[], GeneralRemark: ns2:GeneralRemark[], Restriction: ns2:Restriction[], PassiveInfo: ns2:PassiveInfo, OptionalServices: ns1:OptionalServices, SupplierLocator: ns2:SupplierLocator[], ThirdPartyInformation: ns2:ThirdPartyInformation[], DocumentInfo: ns1:DocumentInfo, BookingTravelerRef: ns2:BookingTravelerRef[], ProviderReservationInfoRef: ns2:ProviderReservationInfoRef[], AirSegment: ns1:typeBaseAirSegment[], AirPricingInfo: ns1:AirPricingInfo[], Payment: ns2:Payment[], CreditCardAuth: ns2:CreditCardAuth[], FareNote: ns1:FareNote[], FeeInfo: ns2:typeFeeInfo[], TaxInfo: ns1:typeTaxInfoWithPaymentRef[], TicketingModifiers: ns1:TicketingModifiers[], AssociatedRemark: ns1:AssociatedRemark[], PocketItineraryRemark: ns1:PocketItineraryRemark[], AirExchangeBundleTotal: ns1:AirExchangeBundleTotal, AirExchangeBundle: ns1:AirExchangeBundle[], LocatorCode: ns2:typeLocatorCode, CreateDate: xsd:string, ModifiedDate: xsd:string, CustomerNumber: xsd:string)
     ns1:AirReservationLocatorCode(ns2:typeLocatorCode)
     ns1:AirRetrieveDocumentReq(BillingPointOfSaleInfo: ns2:BillingPointOfSaleInfo, AgentIDOverride: ns2:AgentIDOverride[], TerminalSessionInfo: xsd:string, OverridePCC: ns2:OverridePCC, ({AirReservationLocatorCode: ns1:AirReservationLocatorCode} | {TicketNumber: ns2:StringLength1to13[]} | {TCRNumber: ns1:typeTCRNumber[]}), TraceId: xsd:string, TokenId: xsd:string, AuthorizedBy: xsd:string, TargetBranch: ns2:typeBranchCode, OverrideLogging: ns2:typeLoggingLevel, LanguageCode: xsd:language, RetrieveProviderReservationDetails: xsd:boolean, ReturnRestrictions: xsd:boolean, ReturnPricing: xsd:boolean, RetrieveMCO: xsd:boolean, UniversalRecordLocatorCode: ns2:typeLocatorCode, ProviderCode: ns2:typeProviderCode, ProviderLocatorCode: ns2:typeProviderLocatorCode)
     ns1:AirRetrieveDocumentRsp(ResponseMessage: ns2:ResponseMessage[], ETR: ns1:ETR[], MCO: ns2:MCO[], TCR: ns1:TCR[], DocumentFailureInfo: ns1:typeFailureInfo[], ServiceFeeInfo: ns2:ServiceFeeInfo[], TraceId: xsd:string, TransactionId: xsd:string, ResponseTime: xsd:integer, CommandHistory: xsd:string, UniversalRecordLocatorCode: ns2:typeLocatorCode)
     ns1:AirScheduleChangedInfo(AirPricingSolution: ns1:AirPricingSolution)
     ns1:AirSearchAsynchModifiers(InitialAsynchResult: {MaxWait: xsd:positiveInteger})
     ns1:AirSearchModifiers(DisfavoredProviders: {Provider: ns2:Provider[]}, PreferredProviders: {Provider: ns2:Provider[]}, DisfavoredCarriers: {Carrier: ns2:Carrier[]}, PermittedCarriers: ns1:PermittedCarriers, ProhibitedCarriers: ns1:ProhibitedCarriers, PreferredCarriers: ns1:PreferredCarriers, PermittedCabins: ns1:PermittedCabins, PreferredCabins: ns1:PreferredCabins, PreferredAlliances: {Alliance: ns1:Alliance[]}, DisfavoredAlliances: {Alliance: ns1:Alliance[]}, PermittedBookingCodes: {BookingCode: ns1:BookingCode[]}, PreferredBookingCodes: ns1:PreferredBookingCodes, ProhibitedBookingCodes: {BookingCode: ns1:BookingCode[]}, FlightType: ns1:FlightType, MaxLayoverDuration: ns1:MaxLayoverDurationType, NativeSearchModifier: ns1:typeNativeSearchModifier, DistanceType: ns2:typeDistance, IncludeFlightDetails: xsd:boolean, AllowChangeOfAirport: xsd:boolean, ProhibitOvernightLayovers: xsd:boolean, MaxSolutions: xsd:integer, MaxConnectionTime: xsd:integer, SearchWeekends: xsd:boolean, IncludeExtraSolutions: xsd:boolean, ProhibitMultiAirportConnection: xsd:boolean, PreferNonStop: xsd:boolean, OrderBy: ns1:OrderBy, ExcludeOpenJawAirport: xsd:boolean, ExcludeGroundTransportation: xsd:boolean, MaxJourneyTime: ns1:typeMaxJourneyTime, JetServiceOnly: xsd:boolean)
     ns1:AirSegment(ns1:typeBaseAirSegment)
     ns1:AirSegmentDetails(PassengerDetailsRef: ns1:PassengerDetailsRef[], BrandID: ns1:BrandID[], BookingCodeList: xsd:string, Key: ns2:typeRef, ProviderCode: ns2:typeProviderCode, Carrier: ns2:typeCarrier, Origin: ns2:typeIATACode, Destination: ns2:typeIATACode, DepartureTime: xsd:dateTime, ArrivalTime: xsd:dateTime, Equipment: ns1:typeEquipment, ClassOfService: ns2:typeClassOfService, CabinClass: xsd:string, OperatingCarrier: ns2:typeCarrier, FlightNumber: ns2:typeFlightNumber)
     ns1:AirSegmentError(AirSegment: ns1:typeBaseAirSegment, ErrorMessage: xsd:string)
     ns1:AirSegmentList(AirSegment: ns1:typeBaseAirSegment[])
     ns1:AirSegmentPricingModifiers(PermittedBookingCodes: {BookingCode: ns1:BookingCode[]}, AirSegmentRef: ns2:typeRef, CabinClass: xsd:string, AccountCode: xsd:string, ProhibitAdvancePurchaseFares: xsd:boolean, ProhibitNonRefundableFares: xsd:boolean, ProhibitPenaltyFares: xsd:boolean, FareBasisCode: xsd:string, FareBreak: ns1:typeFareBreak, ConnectionIndicator: ns1:typeConnectionIndicator, BrandTier: ns2:StringLength1to10)
     ns1:AirSegmentRef(Key: ns2:typeRef)
     ns1:AirSegmentSellFailureInfo(AirSegmentError: ns1:AirSegmentError[])
     ns1:AirSolution(SearchTraveler: ns1:SearchTraveler[], AirSegment: ns1:typeBaseAirSegment[], HostToken: ns2:HostToken[], FareBasis: ns1:FareBasis[])
     ns1:AirSolutionChangedInfo(AirPricingSolution: ns1:AirPricingSolution, ReasonCode: ns1:ReasonCode)
     ns1:AirTicketingModifiers(DocumentModifiers: ns1:DocumentModifiers, AirPricingInfoRef: ns1:AirPricingInfoRef[], TourCode: ns1:TourCode, TicketEndorsement: ns1:TicketEndorsement[], Commission: ns2:Commission, FormOfPayment: ns2:FormOfPayment[], CreditCardAuth: ns2:CreditCardAuth[], Payment: ns2:Payment[], PlatingCarrier: ns2:typeCarrier, TicketedFareOverride: xsd:boolean, SuppressTaxAndFee: xsd:boolean)
     ns1:AirTicketingReq(BillingPointOfSaleInfo: ns2:BillingPointOfSaleInfo, AgentIDOverride: ns2:AgentIDOverride[], TerminalSessionInfo: xsd:string, OverridePCC: ns2:OverridePCC, AirReservationLocatorCode: ns1:AirReservationLocatorCode, AirPricingInfoRef: {BookingTravelerRef: ns2:BookingTravelerRef[], Key: ns2:typeRef}[], TicketingModifiersRef: ns1:typeTicketingModifiersRef[], WaiverCode: ns1:WaiverCode, Commission: ns2:Commission[], DetailedBillingInformation: ns1:DetailedBillingInformation[], FaxDetailsInformation: ns1:FaxDetailsInformation, AirTicketingModifiers: ns1:AirTicketingModifiers[], TraceId: xsd:string, TokenId: xsd:string, AuthorizedBy: xsd:string, TargetBranch: ns2:typeBranchCode, OverrideLogging: ns2:typeLoggingLevel, LanguageCode: xsd:language, RetrieveProviderReservationDetails: xsd:boolean, ReturnInfoOnFail: xsd:boolean, BulkTicket: xsd:boolean)
     ns1:AirTicketingRsp(ResponseMessage: ns2:ResponseMessage[], ({AirSolutionChangedInfo: ns1:AirSolutionChangedInfo} | {ETR: ns1:ETR[], TicketFailureInfo: ns1:TicketFailureInfo[], DetailedBillingInformation: ns1:DetailedBillingInformation[]}), TraceId: xsd:string, TransactionId: xsd:string, ResponseTime: xsd:integer, CommandHistory: xsd:string)
     ns1:AirUpsellSearchReq(BillingPointOfSaleInfo: ns2:BillingPointOfSaleInfo, AgentIDOverride: ns2:AgentIDOverride[], TerminalSessionInfo: xsd:string, OverridePCC: ns2:OverridePCC, AirItinerary: ns1:AirItinerary, AirPriceResult: ns1:AirPriceResult[], TraceId: xsd:string, TokenId: xsd:string, AuthorizedBy: xsd:string, TargetBranch: ns2:typeBranchCode, OverrideLogging: ns2:typeLoggingLevel, LanguageCode: xsd:language, RetrieveProviderReservationDetails: xsd:boolean)
     ns1:AirUpsellSearchRsp(ResponseMessage: ns2:ResponseMessage[], AirItinerary: ns1:AirItinerary, AirPriceResult: ns1:AirPriceResult[], TraceId: xsd:string, TransactionId: xsd:string, ResponseTime: xsd:integer, CommandHistory: xsd:string)
     ns1:AirVoidDocumentReq(BillingPointOfSaleInfo: ns2:BillingPointOfSaleInfo, AgentIDOverride: ns2:AgentIDOverride[], TerminalSessionInfo: xsd:string, OverridePCC: ns2:OverridePCC, AirReservationLocatorCode: ns1:AirReservationLocatorCode, VoidDocumentInfo: ns1:VoidDocumentInfo[], TraceId: xsd:string, TokenId: xsd:string, AuthorizedBy: xsd:string, TargetBranch: ns2:typeBranchCode, OverrideLogging: ns2:typeLoggingLevel, LanguageCode: xsd:language, RetrieveProviderReservationDetails: xsd:boolean, ShowETR: xsd:boolean, ProviderCode: ns2:typeProviderCode, ProviderLocatorCode: xsd:string)
     ns1:AirVoidDocumentRsp(ResponseMessage: ns2:ResponseMessage[], ETR: ns1:ETR[], VoidResultInfo: ns1:VoidResultInfo[], TraceId: xsd:string, TransactionId: xsd:string, ResponseTime: xsd:integer, CommandHistory: xsd:string)
     ns1:Alliance(Code: xsd:string)
     ns1:AlternateLocationDistance(Distance: ns2:Distance, Key: ns2:typeRef, SearchLocation: ns2:typeIATACode, AlternateLocation: ns2:typeIATACode)
     ns1:AlternateLocationDistanceList(AlternateLocationDistance: ns1:AlternateLocationDistance[])
     ns1:AlternateLocationDistanceRef(Key: ns2:typeRef)
     ns1:AlternateRoute(Leg: ns1:Leg[], Key: ns2:typeRef)
     ns1:AlternateRouteList(AlternateRoute: ns1:AlternateRoute[])
     ns1:ApplicableSegment(ns1:typeApplicableSegment)
     ns1:AssociatedRemark(RemarkData: xsd:string, BookingTravelerRef: ns2:typeRef[], ProviderReservationInfoRef: ns2:typeRef, ProviderCode: ns2:typeProviderCode, Key: ns2:typeRef, ElStat: ns2:typeElementStatus, KeyOverride: xsd:boolean, SegmentRef: ns2:typeRef)
     ns1:AsyncProviderSpecificResponse(ns2:BaseAsyncProviderSpecificResponse)
     ns1:AuditData(TaxInfo: ns2:typeTaxInfo[], Key: ns2:typeRef, TotalPrice: ns2:typeMoney, BasePrice: ns2:typeMoney, ApproximateTotalPrice: ns2:typeMoney, ApproximateBasePrice: ns2:typeMoney, EquivalentBasePrice: ns2:typeMoney, Taxes: ns2:typeMoney, Fees: ns2:typeMoney, Services: ns2:typeMoney, ApproximateTaxes: ns2:typeMoney, ApproximateFees: ns2:typeMoney)
     ns1:AutoPricingInfo(AirSegmentRef: ns1:AirSegmentRef[], BookingTravelerRef: ns2:BookingTravelerRef[], AirPricingModifiers: ns1:AirPricingModifiers, AirSegmentPricingModifiers: ns1:AirSegmentPricingModifiers[], Key: ns2:typeRef, PricingType: ns1:PricingType, PlatingCarrier: ns2:typeCarrier, ElStat: ns2:typeElementStatus, KeyOverride: xsd:boolean)
     ns1:AutoSeatAssignment(SegmentRef: ns2:typeRef, Smoking: xsd:boolean, SeatType: ns2:typeReqSeat, Group: xsd:boolean, BookingTravelerRef: ns2:typeRef)
     ns1:AvailabilityErrorInfo(Code: xsd:string, Service: xsd:string, Type: xsd:string, Description: xsd:string, TransactionId: xsd:string, TraceId: xsd:string, CommandHistory: xsd:string, Auxdata: ns2:Auxdata, StackTrace: xsd:string, AirSegmentError: ns1:AirSegmentError[])
     ns1:AvailabilitySearchReq(BillingPointOfSaleInfo: ns2:BillingPointOfSaleInfo, AgentIDOverride: ns2:AgentIDOverride[], TerminalSessionInfo: xsd:string, OverridePCC: ns2:OverridePCC, NextResultReference: ns2:NextResultReference[], PointOfCommencement: ns2:PointOfCommencement, ({SearchAirLeg: ns1:SearchAirLeg[]} | {SearchSpecificAirSegment: ns1:SearchSpecificAirSegment[]}), AirSearchModifiers: ns1:AirSearchModifiers, JourneyData: ns1:JourneyData, SearchPassenger: ns2:SearchPassenger[], PointOfSale: ns2:PointOfSale[], TraceId: xsd:string, TokenId: xsd:string, AuthorizedBy: xsd:string, TargetBranch: ns2:typeBranchCode, OverrideLogging: ns2:typeLoggingLevel, LanguageCode: xsd:language, RetrieveProviderReservationDetails: xsd:boolean, ReturnBrandIndicator: xsd:boolean, ChannelId: ns1:ChannelId, NSCC: ns1:NSCC)
     ns1:AvailabilitySearchRsp(ResponseMessage: ns2:ResponseMessage[], NextResultReference: ns2:NextResultReference[], FlightDetailsList: ns1:FlightDetailsList, AirSegmentList: ns1:AirSegmentList, FareInfoList: ns1:FareInfoList, FareRemarkList: ns1:FareRemarkList, AirItinerarySolution: ns1:AirItinerarySolution[], HostTokenList: ns1:HostTokenList, APISRequirementsList: ns1:APISRequirementsList, TraceId: xsd:string, TransactionId: xsd:string, ResponseTime: xsd:integer, CommandHistory: xsd:string, DistanceUnits: ns2:typeDistance)
     ns1:AvailableDiscount(LoyaltyProgram: ns2:LoyaltyProgram[], Amount: ns2:typeMoney, Percent: ns2:typePercentageWithDecimal, Description: xsd:string, DiscountQualifier: xsd:string)
     ns1:AvailableSSR(SSR: ns2:SSR[], SSRRules: ns2:ServiceRuleType[], IndustryStandardSSR: ns2:IndustryStandardSSR[])
     ns1:BackOfficeHandOff(Type: ns1:typeBackOffice, Location: xsd:string, PseudoCityCode: ns2:typePCC)
     ns1:BagDetails(BaggageRestriction: ns1:BaggageRestriction[], AvailableDiscount: ns1:AvailableDiscount[], ApplicableBags: xsd:string, BasePrice: ns2:typeMoney, ApproximateBasePrice: ns2:typeMoney, Taxes: ns2:typeMoney, TotalPrice: ns2:typeMoney, ApproximateTotalPrice: ns2:typeMoney)
     ns1:BaggageAllowance(NumberOfPieces: xsd:integer, MaxWeight: ns1:typeWeight)
     ns1:BaggageAllowanceInfo(URLInfo: ns1:URLInfo[], TextInfo: ns1:TextInfo[], BagDetails: ns1:BagDetails[], Origin: ns2:typeIATACode, Destination: ns2:typeIATACode, Carrier: ns2:typeCarrier, TravelerType: ns2:typePTC, FareInfoRef: ns2:typeRef)
     ns1:BaggageAllowances(BaggageAllowanceInfo: ns1:BaggageAllowanceInfo[], CarryOnAllowanceInfo: ns1:CarryOnAllowanceInfo[], EmbargoInfo: ns1:BaseBaggageAllowanceInfo[])
     ns1:BaggageRestriction(Dimension: ns1:Dimension[], MaxWeight: ns1:typeUnitOfMeasure[], TextInfo: ns1:TextInfo[])
     ns1:BillingDetailItem(Name: ns1:typeBillingDetailsName, DataType: ns1:typeBillingDetailsDataType, MinLength: xsd:string, MaxLength: xsd:string, Value: xsd:string)
     ns1:BookingCode(Code: ns2:typeClassOfService)
     ns1:BookingCodeInfo(CabinClass: xsd:string, BookingCounts: xsd:string)
     ns1:BookingInfo(BookingCode: xsd:string, BookingCount: xsd:string, CabinClass: xsd:string, FareInfoRef: ns2:typeRef, SegmentRef: ns2:typeRef, CouponRef: ns2:typeRef, AirItinerarySolutionRef: ns2:typeRef, HostTokenRef: ns2:typeRef)
     ns1:BookingRules(BookingRulesFareReference: ns1:BookingRulesFareReference[], RuleInfo: {ChargesRules: ns1:ChargesRules}[], Restriction: ns1:Restriction[], DocumentRequired: ns1:DocumentRequired[], GenderDobRequired: xsd:boolean)
     ns1:BookingRulesFareReference(xsd:string, ClassOfService: ns2:typeClassOfService, TicketDesignatorCode: ns1:typeTicketDesignator, AccountCode: xsd:string, UpgrageAllowed: xsd:boolean, UpgradeClassOfService: ns2:typeClassOfService)
     ns1:Brand(Title: ns1:typeTextElement[], Text: ns1:typeTextElement[], ImageLocation: ns1:ImageLocation[], OptionalServices: ns1:OptionalServices, Rules: ns1:Rules[], ServiceAssociations: ns1:ServiceAssociations, UpsellBrand: ns1:UpsellBrand, ApplicableSegment: ns1:typeApplicableSegment[], DefaultBrandDetail: ns1:typeDefaultBrandDetail[], Key: ns2:typeRef, BrandID: ns1:typeBrandId, Name: xsd:string, AirItineraryDetailsRef: ns2:typeRef, UpSellBrandID: ns1:typeBrandId, BrandFound: xsd:boolean, UpSellBrandFound: xsd:boolean, BrandedDetailsAvailable: xsd:boolean, Carrier: ns2:typeCarrier)
     ns1:BrandID(Id: xsd:string)
     ns1:BrandInfo(Key: ns2:typeRef, BrandID: ns1:typeBrandId, AirPricingInfoRef: ns2:typeRef, FareInfoRef: ns2:typeRef)
     ns1:BrandList(Brand: ns1:Brand[])
     ns1:BrandModifiers(ModifierType: ns1:ModifierType)
     ns1:BrandingInfo(PriceRange: ns1:PriceRange[], Text: ns1:typeTextElement[], Title: ns1:typeTextElement[], ImageLocation: ns1:ImageLocation[], ServiceGroup: ns1:ServiceGroup, AirSegmentRef: ns2:typeSegmentRef[], Key: ns2:typeRef, ServiceSubCode: xsd:string, ExternalServiceName: xsd:string, ServiceType: xsd:string, CommercialName: xsd:string, Chargeable: xsd:string)
     ns1:BundledService(Carrier: ns2:typeCarrier, CarrierSubCode: xsd:boolean, ServiceType: xsd:string, ServiceSubCode: xsd:string, Name: xsd:string, Booking: ns1:Booking, Occurrence: xsd:positiveInteger)
     ns1:BundledServices(BundledService: ns1:BundledService[])
     ns1:CO2Emission(AirSegmentRef: ns2:typeRef, Value: xsd:float)
     ns1:CO2Emissions(CO2Emission: ns1:CO2Emission[], TotalValue: xsd:float, Unit: ns2:StringLength1to64, Category: ns2:StringLength1to64, Source: ns2:StringLength1to64)
     ns1:CarrierCode(ns2:typeCarrier)
     ns1:CarrierList(CarrierCode: ns1:CarrierCode[], IncludeCarrier: xsd:boolean)
     ns1:CarryOnAllowanceInfo(URLInfo: ns1:URLInfo[], TextInfo: ns1:TextInfo[], CarryOnDetails: {BaggageRestriction: ns1:BaggageRestriction[], ApplicableCarryOnBags: xsd:string, BasePrice: ns2:typeMoney, ApproximateBasePrice: ns2:typeMoney, Taxes: ns2:typeMoney, TotalPrice: ns2:typeMoney, ApproximateTotalPrice: ns2:typeMoney}[], Origin: ns2:typeIATACode, Destination: ns2:typeIATACode, Carrier: ns2:typeCarrier)
     ns1:Characteristic(Value: xsd:string, Position: ns1:typePosition, RowLocation: ns1:typeRowLocation)
     ns1:ChargesRules(VoluntaryChanges: {Penalty: ns1:Penalty, VolChangeInd: xsd:boolean}[], VoluntaryRefunds: {Penalty: ns1:Penalty, VolChangeInd: xsd:boolean}[])
     ns1:CodeshareInfo(xsd:string, OperatingCarrier: ns2:typeCarrier, OperatingFlightNumber: ns2:typeFlightNumber)
     ns1:CompanyName(SupplierCode: ns2:typeCarrier)
     ns1:ConjunctedTicketInfo(Number: xsd:string, Status: ns2:typeTicketStatus)
     ns1:Connection(FareNote: ns1:FareNote, ChangeOfPlane: xsd:boolean, ChangeOfTerminal: xsd:boolean, ChangeOfAirport: xsd:boolean, StopOver: xsd:boolean, MinConnectionTime: xsd:int, Duration: xsd:int, SegmentIndex: xsd:int, FlightDetailsIndex: xsd:int, IncludeStopOverToFareQuote: ns1:typeIgnoreStopOver)
     ns1:ContractCode(Code: ns1:Code, CompanyName: xsd:string, ProviderCode: ns2:typeProviderCode, SupplierCode: ns2:typeSupplierCode)
     ns1:Coupon(TicketDesignator: ns1:TicketDesignator[], Key: ns2:typeRef, CouponNumber: xsd:integer, OperatingCarrier: ns2:typeCarrier, OperatingFlightNumber: ns2:typeFlightNumber, MarketingCarrier: ns2:typeCarrier, MarketingFlightNumber: ns2:typeFlightNumber, Origin: ns2:typeIATACode, Destination: ns2:typeIATACode, DepartureTime: xsd:string, ArrivalTime: xsd:string, StopoverCode: xsd:boolean, BookingClass: ns1:BookingClass, FareBasis: xsd:string, NotValidBefore: xsd:date, NotValidAfter: xsd:date, Status: ns1:Status, SegmentGroup: xsd:integer, MarriageGroup: xsd:integer, ElStat: ns2:typeElementStatus, KeyOverride: xsd:boolean)
     ns1:CreditSummary(CurrencyCode: ns2:typeCurrency, CurrentBalance: xsd:decimal, InitialCredit: xsd:decimal)
     ns1:CustomerReceiptInfo(BookingTravelerRef: ns2:typeRef, EmailRef: ns2:typeRef)
     ns1:CustomerSearch()
     ns1:DefaultBrandDetail(ns1:typeDefaultBrandDetail)
     ns1:DestinationPurposeCode(Destination: ns1:typeDestinationCode, Purpose: ns1:typePurposeCode)
     ns1:DetailedBillingInformation(FormOfPaymentRef: ns2:FormOfPaymentRef, AirPricingInfoRef: ns1:AirPricingInfoRef[], BillingDetailItem: ns1:BillingDetailItem[])
     ns1:Dimension(ns1:typeUnitOfMeasure, Value: xsd:float, Unit: xsd:string, type: xsd:string)
     ns1:Document(Sequence: xsd:positiveInteger, Type: xsd:string, Level: xsd:string)
     ns1:DocumentInfo(TicketInfo: ns1:TicketInfo[], MCOInfo: ns2:MCOInformation[], TCRInfo: ns1:TCRInfo[])
     ns1:DocumentModifiers(GenerateItineraryInvoice: xsd:boolean, GenerateAccountingInterface: xsd:boolean)
     ns1:DocumentOptions(PassengerReceiptOverride: ns1:PassengerReceiptOverride, OverrideOption: ns1:typeOverrideOption[], SuppressItineraryRemarks: xsd:boolean, GenerateItinNumbers: xsd:boolean)
     ns1:DocumentRequired(DocType: xsd:string, IncludeExcludeUseInd: xsd:boolean, DocId: xsd:string, AllowedIds: xsd:string)
     ns1:DocumentSelect(BackOfficeHandOff: ns1:BackOfficeHandOff, Itinerary: ns1:Itinerary, IssueTicketOnly: xsd:boolean, IssueElectronicTicket: xsd:boolean, FaxIndicator: xsd:boolean)
     ns1:EMD(FulfillmentType: ns1:FulfillmentType, FulfillmentTypeDescription: xsd:string, AssociatedItem: xsd:string, AvailabilityChargeIndicator: ns1:AvailabilityChargeIndicator, RefundReissueIndicator: ns1:RefundReissueIndicator, Commissionable: ns1:Commissionable, MileageIndicator: ns1:MileageIndicator, Location: ns1:Location, Date: ns1:Date, Booking: ns1:Booking, DisplayCategory: ns1:DisplayCategory, Reusable: xsd:boolean)
     ns1:EMDCommission(Type: ns2:typeAdjustmentType, Value: xsd:decimal, CurrencyCode: ns2:typeCurrency)
     ns1:EMDCoupon(Number: xsd:integer, Status: xsd:string, SvcDescription: xsd:string, ConsumedAtIssuanceInd: xsd:boolean, RFIC: ns1:RFIC, RFISC: ns1:RFISC, RFIDescription: ns1:RFIDescription, Origin: ns2:typeIATACode, Destination: ns2:typeIATACode, FlightNumber: ns2:typeFlightNumber, PresentTo: ns1:PresentTo, PresentAt: ns1:PresentAt, NonRefundableInd: xsd:boolean, MarketingCarrier: ns2:typeCarrier, Key: ns2:typeRef, ElStat: ns2:typeElementStatus, KeyOverride: xsd:boolean)
     ns1:EMDEndorsement(ns1:EMDEndorsement)
     ns1:EMDInfo(EMDTravelerInfo: ns1:EMDTravelerInfo, SupplierLocator: ns2:SupplierLocator[], ElectronicMiscDocument: ns1:ElectronicMiscDocument[], Payment: ns2:Payment, FormOfPayment: ns2:FormOfPayment, EMDPricingInfo: ns1:EMDPricingInfo, EMDEndorsement: ns1:EMDEndorsement[], FareCalc: xsd:string, EMDCommission: ns1:EMDCommission, ProviderCode: ns2:typeProviderCode, ProviderLocatorCode: ns2:typeProviderLocatorCode, Key: ns2:typeRef, ElStat: ns2:typeElementStatus, KeyOverride: xsd:boolean)
     ns1:EMDIssuanceReq(BillingPointOfSaleInfo: ns2:BillingPointOfSaleInfo, AgentIDOverride: ns2:AgentIDOverride[], TerminalSessionInfo: xsd:string, OverridePCC: ns2:OverridePCC, ProviderReservationDetail: ns2:typeProviderReservationDetail, TicketNumber: ns2:StringLength1to13, IssuanceModifiers: ns1:IssuanceModifiers, SelectionModifiers: ns1:SelectionModifiers, TraceId: xsd:string, TokenId: xsd:string, AuthorizedBy: xsd:string, TargetBranch: ns2:typeBranchCode, OverrideLogging: ns2:typeLoggingLevel, LanguageCode: xsd:language, RetrieveProviderReservationDetails: xsd:boolean, UniversalRecordLocatorCode: ns2:typeLocatorCode, ShowDetails: xsd:boolean)
     ns1:EMDIssuanceRsp(ResponseMessage: ns2:ResponseMessage[], ({EMDSummaryInfo: ns1:EMDSummaryInfo[]} | {EMDInfo: ns1:EMDInfo[]}), TraceId: xsd:string, TransactionId: xsd:string, ResponseTime: xsd:integer, CommandHistory: xsd:string)
     ns1:EMDPricingInfo(TaxInfo: ns2:typeTaxInfo[], BaseFare: ns2:typeMoney, TotalFare: ns2:typeMoney, TotalTax: ns2:typeMoney, EquivFare: ns2:typeMoney)
     ns1:EMDRetrieveReq(BillingPointOfSaleInfo: ns2:BillingPointOfSaleInfo, AgentIDOverride: ns2:AgentIDOverride[], TerminalSessionInfo: xsd:string, OverridePCC: ns2:OverridePCC, ({ListRetrieve: {ProviderReservationDetail: ns2:typeProviderReservationDetail}} | {DetailRetrieve: {ProviderReservationDetail: ns2:typeProviderReservationDetail, EMDNumber: ns1:typeEMDNumber}}), TraceId: xsd:string, TokenId: xsd:string, AuthorizedBy: xsd:string, TargetBranch: ns2:typeBranchCode, OverrideLogging: ns2:typeLoggingLevel, LanguageCode: xsd:language, RetrieveProviderReservationDetails: xsd:boolean)
     ns1:EMDRetrieveRsp(ResponseMessage: ns2:ResponseMessage[], ({EMDInfo: ns1:EMDInfo} | {EMDSummaryInfo: ns1:EMDSummaryInfo[]}), TraceId: xsd:string, TransactionId: xsd:string, ResponseTime: xsd:integer, CommandHistory: xsd:string)
     ns1:EMDSummary(EMDCoupon: ns1:EMDCoupon[], Number: ns1:typeEMDNumber, PrimaryDocumentIndicator: xsd:boolean, InConjunctionWith: ns1:typeEMDNumber, AssociatedTicketNumber: ns2:typeTicketNumber, PlatingCarrier: ns2:typeCarrier, IssueDate: xsd:dateTime, Key: ns2:typeRef, ElStat: ns2:typeElementStatus, KeyOverride: xsd:boolean)
     ns1:EMDSummaryInfo(EMDSummary: ns1:EMDSummary[], EMDTravelerInfo: ns1:EMDTravelerInfo, Payment: ns2:Payment, ProviderReservationInfoRef: ns2:typeRef, Key: ns2:typeRef, ElStat: ns2:typeElementStatus, KeyOverride: xsd:boolean)
     ns1:EMDTravelerInfo(NameInfo: {Prefix: ns2:Prefix, First: ns2:First, Middle: ns2:Middle, Last: ns2:typeTravelerLastName, Suffix: ns2:Suffix}, TravelerType: ns2:typePTC, Age: xsd:integer)
     ns1:ETR(AirReservationLocatorCode: ns1:AirReservationLocatorCode, AgencyInfo: ns2:AgencyInfo, BookingTraveler: ns2:BookingTraveler, FormOfPayment: ns2:FormOfPayment[], Payment: ns2:Payment[], CreditCardAuth: ns2:CreditCardAuth, SupplierLocator: ns2:SupplierLocator[], FareCalc: xsd:string, Ticket: ns1:Ticket[], Commission: ns2:Commission[], AirPricingInfo: ns1:AirPricingInfo, AuditData: ns1:AuditData, Restriction: ns2:Restriction[], WaiverCode: ns1:WaiverCode, BaggageAllowances: ns1:BaggageAllowances, Key: ns2:typeRef, TotalPrice: ns2:typeMoney, BasePrice: ns2:typeMoney, ApproximateTotalPrice: ns2:typeMoney, ApproximateBasePrice: ns2:typeMoney, EquivalentBasePrice: ns2:typeMoney, Taxes: ns2:typeMoney, Fees: ns2:typeMoney, Services: ns2:typeMoney, ApproximateTaxes: ns2:typeMoney, ApproximateFees: ns2:typeMoney, Refundable: xsd:boolean, Exchangeable: xsd:boolean, TourCode: ns1:typeTourCode, IssuedDate: xsd:string, BulkTicket: xsd:boolean, ProviderCode: ns2:typeProviderCode, ProviderLocatorCode: ns2:typeProviderLocatorCode, IATANumber: ns2:typeIATA, PseudoCityCode: ns2:typePCC, PlatingCarrier: ns2:typeCarrier, ElStat: ns2:typeElementStatus, KeyOverride: xsd:boolean)
     ns1:ElectronicMiscDocument(EMDCoupon: ns1:EMDCoupon[], Number: ns1:typeEMDNumber, PrimaryDocumentIndicator: xsd:boolean, InConjunctionWith: ns1:typeEMDNumber, AssociatedTicketNumber: ns2:typeTicketNumber, PlatingCarrier: ns2:typeCarrier, IssueDate: xsd:dateTime, Status: xsd:string, Key: ns2:typeRef, ElStat: ns2:typeElementStatus, KeyOverride: xsd:boolean)
     ns1:Embargo(Key: ns2:typeRef, Carrier: ns2:typeCarrier, SegmentRef: ns2:typeRef, Name: ns1:Name, Text: xsd:string, SecondaryType: xsd:string, Type: ns2:typeMerchandisingService, Url: xsd:anyURI, ServiceSubCode: ns1:ServiceSubCode)
     ns1:EmbargoInfo(ns1:BaseBaggageAllowanceInfo)
     ns1:EmbargoList(Embargo: ns1:Embargo[])
     ns1:Enumeration(SolutionGroup: ns1:SolutionGroup[])
     ns1:ExchangeAirSegment(AirSegment: ns1:typeBaseAirSegment, CabinClass: ns2:CabinClass, FareBasisCode: xsd:string)
     ns1:ExchangeEligibilityInfo(ExchangePenaltyInfo: ns1:ExchangePenaltyInfo[], EligibleFares: xsd:string, RefundableFares: xsd:string, PassedAutomationChecks: xsd:boolean)
     ns1:ExchangePenaltyInfo(PenaltyInformation: ns1:PenaltyInformation[], PTC: ns2:typePTC, MinimumChangeFee: ns2:typeMoney, MaximumChangeFee: ns2:typeMoney)
     ns1:ExchangedTicketInfo(Number: ns2:typeTicketNumber)
     ns1:ExcludeTicketing(BookingTravelerRef: ns2:typeRef[])
     ns1:ExemptOBFee(SubCode: ns1:typeSubCode[])
     ns1:ExemptTaxes(CountryCode: ns2:typeCountry[], TaxCategory: xsd:string[], AllTaxes: xsd:boolean, TaxTerritory: ns1:TaxTerritory, CompanyName: ns1:CompanyName)
     ns1:ExpertSolution(LegPrice: ns1:LegPrice[], Key: ns2:typeRef, TotalPrice: ns2:typeMoney, ApproximateTotalPrice: ns2:typeMoney, CreatedDate: xsd:date)
     ns1:ExpertSolutionList(ExpertSolution: ns1:ExpertSolution[])
     ns1:Facility(Characteristic: ns1:Characteristic[], Remark: ns2:Remark[], PassengerSeatPrice: ns1:PassengerSeatPrice[], TaxInfo: ns2:typeTaxInfo[], EMD: ns1:EMD, ServiceData: ns2:ServiceData[], TourCode: ns1:TourCode, Type: ns1:typeFacility, SeatCode: xsd:string, Availability: ns1:typeSeatAvailability, SeatPrice: ns2:typeMoney, Paid: xsd:boolean, ServiceSubCode: ns1:ServiceSubCode, SSRCode: ns2:typeSSRCode, IssuanceReason: ns1:IssuanceReason, BaseSeatPrice: ns2:typeMoney, Taxes: ns2:typeMoney, Quantity: xsd:integer, SequenceNumber: xsd:integer, InclusiveOfTax: xsd:boolean, InterlineSettlementAllowed: xsd:boolean, GeographySpecification: xsd:string, Source: xsd:string, OptionalServiceRef: ns2:typeRef, SeatInformationRef: ns2:typeRef)
     ns1:FareBasis(Code: xsd:string, SegmentRef: ns2:typeRef)
     ns1:FareCalc(xsd:string)
     ns1:FareDetails(FareTicketDesignator: ns1:FareTicketDesignator, Key: ns2:typeRef, PassengerDetailRef: ns2:typeRef, FareBasis: ns2:typeFareBasisCode)
     ns1:FareDetailsRef(Key: ns2:typeRef)
     ns1:FareDisplay(FareDisplayRule: ns1:FareDisplayRule, FarePricing: ns1:FarePricing[], FareRestriction: ns1:FareRestriction[], FareRoutingInformation: xsd:string, FareMileageInformation: xsd:string, AirFareDisplayRuleKey: ns1:AirFareDisplayRuleKey, BookingCode: ns1:BookingCode[], AccountCode: ns2:AccountCode[], AddlBookingCodeInformation: ns1:AddlBookingCodeInformation, FareRuleFailureInfo: ns1:FareRuleFailureInfo, PriceChange: ns1:PriceChangeType[], Carrier: ns2:typeCarrier, FareBasis: xsd:string, Amount: ns2:typeMoney, TripType: ns1:typeFareTripType, FareTypeCode: ns1:typeFareTypeCode, SpecialFare: xsd:boolean, InstantPurchase: xsd:boolean, EligibilityRestricted: xsd:boolean, FlightRestricted: xsd:boolean, StopoversRestricted: xsd:boolean, TransfersRestricted: xsd:boolean, BlackoutsExist: xsd:boolean, AccompaniedTravel: xsd:boolean, MileOrRouteBasedFare: ns1:typeMileOrRouteBasedFare, GlobalIndicator: ns1:typeATPCOGlobalIndicator, Origin: ns2:typeIATACode, Destination: ns2:typeIATACode, FareTicketingCode: xsd:string, FareTicketingDesignator: ns1:typeTicketDesignator)
     ns1:FareDisplayRule(RuleAdvancedPurchase: ns1:RuleAdvancedPurchase, RuleLengthOfStay: ns1:RuleLengthOfStay, RuleCharges: ns1:RuleCharges, RuleNumber: xsd:string, Source: xsd:string, TariffNumber: xsd:string)
     ns1:FareGuaranteeInfo(GuaranteeDate: xsd:date, GuaranteeType: ns1:typeFareGuarantee)
     ns1:FareInfo(FareTicketDesignator: ns1:FareTicketDesignator[], FareSurcharge: ns1:FareSurcharge[], AccountCode: ns2:AccountCode[], ContractCode: ns1:ContractCode[], Endorsement: ns2:Endorsement[], BaggageAllowance: ns1:BaggageAllowance, FareRuleKey: ns1:FareRuleKey, FareRuleFailureInfo: ns1:FareRuleFailureInfo, FareRemarkRef: ns1:FareRemarkRef[], Brand: ns1:Brand, Commission: ns2:Commission, FareAttributes: xsd:string, Key: ns2:typeRef, FareBasis: xsd:string, PassengerTypeCode: ns2:typePTC, Origin: ns2:typeIATACode, Destination: ns2:typeIATACode, EffectiveDate: xsd:string, TravelDate: xsd:date, DepartureDate: xsd:date, Amount: ns2:typeMoney, PrivateFare: ns1:typePrivateFare, NegotiatedFare: xsd:boolean, TourCode: ns1:typeTourCode, WaiverCode: xsd:string, NotValidBefore: xsd:date, NotValidAfter: xsd:date, PseudoCityCode: ns2:typePCC, FareFamily: ns2:typeFareFamily, PromotionalFare: xsd:boolean, CarCode: ns1:typeCarCode, ValueCode: ns1:typeValueCode, ElStat: ns2:typeElementStatus, KeyOverride: xsd:boolean, BulkTicket: xsd:boolean, InclusiveTour: xsd:boolean, Value: xsd:string, SupplierCode: ns2:typeSupplierCode, TaxAmount: ns2:typeMoney)
     ns1:FareInfoList(FareInfo: ns1:FareInfo[])
     ns1:FareInfoMessage(xsd:string, Key: ns2:typeRef)
     ns1:FareInfoRef(Key: ns2:typeRef)
     ns1:FareMileageInformation(xsd:string)
     ns1:FareNote(xsd:string, Key: ns2:typeRef, Precedence: xsd:integer, NoteName: xsd:string, FareInfoMessageRef: ns2:typeRef, ElStat: ns2:typeElementStatus, KeyOverride: xsd:boolean)
     ns1:FareNoteList(FareNote: ns1:FareNote[])
     ns1:FareNoteRef(Key: ns2:typeRef)
     ns1:FarePricing(PassengerType: ns2:typePTC, TotalFareAmount: ns2:typeMoney, PrivateFare: xsd:boolean, NegotiatedFare: xsd:boolean, AutoPriceable: xsd:boolean, TotalNetFareAmount: ns2:typeMoney, BaseFare: ns2:typeMoney, Taxes: ns2:typeMoney, MMid: ns2:typeRef)
     ns1:FareRemark(Text: xsd:string[], URL: ns1:URL[], Key: ns2:typeRef, Name: xsd:string)
     ns1:FareRemarkList(FareRemark: ns1:FareRemark[])
     ns1:FareRemarkRef(Key: ns2:typeRef)
     ns1:FareRestriction(FareRestrictionDaysOfWeek: ns1:FareRestrictionDaysOfWeek[], FareRestrictionDate: ns1:FareRestrictionDate[], FareRestrictionSaleDate: ns1:FareRestrictionSaleDate, FareRestrictiontype: ns1:typeFareRestrictionType)
     ns1:FareRestrictionDate(Direction: ns1:typeFareDirectionality, StartDate: xsd:string, EndDate: xsd:string, EndDateIndicator: ns1:EndDateIndicator)
     ns1:FareRestrictionDaysOfWeek(Direction: ns1:typeFareDirectionality, TripType: ns1:typeFareTripType, Monday: xsd:boolean, Tuesday: xsd:boolean, Wednesday: xsd:boolean, Thursday: xsd:boolean, Friday: xsd:boolean, Saturday: xsd:boolean, Sunday: xsd:boolean)
     ns1:FareRestrictionSaleDate(StartDate: xsd:date, EndDate: xsd:date)
     ns1:FareRoutingInformation(xsd:string)
     ns1:FareRule(FareRuleLong: ns1:FareRuleLong[], FareRuleShort: ns1:FareRuleShort[], RuleAdvancedPurchase: ns1:RuleAdvancedPurchase, RuleLengthOfStay: ns1:RuleLengthOfStay, RuleCharges: ns1:RuleCharges, FareRuleResultMessage: ns2:typeResultMessage[], FareInfoRef: xsd:string, RuleNumber: xsd:string, Source: xsd:string, TariffNumber: xsd:string, ProviderCode: ns2:typeProviderCode, SupplierCode: ns2:typeSupplierCode)
     ns1:FareRuleCategory(Category: ns1:Category)
     ns1:FareRuleFailureInfo(Reason: ns1:typeFareRuleFailureInfoReason[])
     ns1:FareRuleKey(ns2:typeNonBlanks, FareInfoRef: xsd:string, ProviderCode: ns2:typeProviderCode)
     ns1:FareRuleLong(xsd:string, Category: xsd:integer, Type: xsd:string)
     ns1:FareRuleLongRef(Key: ns2:typeRef)
     ns1:FareRuleLookup(AccountCode: ns2:AccountCode, PointOfSale: ns2:PointOfSale, Origin: ns2:typeIATACode, Destination: ns2:typeIATACode, Carrier: ns2:typeCarrier, FareBasis: xsd:string, ProviderCode: ns2:typeProviderCode, DepartureDate: xsd:date, TicketingDate: xsd:date)
     ns1:FareRuleNameValue(Name: xsd:string, Value: xsd:string)
     ns1:FareRuleShort(FareRuleNameValue: ns1:FareRuleNameValue[], Category: xsd:integer, TableNumber: xsd:string)
     ns1:FareRuleShortRef(Key: ns2:typeRef)
     ns1:FareRulesFilter(Refundability: {Value: ns1:typeRefundabilityValue}, LatestTicketingTime: xsd:dateTime)
     ns1:FareRulesFilterCategory(CategoryCode: ns1:typeFareRuleCategoryCode[])
     ns1:FareStatus(FareStatusFailureInfo: ns1:FareStatusFailureInfo, Code: ns1:typeFareStatusCode)
     ns1:FareStatusFailureInfo(Code: xsd:string, Reason: xsd:string)
     ns1:FareSurcharge(Key: ns2:typeRef, Type: xsd:string, Amount: ns2:typeMoney, SegmentRef: ns2:typeRef, CouponRef: ns2:typeRef, ElStat: ns2:typeElementStatus, KeyOverride: xsd:boolean)
     ns1:FareTicketDesignator(Value: ns1:typeTicketDesignator)
     ns1:FareType(Code: ns1:typeFareTypeCode)
     ns1:FaxDetails(PhoneNumber: ns2:PhoneNumber, TermConditions: ns1:TermConditions, Remark: ns2:Remark[], IncludeCoverSheet: xsd:boolean, To: xsd:string, From: xsd:string, DeptBillingCode: xsd:string, InvoiceNumber: xsd:string)
     ns1:FaxDetailsInformation(AirPricingInfoRef: ns1:AirPricingInfoRef[], FaxDetails: ns1:FaxDetails)
     ns1:FeeApplication(ns1:typeFeeApplication, Code: ns1:Code)
     ns1:FeeInfo(ns2:typeFeeInfo)
     ns1:FlexExploreModifiers(Destination: ns2:typeIATACode[], Type: ns1:Type, Radius: xsd:integer, GroupName: ns1:GroupName)
     ns1:FlightDetails(Connection: ns1:Connection, Meals: ns1:typeMealService[], InFlightServices: xsd:string[], Key: ns2:typeRef, Origin: ns2:typeIATACode, Destination: ns2:typeIATACode, DepartureTime: xsd:string, ArrivalTime: xsd:string, FlightTime: xsd:integer, TravelTime: xsd:integer, Distance: xsd:integer, Equipment: ns1:typeEquipment, OnTimePerformance: xsd:integer, OriginTerminal: xsd:string, DestinationTerminal: xsd:string, AutomatedCheckin: xsd:boolean, ElStat: ns2:typeElementStatus, KeyOverride: xsd:boolean)
     ns1:FlightDetailsList(FlightDetails: ns1:FlightDetails[])
     ns1:FlightDetailsRef(Key: ns2:typeRef)
     ns1:FlightDetailsReq(BillingPointOfSaleInfo: ns2:BillingPointOfSaleInfo, AgentIDOverride: ns2:AgentIDOverride[], TerminalSessionInfo: xsd:string, OverridePCC: ns2:OverridePCC, AirSegment: ns1:typeBaseAirSegment[], TraceId: xsd:string, TokenId: xsd:string, AuthorizedBy: xsd:string, TargetBranch: ns2:typeBranchCode, OverrideLogging: ns2:typeLoggingLevel, LanguageCode: xsd:language, RetrieveProviderReservationDetails: xsd:boolean)
     ns1:FlightDetailsRsp(ResponseMessage: ns2:ResponseMessage[], AirSegment: ns1:typeBaseAirSegment[], CO2Emissions: ns1:CO2Emissions[], TraceId: xsd:string, TransactionId: xsd:string, ResponseTime: xsd:integer, CommandHistory: xsd:string)
     ns1:FlightInfo(FlightInfoDetail: ns1:FlightInfoDetail[], FlightInfoErrorMessage: ns2:typeResultMessage[], CriteriaKey: ns2:typeRef, Carrier: ns2:typeCarrier, FlightNumber: ns2:typeFlightNumber, Origin: ns2:typeIATACode, Destination: ns2:typeIATACode, DepartureDate: xsd:date, ClassOfService: ns2:typeClassOfService)
     ns1:FlightInfoCriteria(Key: ns2:typeRef, Carrier: ns2:typeCarrier, FlightNumber: ns2:typeFlightNumber, Origin: ns2:typeIATACode, Destination: ns2:typeIATACode, DepartureDate: xsd:date, ClassOfService: ns2:typeClassOfService)
     ns1:FlightInfoDetail(CodeshareInfo: ns1:CodeshareInfo, Meals: ns1:typeMealService[], InFlightServices: xsd:string[], Variance: ns1:Variance[], Origin: ns2:typeIATACode, Destination: ns2:typeIATACode, ScheduledDepartureTime: xsd:string, ScheduledArrivalTime: xsd:string, TravelTime: xsd:integer, ETicketability: ns1:typeEticketability, Equipment: ns1:typeEquipment, OriginTerminal: xsd:string, OriginGate: ns1:OriginGate, DestinationTerminal: xsd:string, DestinationGate: ns1:DestinationGate, AutomatedCheckin: xsd:boolean)
     ns1:FlightInformationReq(BillingPointOfSaleInfo: ns2:BillingPointOfSaleInfo, AgentIDOverride: ns2:AgentIDOverride[], TerminalSessionInfo: xsd:string, OverridePCC: ns2:OverridePCC, FlightInfoCriteria: ns1:FlightInfoCriteria[], TraceId: xsd:string, TokenId: xsd:string, AuthorizedBy: xsd:string, TargetBranch: ns2:typeBranchCode, OverrideLogging: ns2:typeLoggingLevel, LanguageCode: xsd:language, RetrieveProviderReservationDetails: xsd:boolean)
     ns1:FlightInformationRsp(ResponseMessage: ns2:ResponseMessage[], FlightInfo: ns1:FlightInfo[], TraceId: xsd:string, TransactionId: xsd:string, ResponseTime: xsd:integer, CommandHistory: xsd:string)
     ns1:FlightOption(Option: ns1:Option[], LegRef: ns2:typeRef, Origin: ns2:typeIATACode, Destination: ns2:typeIATACode)
     ns1:FlightOptionsList(FlightOption: ns1:FlightOption[])
     ns1:FlightTimeDetail(DaysOfOperation: ns1:typeDaysOfOperation, Connection: ns1:Connection, Key: ns2:typeRef, VendorCode: xsd:string, FlightNumber: ns2:typeFlightNumber, Origin: ns2:typeAirport, Destination: ns2:typeAirport, DepartureTime: xsd:time, ArrivalTime: xsd:time, StopCount: xsd:integer, Equipment: ns1:typeEquipment, ScheduleStartDate: xsd:date, ScheduleEndDate: xsd:date, DisplayOption: xsd:boolean, OnTimePerformance: xsd:integer, DayChange: xsd:integer, JourneyTime: xsd:integer, FlightTime: xsd:integer, StartTerminal: xsd:string, EndTerminal: xsd:string, FirstIntermediateStop: ns2:typeIATACode, LastIntermediateStop: ns2:typeIATACode, InsideAvailability: ns1:InsideAvailability, SecureSell: ns1:SecureSell, AvailabilitySource: ns1:typeAvailabilitySource)
     ns1:FlightTimeTableCriteria(({GeneralTimeTable: ns1:GeneralTimeTable} | {SpecificTimeTable: ns1:SpecificTimeTable}))
     ns1:FlightTimeTableReq(BillingPointOfSaleInfo: ns2:BillingPointOfSaleInfo, AgentIDOverride: ns2:AgentIDOverride[], TerminalSessionInfo: xsd:string, OverridePCC: ns2:OverridePCC, NextResultReference: ns2:NextResultReference[], FlightTimeTableCriteria: ns1:FlightTimeTableCriteria, TraceId: xsd:string, TokenId: xsd:string, AuthorizedBy: xsd:string, TargetBranch: ns2:typeBranchCode, OverrideLogging: ns2:typeLoggingLevel, LanguageCode: xsd:language, RetrieveProviderReservationDetails: xsd:boolean)
     ns1:FlightTimeTableRsp(ResponseMessage: ns2:ResponseMessage[], NextResultReference: ns2:NextResultReference[], FlightTimeTableList: {FlightTimeDetail: ns1:FlightTimeDetail[]}, TraceId: xsd:string, TransactionId: xsd:string, ResponseTime: xsd:integer, CommandHistory: xsd:string)
     ns1:FlightType(RequireSingleCarrier: xsd:boolean, MaxConnections: ns1:MaxConnections, MaxStops: ns1:MaxStops, NonStopDirects: xsd:boolean, StopDirects: xsd:boolean, SingleOnlineCon: xsd:boolean, DoubleOnlineCon: xsd:boolean, TripleOnlineCon: xsd:boolean, SingleInterlineCon: xsd:boolean, DoubleInterlineCon: xsd:boolean, TripleInterlineCon: xsd:boolean)
     ns1:GeneralTimeTable(DaysOfOperation: ns1:typeDaysOfOperation, FlightOrigin: ns2:typeLocation, FlightDestination: ns2:typeLocation, CarrierList: ns1:CarrierList, StartDate: xsd:string, EndDate: xsd:string, StartTime: xsd:time, EndTime: xsd:time, IncludeConnection: xsd:boolean)
     ns1:GroupedOption(OptionalServiceRef: ns2:typeRef)
     ns1:GroupedOptionInfo(({GroupedOption: ns1:GroupedOption[]}))
     ns1:HostReservation(Carrier: ns2:typeCarrier, CarrierLocatorCode: ns2:typeLocatorCode, ProviderCode: ns2:typeProviderCode, ProviderLocatorCode: ns2:typeProviderLocatorCode, UniversalLocatorCode: ns2:typeLocatorCode, ETicket: xsd:boolean)
     ns1:HostTokenList(HostToken: ns2:HostToken[])
     ns1:ImageLocation(xsd:string, Type: xsd:string, ImageWidth: xsd:nonNegativeInteger, ImageHeight: xsd:nonNegativeInteger)
     ns1:InFlightServices(xsd:string)
     ns1:IncludeAddlBookingCodeInfo(Type: ns1:typeCarrierCode, SecondaryCarrier: ns2:typeCarrier)
     ns1:IssuanceModifiers(({FormOfPaymentRef: ns2:FormOfPaymentRef} | {FormOfPayment: ns2:FormOfPayment}), CustomerReceiptInfo: ns1:CustomerReceiptInfo, EMDEndorsement: ns1:EMDEndorsement, EMDCommission: ns1:EMDCommission, PlatingCarrier: ns2:typeCarrier)
     ns1:Itinerary(Type: ns1:typeItinerary, Option: ns1:typeItineraryOption, SeparateIndicator: xsd:boolean)
     ns1:Journey(AirSegmentRef: ns1:AirSegmentRef[], TravelTime: xsd:duration)
     ns1:JourneyData(AirSegment: ns1:typeBaseAirSegment[])
     ns1:LandCharges(Tax: ns1:Tax[], Base: ns2:typeMoney, Total: ns2:typeMoney, Miscellaneous: ns2:typeMoney, PrePaid: ns2:typeMoney, Deposit: ns2:typeMoney)
     ns1:LanguageOption(Language: ns2:typeLanguage, Country: ns2:typeCountry)
     ns1:Leg(LegDetail: ns1:LegDetail[], Key: ns2:typeRef, Group: xsd:int, Origin: ns2:typeRailLocationCode, Destination: ns2:typeRailLocationCode)
     ns1:LegDetail(Key: ns2:typeRef, OriginAirport: ns2:typeIATACode, DestinationAirport: ns2:typeIATACode, Carrier: ns2:typeCarrier, TravelDate: xsd:string, FlightNumber: ns2:typeFlightNumber)
     ns1:LegPrice(LegDetail: ns1:LegDetail[], Key: ns2:typeRef, TotalPrice: ns2:typeMoney, ApproximateTotalPrice: ns2:typeMoney)
     ns1:LegRef(Key: ns2:typeRef)
     ns1:LowFareSearchAsynchReq(BillingPointOfSaleInfo: ns2:BillingPointOfSaleInfo, AgentIDOverride: ns2:AgentIDOverride[], TerminalSessionInfo: xsd:string, NextResultReference: ns2:NextResultReference[], ({SearchAirLeg: ns1:SearchAirLeg[]} | {SearchSpecificAirSegment: ns1:SearchSpecificAirSegment[]}), AirSearchModifiers: ns1:AirSearchModifiers, SplitTicketingSearch: ns1:SplitTicketingSearch, JourneyData: ns1:JourneyData, SearchPassenger: ns2:SearchPassenger[], AirPricingModifiers: ns1:AirPricingModifiers, Enumeration: ns1:Enumeration, AirExchangeModifiers: ns1:AirExchangeModifiers, FlexExploreModifiers: ns1:FlexExploreModifiers, PCC: ns1:PCC, FareRulesFilterCategory: ns1:FareRulesFilterCategory, FormOfPayment: ns2:FormOfPayment[], AirSearchAsynchModifiers: ns1:AirSearchAsynchModifiers, TraceId: xsd:string, TokenId: xsd:string, AuthorizedBy: xsd:string, TargetBranch: ns2:typeBranchCode, OverrideLogging: ns2:typeLoggingLevel, LanguageCode: xsd:language, EnablePointToPointSearch: xsd:boolean, EnablePointToPointAlternates: xsd:boolean, MaxNumberOfExpertSolutions: xsd:integer, SolutionResult: xsd:boolean, PreferCompleteItinerary: xsd:boolean, MetaOptionIdentifier: ns1:MetaOptionIdentifier, ReturnUpsellFare: xsd:boolean, IncludeFareInfoMessages: xsd:boolean, ReturnBrandedFares: xsd:boolean, MultiGDSSearch: xsd:boolean, ReturnMM: xsd:boolean, CheckOBFees: xsd:string, NSCC: ns1:NSCC)
     ns1:LowFareSearchAsynchRsp(ResponseMessage: ns2:ResponseMessage[], NextResultReference: ns2:NextResultReference[], FlightDetailsList: ns1:FlightDetailsList, AirSegmentList: ns1:AirSegmentList, FareInfoList: ns1:FareInfoList, FareRemarkList: ns1:FareRemarkList, AirItinerarySolution: ns1:AirItinerarySolution[], HostTokenList: ns1:HostTokenList, APISRequirementsList: ns1:APISRequirementsList, FareNoteList: ns1:FareNoteList, ExpertSolutionList: ns1:ExpertSolutionList, RouteList: ns1:RouteList, AlternateRouteList: ns1:AlternateRouteList, AlternateLocationDistanceList: ns1:AlternateLocationDistanceList, FareInfoMessage: ns1:FareInfoMessage[], ({AirPricingSolution: ns1:AirPricingSolution[]} | {AirPricePointList: ns1:AirPricePointList}), RailSegmentList: ns3:RailSegmentList, RailJourneyList: ns3:RailJourneyList, RailFareNoteList: ns3:RailFareNoteList, RailFareIDList: ns3:RailFareIDList, RailFareList: ns3:RailFareList, RailPricingSolution: ns3:RailPricingSolution[], AsyncProviderSpecificResponse: ns2:BaseAsyncProviderSpecificResponse[], BrandList: ns1:BrandList, TraceId: xsd:string, TransactionId: xsd:string, ResponseTime: xsd:integer, CommandHistory: xsd:string, DistanceUnits: ns2:typeDistance, SearchId: ns1:typeLowFareSearchId, CurrencyType: ns2:typeCurrency)
     ns1:LowFareSearchReq(BillingPointOfSaleInfo: ns2:BillingPointOfSaleInfo, AgentIDOverride: ns2:AgentIDOverride[], TerminalSessionInfo: xsd:string, NextResultReference: ns2:NextResultReference[], ({SearchAirLeg: ns1:SearchAirLeg[]} | {SearchSpecificAirSegment: ns1:SearchSpecificAirSegment[]}), AirSearchModifiers: ns1:AirSearchModifiers, SplitTicketingSearch: ns1:SplitTicketingSearch, JourneyData: ns1:JourneyData, SearchPassenger: ns2:SearchPassenger[], AirPricingModifiers: ns1:AirPricingModifiers, Enumeration: ns1:Enumeration, AirExchangeModifiers: ns1:AirExchangeModifiers, FlexExploreModifiers: ns1:FlexExploreModifiers, PCC: ns1:PCC, FareRulesFilterCategory: ns1:FareRulesFilterCategory, FormOfPayment: ns2:FormOfPayment[], TraceId: xsd:string, TokenId: xsd:string, AuthorizedBy: xsd:string, TargetBranch: ns2:typeBranchCode, OverrideLogging: ns2:typeLoggingLevel, LanguageCode: xsd:language, EnablePointToPointSearch: xsd:boolean, EnablePointToPointAlternates: xsd:boolean, MaxNumberOfExpertSolutions: xsd:integer, SolutionResult: xsd:boolean, PreferCompleteItinerary: xsd:boolean, MetaOptionIdentifier: ns1:MetaOptionIdentifier, ReturnUpsellFare: xsd:boolean, IncludeFareInfoMessages: xsd:boolean, ReturnBrandedFares: xsd:boolean, MultiGDSSearch: xsd:boolean, ReturnMM: xsd:boolean, CheckOBFees: xsd:string, NSCC: ns1:NSCC, PolicyReference: ns2:typePolicyReference)
     ns1:LowFareSearchRsp(ResponseMessage: ns2:ResponseMessage[], NextResultReference: ns2:NextResultReference[], FlightDetailsList: ns1:FlightDetailsList, AirSegmentList: ns1:AirSegmentList, FareInfoList: ns1:FareInfoList, FareRemarkList: ns1:FareRemarkList, AirItinerarySolution: ns1:AirItinerarySolution[], HostTokenList: ns1:HostTokenList, APISRequirementsList: ns1:APISRequirementsList, FareNoteList: ns1:FareNoteList, ExpertSolutionList: ns1:ExpertSolutionList, RouteList: ns1:RouteList, AlternateRouteList: ns1:AlternateRouteList, AlternateLocationDistanceList: ns1:AlternateLocationDistanceList, FareInfoMessage: ns1:FareInfoMessage[], ({AirPricingSolution: ns1:AirPricingSolution[]} | {AirPricePointList: ns1:AirPricePointList}), RailSegmentList: ns3:RailSegmentList, RailJourneyList: ns3:RailJourneyList, RailFareNoteList: ns3:RailFareNoteList, RailFareIDList: ns3:RailFareIDList, RailFareList: ns3:RailFareList, RailPricingSolution: ns3:RailPricingSolution[], BrandList: ns1:BrandList, TraceId: xsd:string, TransactionId: xsd:string, ResponseTime: xsd:integer, CommandHistory: xsd:string, DistanceUnits: ns2:typeDistance, CurrencyType: ns2:typeCurrency)
     ns1:LoyaltyCardDetails(SupplierCode: ns2:typeCarrier, PriorityCode: ns2:typePriorityCode)
     ns1:ManualFareAdjustment(AppliedOn: ns2:typeAdjustmentTarget, AdjustmentType: ns2:typeAdjustmentType, Value: xsd:decimal, PassengerRef: ns2:typeRef, TicketDesignator: ns1:typeTicketDesignator, FareType: ns1:typeFareTypeCode)
     ns1:Meals(ns1:typeMealService)
     ns1:MerchandisingAvailabilityDetails(AirItineraryDetails: ns1:AirItineraryDetails, AccountCode: ns2:AccountCode)
     ns1:MerchandisingDetails(AirItineraryDetails: ns1:AirItineraryDetails[], AccountCode: ns2:AccountCode[])
     ns1:MerchandisingPricingModifiers(AccountCode: ns2:AccountCode[])
     ns1:MultiGDSSearchIndicator(Type: xsd:string, ProviderCode: ns2:typeProviderCode, DefaultProvider: xsd:boolean, PrivateFareCode: xsd:string, PrivateFareCodeOnly: xsd:boolean)
     ns1:OfferAvailabilityModifiers(ServiceType: ns2:typeMerchandisingService[], Carrier: ns2:typeCarrier[], CurrencyType: ns2:typeCurrency)
     ns1:Option(BookingInfo: ns1:BookingInfo[], Connection: ns1:Connection[], Key: ns2:typeRef, TravelTime: xsd:duration)
     ns1:OptionalService(ServiceData: ns2:ServiceData[], ServiceInfo: ns2:ServiceInfo, Remark: ns2:Remark[], TaxInfo: ns2:typeTaxInfo[], FeeInfo: ns2:typeFeeInfo[], EMD: ns1:EMD, BundledServices: ns1:BundledServices, AdditionalInfo: ns1:AdditionalInfo[], FeeApplication: ns1:FeeApplication, Text: ns1:typeTextElement[], PriceRange: ns1:PriceRange[], TourCode: ns1:TourCode, BrandingInfo: ns1:BrandingInfo, Title: ns1:typeTextElement[], ProviderCode: ns2:typeProviderCode, SupplierCode: ns2:typeSupplierCode, OptionalServicesRuleRef: ns2:typeRef, Type: ns2:typeMerchandisingService, Confirmation: xsd:string, SecondaryType: xsd:string, PurchaseWindow: ns2:typePurchaseWindow, Priority: xsd:integer, Available: xsd:boolean, Entitled: xsd:boolean, PerTraveler: xsd:boolean, CreateDate: xsd:dateTime, PaymentRef: ns2:typeRef, ServiceStatus: xsd:string, Quantity: xsd:integer, SequenceNumber: xsd:integer, ServiceSubCode: ns1:ServiceSubCode, SSRCode: ns2:typeSSRCode, IssuanceReason: ns1:IssuanceReason, ProviderDefinedType: ns1:ProviderDefinedType, TotalPrice: ns2:typeMoney, BasePrice: ns2:typeMoney, ApproximateTotalPrice: ns2:typeMoney, ApproximateBasePrice: ns2:typeMoney, EquivalentBasePrice: ns2:typeMoney, Taxes: ns2:typeMoney, Fees: ns2:typeMoney, Services: ns2:typeMoney, ApproximateTaxes: ns2:typeMoney, ApproximateFees: ns2:typeMoney, Key: ns2:typeRef, AssessIndicator: ns1:typeAssessIndicator, Mileage: xsd:integer, ApplicableFFLevel: ns1:ApplicableFFLevel, Private: xsd:boolean, SSRFreeText: ns2:typeSSRFreeText, IsPricingApproximate: xsd:boolean, ElStat: ns2:typeElementStatus, KeyOverride: xsd:boolean, Chargeable: xsd:string, InclusiveOfTax: xsd:boolean, InterlineSettlementAllowed: xsd:boolean, GeographySpecification: xsd:string, ExcessWeightRate: xsd:string, Source: xsd:string, ViewableOnly: xsd:boolean, DisplayText: xsd:string, WeightInExcess: xsd:string, TotalWeight: xsd:string, BaggageUnitPrice: ns2:typeMoney, FirstPiece: xsd:int, LastPiece: xsd:int, Restricted: xsd:boolean, IsRepriceRequired: xsd:boolean, BookedQuantity: xsd:string, Group: xsd:string, PseudoCityCode: ns2:typePCC, Tag: ns1:Tag, DisplayOrder: ns1:DisplayOrder)
     ns1:OptionalServiceModifier(Type: ns2:typeMerchandisingService, SecondaryType: ns2:typeMerchandisingService, SupplierCode: ns2:typeSupplierCode, ServiceSubCode: xsd:string, TravelDate: xsd:date, Description: xsd:string)
     ns1:OptionalServiceModifiers(OptionalServiceModifier: ns1:OptionalServiceModifier[])
     ns1:OptionalServiceRef(ns2:typeRef)
     ns1:OptionalServices(OptionalServicesTotal: {TaxInfo: ns2:typeTaxInfo[], FeeInfo: ns2:typeFeeInfo[], TotalPrice: ns2:typeMoney, BasePrice: ns2:typeMoney, ApproximateTotalPrice: ns2:typeMoney, ApproximateBasePrice: ns2:typeMoney, EquivalentBasePrice: ns2:typeMoney, Taxes: ns2:typeMoney, Fees: ns2:typeMoney, Services: ns2:typeMoney, ApproximateTaxes: ns2:typeMoney, ApproximateFees: ns2:typeMoney}, OptionalService: ns1:OptionalService[], GroupedOptionInfo: ns1:GroupedOptionInfo[], OptionalServiceRules: ns2:ServiceRuleType[])
     ns1:OptionalServicesInfo(AirPricingSolution: ns1:AirPricingSolution, FormOfPayment: ns2:FormOfPayment[], FormOfPaymentRef: ns2:FormOfPaymentRef[])
     ns1:OriginalItineraryDetails(ItineraryType: ns2:typeItineraryCode, BulkTicket: xsd:boolean, TicketingPCC: ns2:typePCC, TicketingIATA: ns2:typeIATA, TicketingCountry: ns2:typeCountry, TourCode: ns1:typeTourCode, TicketingDate: xsd:date)
     ns1:OverrideCode(ns1:OverrideCode)
     ns1:PCC(OverridePCC: ns2:OverridePCC, PointOfSale: ns2:PointOfSale[], TicketAgency: ns1:TicketAgency)
     ns1:PassengerDetails(LoyaltyCardDetails: ns1:LoyaltyCardDetails[], Key: ns2:typeRef, Code: ns2:typePTC, Age: xsd:integer)
     ns1:PassengerDetailsRef(Key: ns2:typeRef)
     ns1:PassengerReceiptOverride(ns2:typeNonBlanks)
     ns1:PassengerSeatPrice(BookingTravelerRef: ns2:typeRef, Amount: ns2:typeMoney)
     ns1:PassengerTicketNumber(TicketNumber: ns1:typePassengerTicketNumber, BookingTravelerRef: ns2:typeRef)
     ns1:PassengerType(Name: ns2:Name, LoyaltyCard: ns2:LoyaltyCard[], DiscountCard: ns2:DiscountCard[], PersonalGeography: ns2:PersonalGeography, FareGuaranteeInfo: ns1:FareGuaranteeInfo, Code: ns2:typePTC, Age: xsd:integer, DOB: xsd:date, Gender: ns2:typeGender, PricePTCOnly: xsd:boolean, BookingTravelerRef: xsd:string, AccompaniedPassenger: xsd:boolean, ResidencyType: ns2:typeResidency)
     ns1:PaymentRef(Key: ns2:typeRef)
     ns1:Penalty(Amount: ns2:typeMoney, PenaltyType: xsd:string)
     ns1:PenaltyFareInformation(PenaltyInfo: ns1:typeFarePenalty, ProhibitPenaltyFares: xsd:boolean)
     ns1:PenaltyInformation(xsd:string, Carrier: ns2:typeCarrier, FareBasis: xsd:string, FareComponent: xsd:integer, PriceableUnit: xsd:integer, BoardPoint: ns2:typeIATACode, OffPoint: ns2:typeIATACode, MinimumChangeFee: ns2:typeMoney, MaximumChangeFee: ns2:typeMoney, FiledCurrency: ns2:typeCurrency, ConversionRate: xsd:decimal, Refundable: xsd:boolean, ChangeFeeApplicationCode: ns1:ChangeFeeApplicationCode)
     ns1:PermittedCabins(CabinClass: ns2:CabinClass[])
     ns1:PermittedCarriers(Carrier: ns2:Carrier[])
     ns1:PersonName(First: ns2:StringLength1to64, Last: ns2:StringLength1to64, Prefix: ns2:StringLength1to16)
     ns1:PersonNameSearch(Last: ns2:StringLength1to64)
     ns1:PocketItineraryRemark(RemarkData: xsd:string, BookingTravelerRef: ns2:typeRef[], ProviderReservationInfoRef: ns2:typeRef, ProviderCode: ns2:typeProviderCode, Key: ns2:typeRef, ElStat: ns2:typeElementStatus, KeyOverride: xsd:boolean, SegmentRef: ns2:typeRef)
     ns1:PolicyCodesList(PolicyCode: ns2:typePolicyCode[])
     ns1:PrePayAccount(CreditSummary: ns1:CreditSummary, PrePayPriceInfo: ns1:PrePayPriceInfo, ProgramTitle: xsd:string, CertificateNumber: xsd:string, ProgramName: xsd:string, EffectiveDate: xsd:date, ExpireDate: xsd:date)
     ns1:PrePayCustomer(PersonName: ns1:PersonName, Email: ns2:Email[], Address: ns2:typeStructuredAddress[], RelatedTraveler: ns1:RelatedTraveler[], LoyaltyCard: ns2:LoyaltyCard[])
     ns1:PrePayId(CompanyName: ns1:CompanyName, Id: ns2:typeCardNumber, Type: xsd:string)
     ns1:PrePayPriceInfo(TaxInfo: ns2:typeTaxInfo[], BaseFare: ns2:typeMoney, TotalFare: ns2:typeMoney, TotalTax: ns2:typeMoney)
     ns1:PrePayProfileInfo(PrePayId: ns1:PrePayId, PrePayCustomer: ns1:PrePayCustomer, PrePayAccount: ns1:PrePayAccount, Affiliations: ns1:Affiliations, AccountRelatedRules: ns1:AccountRelatedRules, StatusCode: xsd:string, CreatorID: ns2:typeCardNumber)
     ns1:PreferredBookingCodes(BookingCode: ns1:BookingCode[])
     ns1:PreferredCabins(CabinClass: ns2:CabinClass)
     ns1:PreferredCarriers(Carrier: ns2:Carrier[])
     ns1:PriceRange(DefaultCurrency: xsd:boolean, StartPrice: ns2:typeMoney, EndPrice: ns2:typeMoney)
     ns1:PricingDetails(AdvisoryMessage: xsd:string[], EndorsementText: xsd:string[], WaiverText: xsd:string, LowFarePricing: xsd:boolean, LowFareFound: xsd:boolean, PenaltyApplies: xsd:boolean, DiscountApplies: xsd:boolean, ItineraryType: ns2:typeItineraryCode, ValidatingVendorCode: ns2:typeCarrier, ForTicketingOnDate: xsd:date, LastDateToTicket: xsd:date, FormOfRefund: ns2:typeFormOfRefund, AccountCode: xsd:string, BankersSellingRate: xsd:decimal, PricingType: ns2:typePricingType, ConversionRate: xsd:decimal, RateOfExchange: xsd:decimal, OriginalTicketCurrency: ns2:typeCurrency)
     ns1:PrintBlankFormItinerary(IncludeDescription: xsd:boolean, IncludeHeader: xsd:boolean)
     ns1:ProhibitedCabins(CabinClass: ns2:CabinClass[])
     ns1:ProhibitedCarriers(Carrier: ns2:Carrier[])
     ns1:PromoCode(Code: ns1:Code, ProviderCode: ns2:typeProviderCode, SupplierCode: ns2:typeSupplierCode)
     ns1:RailCoachDetails(RailCoachNumber: xsd:string, AvailableRailSeats: xsd:string, RailSeatMapAvailability: xsd:boolean)
     ns1:RefundFailureInfo(({TicketNumber: ns2:StringLength1to13, Name: ns2:Name} | {TCRNumber: ns1:typeTCRNumber}), BookingTravelerRef: ns2:typeRef[], Code: xsd:integer, Message: xsd:string)
     ns1:RelatedTraveler(LoyaltyCard: ns2:LoyaltyCard[], PersonName: ns1:PersonName, CreditsUsed: {UsedCredit: xsd:decimal, CurrencyCode: ns2:typeCurrency}, StatusCode: xsd:string, Relation: xsd:string)
     ns1:RepricingModifiers(PrivateFareOptions: ns1:PrivateFareOptions, FareType: ns1:FareType[], FareTicketDesignator: ns1:FareTicketDesignator, OverrideCurrency: {CurrencyCode: ns2:typeCurrency, CountryCode: ns2:typeCountry}, AirSegmentPricingModifiers: ns1:AirSegmentPricingModifiers[], WithholdTaxCode: ns1:WithholdTaxCode[], PriceClassOfService: ns2:typePriceClassOfService, CreateDate: xsd:date, ReissueLocCityCode: ns2:typeCity, ReissueLocCountryCode: ns2:typeCountry, BulkTicket: xsd:boolean, AccountCode: xsd:string, PenaltyAsTaxCode: ns1:PenaltyAsTaxCode, AirPricingSolutionRef: ns2:typeRef, PenaltyToFare: xsd:boolean, PricePTCOnly: xsd:boolean)
     ns1:Restriction(DaysOfWeekRestriction: {Mon: xsd:boolean, Tue: xsd:boolean, Wed: xsd:boolean, Thu: xsd:boolean, Fri: xsd:boolean, Sat: xsd:boolean, Sun: xsd:boolean, RestrictionExistsInd: xsd:boolean, Application: xsd:string, IncludeExcludeUseInd: xsd:boolean}[], RestrictionPassengerTypes: {MaxNbrTravelers: xsd:string, TotalNbrPTC: xsd:string}[])
     ns1:RetrieveLowFareSearchReq(BillingPointOfSaleInfo: ns2:BillingPointOfSaleInfo, AgentIDOverride: ns2:AgentIDOverride[], TerminalSessionInfo: xsd:string, OverridePCC: ns2:OverridePCC, TraceId: xsd:string, TokenId: xsd:string, AuthorizedBy: xsd:string, TargetBranch: ns2:typeBranchCode, OverrideLogging: ns2:typeLoggingLevel, LanguageCode: xsd:language, RetrieveProviderReservationDetails: xsd:boolean, SearchId: ns1:typeLowFareSearchId, ProviderCode: ns2:typeProviderCode)
     ns1:RetrieveLowFareSearchRsp(ResponseMessage: ns2:ResponseMessage[], NextResultReference: ns2:NextResultReference[], FlightDetailsList: ns1:FlightDetailsList, AirSegmentList: ns1:AirSegmentList, FareInfoList: ns1:FareInfoList, FareRemarkList: ns1:FareRemarkList, AirItinerarySolution: ns1:AirItinerarySolution[], HostTokenList: ns1:HostTokenList, APISRequirementsList: ns1:APISRequirementsList, FareNoteList: ns1:FareNoteList, ExpertSolutionList: ns1:ExpertSolutionList, RouteList: ns1:RouteList, AlternateRouteList: ns1:AlternateRouteList, AlternateLocationDistanceList: ns1:AlternateLocationDistanceList, FareInfoMessage: ns1:FareInfoMessage[], ({AirPricingSolution: ns1:AirPricingSolution[]} | {AirPricePointList: ns1:AirPricePointList}), RailSegmentList: ns3:RailSegmentList, RailJourneyList: ns3:RailJourneyList, RailFareNoteList: ns3:RailFareNoteList, RailFareIDList: ns3:RailFareIDList, RailFareList: ns3:RailFareList, RailPricingSolution: ns3:RailPricingSolution[], AsyncProviderSpecificResponse: ns2:BaseAsyncProviderSpecificResponse[], BrandList: ns1:BrandList, TraceId: xsd:string, TransactionId: xsd:string, ResponseTime: xsd:integer, CommandHistory: xsd:string, DistanceUnits: ns2:typeDistance, CurrencyType: ns2:typeCurrency)
     ns1:Route(Leg: ns1:Leg[], Key: ns2:typeRef)
     ns1:RouteList(Route: ns1:Route[])
     ns1:RoutingRules(Routing: {DirectionInfo: {LocationCode: ns2:typeIATACode, Direction: ns1:Direction}[], RoutingConstructedInd: xsd:boolean, Number: xsd:string, RoutingRestriction: xsd:string}[])
     ns1:Row(Facility: ns1:Facility[], Characteristic: ns1:Characteristic[], Number: xsd:integer, SearchTravelerRef: ns2:typeRef)
     ns1:Rows(Row: ns1:Row[], SegmentRef: ns2:typeRef)
     ns1:RuleAdvancedPurchase(ReservationLatestPeriod: xsd:string, ReservationLatestUnit: ns1:typeStayUnit, TicketingEarliestDate: xsd:string, TicketingLatestDate: xsd:string, MoreRulesPresent: xsd:boolean)
     ns1:RuleCharges(PenaltyType: xsd:string, DepartureStatus: xsd:string, Amount: ns2:typeMoney, Percent: xsd:decimal, MoreRulesPresent: xsd:boolean)
     ns1:RuleLengthOfStay(MinimumStay: ns1:typeRestrictionLengthOfStay, MaximumStay: ns1:typeRestrictionLengthOfStay)
     ns1:Rules(RulesText: xsd:string)
     ns1:ScheduleSearchReq(BillingPointOfSaleInfo: ns2:BillingPointOfSaleInfo, AgentIDOverride: ns2:AgentIDOverride[], TerminalSessionInfo: xsd:string, OverridePCC: ns2:OverridePCC, NextResultReference: ns2:NextResultReference[], PointOfCommencement: ns2:PointOfCommencement, ({SearchAirLeg: ns1:SearchAirLeg[]} | {SearchSpecificAirSegment: ns1:SearchSpecificAirSegment[]}), AirSearchModifiers: ns1:AirSearchModifiers, JourneyData: ns1:JourneyData, TraceId: xsd:string, TokenId: xsd:string, AuthorizedBy: xsd:string, TargetBranch: ns2:typeBranchCode, OverrideLogging: ns2:typeLoggingLevel, LanguageCode: xsd:language, RetrieveProviderReservationDetails: xsd:boolean)
     ns1:ScheduleSearchRsp(ResponseMessage: ns2:ResponseMessage[], NextResultReference: ns2:NextResultReference[], FlightDetailsList: ns1:FlightDetailsList, AirSegmentList: ns1:AirSegmentList, FareInfoList: ns1:FareInfoList, FareRemarkList: ns1:FareRemarkList, AirItinerarySolution: ns1:AirItinerarySolution[], HostTokenList: ns1:HostTokenList, APISRequirementsList: ns1:APISRequirementsList, FareNoteList: ns1:FareNoteList, ExpertSolutionList: ns1:ExpertSolutionList, RouteList: ns1:RouteList, AlternateRouteList: ns1:AlternateRouteList, AlternateLocationDistanceList: ns1:AlternateLocationDistanceList, FareInfoMessage: ns1:FareInfoMessage[], ({AirPricingSolution: ns1:AirPricingSolution[]} | {AirPricePointList: ns1:AirPricePointList}), RailSegmentList: ns3:RailSegmentList, RailJourneyList: ns3:RailJourneyList, RailFareNoteList: ns3:RailFareNoteList, RailFareIDList: ns3:RailFareIDList, RailFareList: ns3:RailFareList, RailPricingSolution: ns3:RailPricingSolution[], TraceId: xsd:string, TransactionId: xsd:string, ResponseTime: xsd:integer, CommandHistory: xsd:string, DistanceUnits: ns2:typeDistance)
     ns1:SearchAirLeg(SearchOrigin: ns2:typeSearchLocation[], SearchDestination: ns2:typeSearchLocation[], ({SearchDepTime: ns2:typeFlexibleTimeSpec[]} | {SearchArvTime: ns2:typeTimeSpec[]}), AirLegModifiers: ns1:AirLegModifiers)
     ns1:SearchSpecificAirSegment(DepartureTime: xsd:string, Carrier: ns2:typeCarrier, FlightNumber: ns2:typeFlightNumber, Origin: ns2:typeIATACode, Destination: ns2:typeIATACode, SegmentIndex: xsd:int)
     ns1:SearchTraveler(Name: ns2:Name, LoyaltyCard: ns2:LoyaltyCard[], DiscountCard: ns2:DiscountCard[], PersonalGeography: ns2:PersonalGeography, AirSeatAssignment: ns2:AirSeatAssignment[], Code: ns2:typePTC, Age: xsd:integer, DOB: xsd:date, Gender: ns2:typeGender, PricePTCOnly: xsd:boolean, BookingTravelerRef: xsd:string, AccompaniedPassenger: xsd:boolean, ResidencyType: ns2:typeResidency, Key: ns2:typeRef)
     ns1:SeatInformation(Power: xsd:string, Video: xsd:string, Type: xsd:string, Description: xsd:string, Rating: {xsd:string, Number: xsd:integer}, Key: ns2:typeRef)
     ns1:SeatMapReq(BillingPointOfSaleInfo: ns2:BillingPointOfSaleInfo, AgentIDOverride: ns2:AgentIDOverride[], TerminalSessionInfo: xsd:string, OverridePCC: ns2:OverridePCC, AgencySellInfo: ns2:AgencySellInfo, AirSegment: ns1:typeBaseAirSegment[], HostToken: ns2:HostToken[], SearchTraveler: ns1:SearchTraveler[], HostReservation: ns1:HostReservation, MerchandisingPricingModifiers: ns1:MerchandisingPricingModifiers, TraceId: xsd:string, TokenId: xsd:string, AuthorizedBy: xsd:string, TargetBranch: ns2:typeBranchCode, OverrideLogging: ns2:typeLoggingLevel, LanguageCode: xsd:language, RetrieveProviderReservationDetails: xsd:boolean, ReturnSeatPricing: xsd:boolean, ReturnBrandingInfo: xsd:boolean)
     ns1:SeatMapRsp(ResponseMessage: ns2:ResponseMessage[], HostToken: ns2:HostToken[], CabinClass: ns2:CabinClass, AirSegment: ns1:typeBaseAirSegment[], SearchTraveler: ns1:SearchTraveler[], OptionalServices: ns1:OptionalServices, Remark: ns2:Remark, Rows: ns1:Rows[], PaymentRestriction: ns2:PaymentRestriction[], SeatInformation: ns1:SeatInformation[], Copyright: xsd:string, TraceId: xsd:string, TransactionId: xsd:string, ResponseTime: xsd:integer, CommandHistory: xsd:string, GroupSeatPrice: ns2:typeMoney)
     ns1:SegmentIndex(xsd:int)
     ns1:SegmentModifiers(AirSegmentRef: ns1:AirSegmentRef, TicketValidity: ns1:TicketValidity, BaggageAllowance: ns1:BaggageAllowance, TicketDesignator: ns1:typeTicketDesignator)
     ns1:SegmentSelect(AirSegmentRef: ns1:typeSegmentRef[], HotelReservationRef: ns1:typeNonAirReservationRef[], VehicleReservationRef: ns1:typeNonAirReservationRef[], PassiveSegmentRef: ns1:typeSegmentRef[], AllConfirmedAir: xsd:boolean, AllWaitlistedAir: xsd:boolean, AllHotel: xsd:boolean, AllVehicle: xsd:boolean, AllPassive: xsd:boolean)
     ns1:SelectionModifiers(AirSegmentRef: ns1:AirSegmentRef[], SupplierCode: ns2:typeCarrier, RFIC: ns1:RFIC)
     ns1:ServiceAssociations(ApplicableSegment: {({ResponseMessage: ns2:ResponseMessage} | {OptionalServiceRef: ns2:typeRef}), Key: ns2:typeRef}[])
     ns1:ServiceGroup(ServiceSubGroup: ns1:ServiceSubGroup[], Code: xsd:string)
     ns1:ServiceSubGroup(Code: xsd:string)
     ns1:SolutionGroup(PermittedAccountCodes: {AccountCode: ns2:AccountCode[]}, PreferredAccountCodes: {AccountCode: ns2:AccountCode[]}, ProhibitedAccountCodes: {AccountCode: ns2:AccountCode[]}, PermittedPointOfSales: {PointOfSale: ns2:PointOfSale[]}, ProhibitedPointOfSales: {PointOfSale: ns2:PointOfSale[]}, Count: xsd:integer, TripType: ns1:typeTripType, Diversification: ns1:typeDiversity, Tag: ns1:Tag, Primary: xsd:boolean)
     ns1:SpecificSeatAssignment(BookingTravelerRef: ns2:typeRef, SegmentRef: ns2:typeRef, FlightDetailRef: ns2:typeRef, SeatId: xsd:string, RailCoachNumber: ns1:RailCoachNumber)
     ns1:SpecificTimeTable(FlightOrigin: {Airport: ns2:Airport}, FlightDestination: {Airport: ns2:Airport}, StartDate: xsd:string, Carrier: ns2:typeCarrier, FlightNumber: ns2:typeFlightNumber)
     ns1:SplitTicketingSearch(RoundTrip: xsd:integer)
     ns1:SponsoredFltInfo(SponsoredLNB: xsd:nonNegativeInteger, NeutralLNB: xsd:nonNegativeInteger, FltKey: ns1:FltKey)
     ns1:TCR(FormOfPayment: ns2:FormOfPayment[], Payment: ns2:Payment[], BookingTraveler: ns2:BookingTraveler[], PassengerTicketNumber: ns1:PassengerTicketNumber[], AirPricingInfo: ns1:AirPricingInfo[], AgencyInfo: ns2:AgencyInfo, AirReservationLocatorCode: ns1:AirReservationLocatorCode, SupplierLocator: ns2:SupplierLocator[], RefundRemark: ns2:RefundRemark[], TCRNumber: ns1:typeTCRNumber, Status: ns1:typeTCRStatus, ModifiedDate: xsd:string, ConfirmedDate: xsd:string, BasePrice: ns2:typeMoney, Taxes: ns2:typeMoney, Fees: ns2:typeMoney, Refundable: xsd:boolean, Exchangeable: xsd:boolean, Voidable: xsd:boolean, Modifiable: xsd:boolean, ProviderCode: ns2:typeProviderCode, ProviderLocatorCode: ns2:typeProviderLocatorCode, RefundAccessCode: ns1:RefundAccessCode, RefundAmount: ns2:typeMoney, RefundFee: ns2:typeMoney, ForfeitAmount: ns2:typeMoney)
     ns1:TCRExchangeBundle(AirExchangeInfo: ns2:AirExchangeInfo, AirPricingInfoRef: ns1:AirPricingInfoRef[], FeeInfo: ns2:typeFeeInfo[], TaxInfo: ns2:typeTaxInfo[], Penalty: ns2:Penalty[], TCRNumber: ns1:typeTCRNumber)
     ns1:TCRInfo(Status: ns1:typeTCRStatus, Date: xsd:dateTime, TCRNumber: ns1:typeTCRNumber, ProviderReservationInfoRef: ns2:typeRef)
     ns1:TCRRefundBundle(AirRefundInfo: ns1:AirRefundInfo, WaiverCode: ns1:WaiverCode, AirSegment: ns1:typeBaseAirSegment[], FeeInfo: ns2:typeFeeInfo[], TaxInfo: ns2:typeTaxInfo[], HostToken: ns2:HostToken[], TCRNumber: ns1:typeTCRNumber, RefundType: ns1:RefundType, RefundAccessCode: ns1:RefundAccessCode)
     ns1:Tax(Category: xsd:string, Amount: ns2:typeMoney)
     ns1:TaxInfo(ns2:typeTaxInfo)
     ns1:TermConditions(LanguageOption: ns1:LanguageOption[], IncludeTermConditions: xsd:boolean)
     ns1:Text(ns1:typeTextElement)
     ns1:TextInfo(Text: ns2:typeGeneralText[], Title: xsd:string)
     ns1:Ticket(Coupon: ns1:Coupon[], TicketEndorsement: ns1:TicketEndorsement[], TourCode: ns1:TourCode[], ExchangedTicketInfo: ns1:ExchangedTicketInfo[], Key: ns2:typeRef, TicketNumber: ns2:typeTicketNumber, TicketStatus: ns2:typeTicketStatus, ElStat: ns2:typeElementStatus, KeyOverride: xsd:boolean)
     ns1:TicketAgency(ProviderCode: xsd:anyType, PseudoCityCode: xsd:anyType)
     ns1:TicketDesignator(Value: ns1:typeTicketDesignator)
     ns1:TicketEndorsement(Value: ns2:typeEndorsement)
     ns1:TicketFailureInfo(AirPricingInfoRef: ns1:AirPricingInfoRef[], Name: ns2:Name, Code: xsd:integer, Message: xsd:string, BookingTravelerRef: ns2:typeRef)
     ns1:TicketInfo(Name: ns2:Name, ConjunctedTicketInfo: ns1:ConjunctedTicketInfo[], ExchangedTicketInfo: ns1:ExchangedTicketInfo[], Number: xsd:string, Status: ns2:typeTicketStatus, BulkTicket: xsd:boolean, BookingTravelerRef: ns2:typeRef, AirPricingInfoRef: ns2:typeRef)
     ns1:TicketValidity(NotValidBefore: xsd:date, NotValidAfter: xsd:date)
     ns1:TicketingModifiers(BookingTravelerRef: ns2:typeRef[], NetRemit: ns1:typeTicketModifierAmountType, NetFare: ns1:typeTicketModifierAmountType, ActualSellingFare: ns1:typeTicketModifierAmountType, InvoiceFare: ns1:typeTicketModifierAccountingType, CorporateDiscount: ns1:typeTicketModifierAccountingType, AccountingInfo: ns1:typeTicketModifierAccountingType, BulkTicket: {ns1:typeBulkTicketModifierType, SuppressOnFareCalc: xsd:boolean, NonRefundable: xsd:boolean}, GroupTour: ns1:typeBulkTicketModifierType, Commission: ns2:Commission, TourCode: ns1:TourCode, TicketEndorsement: ns1:TicketEndorsement[], ValueModifier: ns1:typeTicketModifierValueType, DocumentSelect: ns1:DocumentSelect, DocumentOptions: ns1:DocumentOptions, SegmentSelect: ns1:SegmentSelect, SegmentModifiers: ns1:SegmentModifiers[], SupplierLocator: ns2:SupplierLocator, DestinationPurposeCode: ns1:DestinationPurposeCode, LanguageOption: ns1:LanguageOption[], LandCharges: ns1:LandCharges, PrintBlankFormItinerary: ns1:PrintBlankFormItinerary, ExcludeTicketing: ns1:ExcludeTicketing, ExemptOBFee: ns1:ExemptOBFee, PlatingCarrier: ns2:typeCarrier, ExemptVAT: xsd:boolean, NetRemitApplied: xsd:boolean, FreeTicket: xsd:boolean, CurrencyOverrideCode: ns1:CurrencyOverrideCode, Key: ns2:typeRef, ElStat: ns2:typeElementStatus, KeyOverride: xsd:boolean)
     ns1:TicketingModifiersRef(Key: ns2:typeRef)
     ns1:Title(ns1:typeTextElement)
     ns1:TourCode(Value: ns1:typeTourCode)
     ns1:TravelArranger(xsd:string, CompanyShortName: xsd:string, Code: xsd:string)
     ns1:URL(xsd:string, Type: xsd:string)
     ns1:URLInfo(Text: ns2:typeGeneralText[], URL: xsd:anyURI[])
     ns1:UpsellBrand(FareBasis: xsd:string, FareInfoRef: xsd:string)
     ns1:Variance(Type: ns1:typeVarianceType, Time: xsd:string, Indicator: ns1:typeVarianceIndicator, Reason: xsd:string)
     ns1:VoidDocumentInfo(DocumentNumber: ns2:StringLength1to13, DocumentType: ns2:DocumentType)
     ns1:VoidFailureInfo(xsd:string, TicketNumber: xsd:string, Code: xsd:integer)
     ns1:VoidResultInfo(FailureRemark: xsd:string, DocumentNumber: ns2:StringLength1to13, DocumentType: ns2:DocumentType, ResultType: xsd:string)
     ns1:WaiverCode(TourCode: ns1:typeTourCode, TicketDesignator: ns1:typeTicketDesignator, Endorsement: ns1:Endorsement)
     ns1:Yield(Amount: ns2:typeMoney, BookingTravelerRef: ns2:typeRef)
     ns2:APIProvider(TransactionType: ns2:TransactionType, AvailablePseudoCityCode: {PseudoCityCode: ns2:typePCC}[], ProviderCode: ns2:typeProviderCode, SupplierCode: ns2:typeSupplierCode, IATACode: ns2:typeIATA)
     ns2:AccountCode(Code: ns2:Code, ProviderCode: ns2:typeProviderCode, SupplierCode: ns2:typeSupplierCode, Type: xsd:string)
     ns2:AccountInformation(Address: ns2:typeStructuredAddress, PhoneNumber: ns2:PhoneNumber[], AccountName: xsd:string)
     ns2:AccountingRemark(RemarkData: xsd:string, BookingTravelerRef: ns2:typeRef[], Key: ns2:typeRef, Category: ns2:Category, TypeInGds: ns2:typeGdsAccountingRemark, ProviderReservationInfoRef: ns2:typeRef, ProviderCode: ns2:typeProviderCode, UseProviderNativeMode: xsd:boolean, ElStat: ns2:typeElementStatus, KeyOverride: xsd:boolean)
     ns2:ActionStatus(Remark: ns2:Remark, Type: ns2:Type, TicketDate: xsd:string, Key: ns2:typeRef, ProviderReservationInfoRef: ns2:typeRef, QueueCategory: ns2:typeNonBlanks, AirportCode: ns2:typeAirport, ProviderCode: ns2:typeProviderCode, SupplierCode: ns2:typeSupplierCode, PseudoCityCode: ns2:typePCC, AccountCode: xsd:string, ElStat: ns2:typeElementStatus, KeyOverride: xsd:boolean)
     ns2:AddressRestriction(RequiredField: ns2:RequiredField[])
     ns2:AgencyContactInfo(PhoneNumber: ns2:PhoneNumber[], Key: ns2:typeRef)
     ns2:AgencyInfo(AgentAction: ns2:AgentAction[])
     ns2:AgencyInformation(Address: ns2:typeStructuredAddress, Email: ns2:Email[], PhoneNumber: ns2:PhoneNumber[])
     ns2:AgencyPayment(ns2:typeAgencyPayment)
     ns2:AgencySellInfo(IataCode: ns2:typeIATA, Country: ns2:typeCountry, CurrencyCode: ns2:typeCurrency, ProviderCode: ns2:typeProviderCode, PseudoCityCode: ns2:typePCC, CityCode: ns2:typeIATACode)
     ns2:AgentAction(ActionType: ns2:ActionType, AgentCode: xsd:string, BranchCode: ns2:typeBranchCode, AgencyCode: xsd:string, AgentSine: xsd:string, EventTime: xsd:dateTime, AgentOverride: ns2:AgentOverride)
     ns2:AgentIDOverride(SupplierCode: ns2:typeSupplierCode, ProviderCode: ns2:typeProviderCode, AgentID: ns2:AgentID)
     ns2:AgentVoucher(Number: xsd:string)
     ns2:AirExchangeInfo(TotalPenaltyTaxInfo: {PenaltyTaxInfo: ns2:typeTax[], TotalPenaltyTax: ns2:typeMoney}, PaidTax: ns2:typeTax[], TicketFeeInfo: {Base: ns2:typeMoney, Tax: ns2:typeMoney, Total: ns2:typeMoney}[], Reason: xsd:string[], FeeInfo: ns2:typeFeeInfo[], TaxInfo: ns2:typeTaxInfo[], ExchangeAmount: ns2:typeMoney, BaseFare: ns2:typeMoney, EquivalentBaseFare: ns2:typeMoney, Taxes: ns2:typeMoney, ChangeFee: ns2:typeMoney, ForfeitAmount: ns2:typeMoney, Refundable: xsd:boolean, Exchangeable: xsd:boolean, FirstClassUpgrade: xsd:boolean, TicketByDate: xsd:string, PricingTag: xsd:string, EquivalentChangeFee: ns2:typeMoney, EquivalentExchangeAmount: ns2:typeMoney, AddCollection: ns2:typeMoney, ResidualValue: ns2:typeMoney, TotalResidualValue: ns2:typeMoney, OriginalFlightValue: ns2:typeMoney, FlownSegmentValue: ns2:typeMoney, BulkTicketAdvisory: xsd:boolean, FarePull: ns2:typeFarePull, Refund: ns2:typeMoney)
     ns2:AirSearchParameters(NoAdvancePurchase: xsd:boolean, RefundableFares: xsd:boolean, NonPenaltyFares: xsd:boolean, UnRestrictedFares: xsd:boolean)
     ns2:AirSeatAssignment(ns2:SeatAssignment, Key: ns2:typeRef, Status: ns2:typeStatusCode, Seat: xsd:string, SeatTypeCode: ns2:typeSeatTypeCode, SegmentRef: ns2:typeRef, FlightDetailsRef: ns2:typeRef, ElStat: ns2:typeElementStatus, KeyOverride: xsd:boolean, RailCoachNumber: xsd:string)
     ns2:Airport(ns2:Location, Code: ns2:typeIATACode)
     ns2:AppliedProfile(Key: ns2:typeRef, TravelerID: xsd:string, TravelerName: xsd:string, AccountID: xsd:string, AccountName: xsd:string, ImmediateParentID: xsd:string, ImmediateParentName: xsd:string, ElStat: ns2:typeElementStatus, KeyOverride: xsd:boolean)
     ns2:Auxdata(Entry: {Reason: xsd:string, Description: xsd:string}[])
     ns2:BillingPointOfSaleInfo(OriginApplication: xsd:string, CIDBNumber: ns2:CIDBNumber)
     ns2:BookingDates(CheckInDate: ns2:typeDate, CheckOutDate: ns2:typeDate)
     ns2:BookingSource(Code: ns2:Code, Type: ns2:Type)
     ns2:BookingTraveler(BookingTravelerName: ns2:BookingTravelerName, DeliveryInfo: ns2:DeliveryInfo[], PhoneNumber: ns2:PhoneNumber[], Email: ns2:Email[], LoyaltyCard: ns2:LoyaltyCard[], DiscountCard: ns2:DiscountCard[], SSR: ns2:SSR[], NameRemark: ns2:NameRemark[], AirSeatAssignment: ns2:AirSeatAssignment[], RailSeatAssignment: ns2:RailSeatAssignment[], EmergencyInfo: xsd:string, Address: ns2:typeStructuredAddress[], DriversLicense: ns2:DriversLicense[], AppliedProfile: ns2:AppliedProfile[], CustomizedNameData: ns2:CustomizedNameData[], TravelComplianceData: ns2:TravelComplianceData[], TravelInfo: ns2:TravelInfo, Key: ns2:typeRef, TravelerType: ns2:typePTC, Age: xsd:integer, VIP: xsd:boolean, DOB: xsd:date, Gender: ns2:typeGender, Nationality: ns2:typeCountry, ElStat: ns2:typeElementStatus, KeyOverride: xsd:boolean)
     ns2:BookingTravelerInfo(BookingTravelerName: ns2:BookingTravelerName, NameRemark: ns2:NameRemark, DOB: xsd:date, ({TravelInfo: ns2:TravelInfo} | {Email: ns2:Email} | {PhoneNumber: ns2:PhoneNumber} | {Address: ns2:typeStructuredAddress} | {EmergencyInfo: xsd:string} | {DeliveryInfo: ns2:DeliveryInfo} | {Age: xsd:integer} | {CustomizedNameData: ns2:CustomizedNameData} | {AppliedProfile: ns2:AppliedProfile}), Key: ns2:typeRef, TravelerType: ns2:typePTC, Gender: ns2:typeGender)
     ns2:BookingTravelerInformation(Name: ns2:Name, BookingTravelerRef: ns2:typeRef)
     ns2:BookingTravelerName(Prefix: ns2:Prefix, First: ns2:First, Middle: ns2:Middle, Last: ns2:typeTravelerLastName, Suffix: ns2:Suffix)
     ns2:BookingTravelerRef(LoyaltyCardRef: ns2:LoyaltyCardRef[], DriversLicenseRef: ns2:DriversLicenseRef, DiscountCardRef: ns2:DiscountCardRef[], PaymentRef: ns2:PaymentRef[], Key: ns2:typeRef)
     ns2:CabinClass(Type: xsd:string)
     ns2:CardRestriction(RequiredField: ns2:RequiredField[], Code: ns2:typeCardMerchantType, Name: xsd:string)
     ns2:Carrier(Code: ns2:typeCarrier)
     ns2:Certificate(Number: xsd:string, Amount: ns2:typeMoney, DiscountAmount: ns2:typeMoney, DiscountPercentage: xsd:integer, NotValidBefore: xsd:date, NotValidAfter: xsd:date)
     ns2:Characteristic(SeatType: ns2:SeatType, SeatDescription: ns2:SeatDescription, SeatValue: ns2:SeatValue, SeatValueDescription: ns2:SeatValueDescription)
     ns2:Check(MICRNumber: ns2:MICRNumber, RoutingNumber: xsd:string, AccountNumber: xsd:string, CheckNumber: xsd:string)
     ns2:City(ns2:Location, Code: ns2:typeIATACode)
     ns2:CityOrAirport(ns2:Location, Code: ns2:typeIATACode, PreferCity: xsd:boolean)
     ns2:Commission(Key: ns2:typeRef, Level: ns2:typeCommissionLevel, Type: ns2:typeCommissionType, Modifier: ns2:typeCommissionModifier, Amount: ns2:typeMoney, Value: ns2:Value, Percentage: ns2:typePercentageWithDecimal, BookingTravelerRef: ns2:typeRef, CommissionOverride: xsd:boolean)
     ns2:CommissionRemark(({ProviderReservationLevel: {Amount: ns2:typeMoney, Percentage: ns2:typePercentageWithDecimal, CommissionCap: ns2:typeMoney}} | {PassengerTypeLevel: {TravelerType: ns2:typePTC, Amount: ns2:typeMoney, Percentage: ns2:typePercentageWithDecimal, CommissionCap: ns2:typeMoney}[]}), Key: ns2:typeRef, ProviderReservationInfoRef: ns2:typeRef, ProviderCode: ns2:typeProviderCode, ElStat: ns2:typeElementStatus, KeyOverride: xsd:boolean)
     ns2:ConnectionPoint(ns2:typeLocation)
     ns2:ConsolidatorRemark(PseudoCityCode: ns2:PseudoCityCode[], Key: ns2:typeRef, ProviderReservationInfoRef: ns2:typeRef, ProviderCode: ns2:typeProviderCode, ElStat: ns2:typeElementStatus, KeyOverride: xsd:boolean)
     ns2:ContinuityCheckOverride(ns2:typeNonBlanks, Key: ns2:typeRef)
     ns2:CoordinateLocation(ns2:Location, latitude: xsd:double, longitude: xsd:double)
     ns2:CorporateDiscountID(xsd:string, NegotiatedRateCode: xsd:boolean)
     ns2:Credentials(UserId: ns2:UserId)
     ns2:CreditCard(PhoneNumber: ns2:PhoneNumber, BillingAddress: ns2:typeStructuredAddress, Type: ns2:typeCardMerchantType, Number: ns2:typeCreditCardNumber, ExpDate: xsd:gYearMonth, Name: ns2:Name, CVV: ns2:CVV, ApprovalCode: ns2:ApprovalCode, ExtendedPayment: xsd:string, CustomerReference: xsd:string, AcceptanceOverride: xsd:boolean, ThirdPartyPayment: xsd:boolean, BankName: xsd:string, BankCountryCode: ns2:typeCountry, BankStateCode: ns2:typeState, Enett: xsd:boolean, ProfileID: xsd:string, Key: ns2:typeRef)
     ns2:CreditCardAuth(Key: ns2:typeRef, PaymentRef: ns2:typeRef, TransId: xsd:string, Number: ns2:typeCreditCardNumber, Amount: ns2:typeMoney, AuthCode: xsd:string, AuthResultCode: xsd:string, AVSResultCode: xsd:string, Message: xsd:string, ProviderReservationInfoRef: ns2:typeRef, FormOfPaymentRef: ns2:typeRef)
     ns2:CustomProfileInformation()
     ns2:CustomerID(xsd:string, ProviderReservationInfoRef: ns2:typeRef, ProviderCode: ns2:typeProviderCode, Key: ns2:typeRef)
     ns2:CustomizedNameData(xsd:string, Key: ns2:typeRef, ProviderReservationInfoRef: ns2:typeRef)
     ns2:DebitCard(PhoneNumber: ns2:PhoneNumber, BillingAddress: ns2:typeStructuredAddress, Type: ns2:typeCardMerchantType, Number: ns2:typeCreditCardNumber, ExpDate: xsd:gYearMonth, Name: ns2:Name, CVV: ns2:CVV, ApprovalCode: ns2:ApprovalCode, IssueNumber: ns2:IssueNumber, ProfileID: xsd:string, Key: ns2:typeRef)
     ns2:DeliveryInfo(ShippingAddress: {AddressName: ns2:AddressName, Street: ns2:Street[], City: ns2:City, State: ns2:State, PostalCode: ns2:PostalCode, Country: ns2:Country, ProviderReservationInfoRef: ns2:ProviderReservationInfoRef[], Key: ns2:typeRef, ElStat: ns2:typeElementStatus, KeyOverride: xsd:boolean}, PhoneNumber: ns2:PhoneNumber, Email: ns2:Email, GeneralRemark: ns2:GeneralRemark[], ProviderReservationInfoRef: ns2:ProviderReservationInfoRef[], Type: xsd:string, SignatureRequired: ns2:SignatureRequired, TrackingNumber: xsd:string)
     ns2:DirectPayment(Text: xsd:string)
     ns2:DiscountCard(Key: ns2:typeRef, Code: ns2:StringLength1to8, Description: ns2:StringLength1to255, Number: ns2:typeCardNumber, ElStat: ns2:typeElementStatus, KeyOverride: xsd:boolean)
     ns2:DiscountCardRef(Key: ns2:typeRef)
     ns2:Distance(Units: ns2:Units, Value: xsd:integer, Direction: ns2:Direction)
     ns2:DriversLicense(Key: ns2:typeRef, LicenseNumber: ns2:LicenseNumber, ElStat: ns2:typeElementStatus, KeyOverride: xsd:boolean)
     ns2:DriversLicenseRef(Key: ns2:typeRef)
     ns2:Email(ProviderReservationInfoRef: ns2:ProviderReservationInfoRef[], Key: ns2:typeRef, Type: ns2:typeEmailType, Comment: ns2:typeEmailComment, EmailID: xsd:string, ElStat: ns2:typeElementStatus, KeyOverride: xsd:boolean)
     ns2:EmailNotification(EmailRef: ns2:typeRef[], Recipients: ns2:Recipients)
     ns2:Endorsement(Value: ns2:typeEndorsement)
     ns2:EnettVan(MinPercentage: ns2:typeIntegerPercentage, MaxPercentage: ns2:typeIntegerPercentage, ExpiryDays: ns2:typeDurationYearInDays, MultiUse: xsd:boolean)
     ns2:ErrorInfo(Code: xsd:string, Service: xsd:string, Type: xsd:string, Description: xsd:string, TransactionId: xsd:string, TraceId: xsd:string, CommandHistory: xsd:string, Auxdata: ns2:Auxdata, StackTrace: xsd:string)
     ns2:ExchangedCoupon(TicketNumber: ns2:typeTicketNumber, CouponNumber: xsd:string)
     ns2:FileFinishingInfo(ShopInformation: ns2:ShopInformation, PolicyInformation: ns2:PolicyInformation[], AccountInformation: ns2:AccountInformation, AgencyInformation: ns2:AgencyInformation, TravelerInformation: ns2:TravelerInformation[], CustomProfileInformation: ns2:CustomProfileInformation)
     ns2:FormOfPayment(({CreditCard: ns2:CreditCard} | {DebitCard: ns2:DebitCard} | {EnettVan: ns2:EnettVan} | {None: ({Certificate: ns2:Certificate} | {TicketNumber: ns2:StringLength1to13} | {Check: ns2:Check} | {Requisition: ns2:Requisition} | {MiscFormOfPayment: ns2:MiscFormOfPayment} | {AgencyPayment: ns2:typeAgencyPayment} | {UnitedNations: ns2:UnitedNations} | {DirectPayment: ns2:DirectPayment} | {AgentVoucher: ns2:AgentVoucher} | {PaymentAdvice: ns2:PaymentAdvice})}), ProviderReservationInfoRef: ns2:typeFormOfPaymentPNRReference[], SegmentRef: ns2:typeGeneralReference[], Key: ns2:typeRef, Type: ns2:Type, FulfillmentType: xsd:string, FulfillmentLocation: xsd:string, FulfillmentIDType: ns2:typeFulfillmentIDType, FulfillmentIDNumber: xsd:string, IsAgentType: xsd:boolean, AgentText: xsd:string, ReuseFOP: ns2:typeRef, ExternalReference: ns2:typeExternalReference, Reusable: xsd:boolean, ProfileID: xsd:string, ProfileKey: ns2:typeRef, ElStat: ns2:typeElementStatus, KeyOverride: xsd:boolean)
     ns2:FormOfPaymentRef(Key: ns2:typeRef)
     ns2:GeneralRemark(RemarkData: xsd:string, BookingTravelerRef: ns2:typeRef[], Key: ns2:typeRef, Category: ns2:Category, TypeInGds: ns2:typeGdsRemark, SupplierType: ns2:typeProduct, ProviderReservationInfoRef: ns2:typeRef, ProviderCode: ns2:typeProviderCode, SupplierCode: ns2:typeSupplierCode, Direction: ns2:typeDirection, CreateDate: xsd:dateTime, UseProviderNativeMode: xsd:boolean, ElStat: ns2:typeElementStatus, KeyOverride: xsd:boolean)
     ns2:Group(Name: {ns2:typeNonBlanks}, DeliveryInfo: ns2:DeliveryInfo, PhoneNumber: ns2:PhoneNumber[], SSRRef: {Key: ns2:typeRef}[], Address: ns2:typeStructuredAddress, BookingTravelerRef: {Key: ns2:typeRef}[], Key: ns2:typeRef, TravelerType: ns2:typePTC, GroupSize: xsd:positiveInteger, ElStat: ns2:typeElementStatus, KeyOverride: xsd:boolean)
     ns2:Guarantee(({CreditCard: ns2:CreditCard} | {OtherGuaranteeInfo: ns2:OtherGuaranteeInfo}), Type: xsd:string, Key: ns2:typeRef, ReuseFOP: ns2:typeRef, ExternalReference: ns2:typeExternalReference, Reusable: xsd:boolean, ElStat: ns2:typeElementStatus, KeyOverride: xsd:boolean)
     ns2:GuaranteeType(ns2:typeGeneralText)
     ns2:HostToken(xsd:string, Host: ns2:typeProviderCode, Key: xsd:anyType, ElStat: ns2:typeElementStatus, KeyOverride: xsd:boolean)
     ns2:HostTokenList(HostToken: ns2:HostToken[])
     ns2:IncludedInBase(Amount: ns2:typeMoney)
     ns2:IndustryStandardSSR(Code: xsd:string)
     ns2:InvoiceData(BookingTravelerInformation: ns2:BookingTravelerInformation[], Key: ns2:typeRef, InvoiceNumber: xsd:string, IssueDate: xsd:dateTime, ProviderReservationInfoRef: ns2:typeRef)
     ns2:InvoiceRemark(RemarkData: xsd:string, BookingTravelerRef: ns2:typeRef[], ({AirSegmentRef: ns2:typeSegmentRef} | {HotelReservationRef: ns2:typeNonAirReservationRef} | {VehicleReservationRef: ns2:typeNonAirReservationRef} | {PassiveSegmentRef: ns2:typeSegmentRef}), ProviderReservationInfoRef: ns2:typeRef, ProviderCode: ns2:typeProviderCode, Key: ns2:typeRef, ElStat: ns2:typeElementStatus, KeyOverride: xsd:boolean)
     ns2:KeyMapping(ElementName: xsd:string, OriginalKey: xsd:string, NewKey: xsd:string)
     ns2:Keyword(SubKey: ns2:typeSubKey[], Text: xsd:string[], Name: ns2:Name, Number: xsd:anyType, Description: xsd:anyType)
     ns2:LinkedUniversalRecord(LocatorCode: ns2:typeLocatorCode, Key: ns2:typeRef, ElStat: ns2:typeElementStatus, KeyOverride: xsd:boolean)
     ns2:LocationAddress(ns2:typeStructuredAddress)
     ns2:LocatorCode(ns2:LocatorCode)
     ns2:LoyaltyCard(ProviderReservationSpecificInfo: ns2:typeProviderReservationSpecificInfo[], Key: ns2:typeRef, SupplierCode: ns2:typeCarrier, AllianceLevel: xsd:string, MembershipProgram: ns2:StringLength1to32, ElStat: ns2:typeElementStatus, KeyOverride: xsd:boolean, CardNumber: ns2:typeCardNumber, Status: xsd:string, MembershipStatus: xsd:string, FreeText: xsd:string, SupplierType: ns2:typeProduct, Level: ns2:Level, PriorityCode: ns2:typePriorityCode, VendorLocationRef: xsd:string)
     ns2:LoyaltyCardRef(Key: ns2:typeRef)
     ns2:LoyaltyProgram(Key: ns2:typeRef, SupplierCode: ns2:typeCarrier, AllianceLevel: xsd:string, MembershipProgram: ns2:StringLength1to32, ElStat: ns2:typeElementStatus, KeyOverride: xsd:boolean, Level: xsd:anyType)
     ns2:MCO(PassengerInfo: ns2:PassengerInfo[], FormOfPayment: ns2:FormOfPayment[], Endorsement: ns2:Endorsement, MCOExchangeInfo: ns2:MCOExchangeInfo, MCOFeeInfo: ns2:MCOFeeInfo, MCORemark: ns2:MCORemark[], MCOPriceData: ns2:MCOPriceData, StockControl: ns2:StockControl[], MCOText: ns2:MCOText[], MCONumber: xsd:string, Status: xsd:string, MCOType: xsd:string, TicketType: xsd:string, TicketNumber: xsd:string, MCOIssued: xsd:boolean, MCOIssueDate: xsd:dateTime, MCODocNum: xsd:string, IssueReasonCode: xsd:string, PlatingCarrier: ns2:typeCarrier, TourOperator: xsd:string, Location: xsd:string, TourCode: xsd:string, ProviderCode: ns2:typeProviderCode, ProviderLocatorCode: ns2:typeProviderLocatorCode, PseudoCityCode: ns2:typePCC, ExpiryDate: xsd:date)
     ns2:MCOExchangeInfo(FormOfPayment: ns2:FormOfPayment, ExchangedCoupon: ns2:ExchangedCoupon[], OriginalTicketNumber: ns2:typeTicketNumber, OriginalCityCode: ns2:typeCity, OriginalTicketDate: ns2:typeDate, IATACode: ns2:typeIATA)
     ns2:MCOFeeInfo(Amount: ns2:typeMoney, Percentage: ns2:typePercentageWithDecimal, FeeAppliesToInd: ns2:FeeAppliesToInd)
     ns2:MCOPriceData(TaxInfo: ns2:typeTaxInfo[], Commission: {Amount: ns2:typeMoney, Percentage: ns2:typePercentageWithDecimal}, MCOAmount: ns2:typeMoney, MCOEquivalentFare: ns2:typeMoney, MCOTotalAmount: ns2:typeMoney)
     ns2:MCORemark(xsd:string, AdditionalRmk: xsd:boolean)
     ns2:MCOText(xsd:string, Type: xsd:string)
     ns2:MarketingInformation(Text: xsd:anyType[])
     ns2:MealRequest(Type: ns2:Type)
     ns2:MediaItem(caption: xsd:string, height: xsd:nonNegativeInteger, width: xsd:nonNegativeInteger, type: xsd:string, url: xsd:anyURI, icon: xsd:anyURI, sizeCode: )
     ns2:MetaData(Key: ns2:Key, Value: ns2:Value)
     ns2:MiscFormOfPayment(CreditCardType: ns2:CreditCardType, CreditCardNumber: ns2:typeCreditCardNumber, ExpDate: xsd:gYearMonth, Text: xsd:string, Category: ns2:Category, AcceptanceOverride: xsd:boolean)
     ns2:Name(Prefix: ns2:Prefix, First: ns2:First, Middle: ns2:Middle, Last: ns2:Last, Suffix: ns2:Suffix, TravelerProfileId: ns2:typeProfileID)
     ns2:NameOverride(First: ns2:First, Last: ns2:Last, Age: xsd:integer)
     ns2:NameRemark(RemarkData: xsd:string, ProviderReservationInfoRef: ns2:ProviderReservationInfoRef[], Key: ns2:typeRef, Category: xsd:string, ElStat: ns2:typeElementStatus, KeyOverride: xsd:boolean)
     ns2:NextResultReference(ns2:typeNonBlanks, ProviderCode: ns2:typeProviderCode)
     ns2:OSI(Key: ns2:typeRef, Carrier: ns2:typeCarrier, Code: ns2:Code, Text: ns2:Text, ProviderReservationInfoRef: ns2:typeRef, ProviderCode: ns2:typeProviderCode, ElStat: ns2:typeElementStatus, KeyOverride: xsd:boolean)
     ns2:OperatedBy(ns2:typeNonBlanks)
     ns2:OtherGuaranteeInfo(xsd:string, Type: ns2:Type)
     ns2:OverridePCC(ProviderCode: ns2:typeProviderCode, PseudoCityCode: ns2:typePCC)
     ns2:OwnershipChange(OwningPCC: ns2:typeRef)
     ns2:PassengerInfo(Name: ns2:Name, BookingTravelerRef: ns2:typeRef, PassengerType: ns2:typePTC)
     ns2:PassiveInfo(TicketNumber: xsd:string[], ConfirmationNumber: xsd:string[], Commission: ns2:Commission, ProviderCode: xsd:string, ProviderLocatorCode: xsd:string, SupplierCode: xsd:string, SupplierLocatorCode: xsd:string)
     ns2:Payment(Key: ns2:typeRef, Type: ns2:Type, FormOfPaymentRef: ns2:typeRef, BookingTravelerRef: ns2:typeRef, Amount: ns2:typeMoney, AmountType: ns2:StringLength1to32, ApproximateAmount: ns2:typeMoney, Status: xsd:string, ElStat: ns2:typeElementStatus, KeyOverride: xsd:boolean)
     ns2:PaymentAdvice(Type: ns2:Type, DocumentNumber: ns2:DocumentNumber, IssueDate: xsd:date, IssueCity: ns2:typeIATACode, OriginalFOP: ns2:OriginalFOP)
     ns2:PaymentRef(Key: ns2:typeRef)
     ns2:PaymentRestriction(CardRestriction: ns2:CardRestriction[], AddressRestriction: ns2:AddressRestriction)
     ns2:Penalty(CancelRefund: xsd:boolean, NonRefundable: xsd:boolean, NonExchangeable: xsd:boolean, CancelationPenalty: xsd:boolean, ReissuePenalty: xsd:boolean, NonReissuePenalty: xsd:boolean, TicketRefundPenalty: xsd:boolean, ChargeApplicable: xsd:boolean, ChargePortion: xsd:boolean, PenaltyAmount: ns2:typeMoney)
     ns2:PermittedProviders(Provider: ns2:Provider)
     ns2:PersonalGeography(({CountryCode: ns2:typeCountry} | {StateProvinceCode: ns2:typeState} | {CityCode: ns2:typeCity}))
     ns2:PhoneNumber(ProviderReservationInfoRef: ns2:ProviderReservationInfoRef[], Key: ns2:typeRef, Type: ns2:Type, Location: ns2:Location, CountryCode: ns2:CountryCode, AreaCode: ns2:AreaCode, Number: ns2:Number, Extension: ns2:Extension, Text: ns2:Text, ElStat: ns2:typeElementStatus, KeyOverride: xsd:boolean)
     ns2:PointOfCommencement(CityOrAirportCode: ns2:typeIATACode, Time: xsd:string)
     ns2:PointOfSale(ProviderCode: ns2:typeProviderCode, PseudoCityCode: ns2:typePCC, Key: ns2:typeRef, IATA: ns2:typeIATA)
     ns2:PolicyInformation(ReasonCode: {OutOfPolicy: xsd:string, PurposeOfTrip: xsd:string, Remark: ns2:Remark}, Type: ns2:typePolicy, Name: xsd:anyType, OutOfPolicy: xsd:boolean, SegmentRef: ns2:typeRef)
     ns2:Postscript(xsd:string, ProviderReservationInfoRef: ns2:typeRef, ProviderCode: ns2:typeProviderCode, Key: ns2:typeRef)
     ns2:PriceMatchError(ErrorMessage: xsd:string, VendorCode: ns2:typeSupplierCode, HotelChain: ns2:typeHotelChainCode, HotelCode: ns2:typeHotelCode, ReqBase: xsd:decimal, RspBase: xsd:decimal, BaseDiff: xsd:decimal, ReqTotal: xsd:decimal, RspTotal: xsd:decimal, TotalDiff: xsd:decimal)
     ns2:Provider(Code: ns2:typeProviderCode)
     ns2:ProviderARNKSegment(PreviousSegment: {({AirSegmentRef: ns2:typeSegmentRef} | {HotelReservationRef: ns2:typeNonAirReservationRef} | {VehicleReservationRef: ns2:typeNonAirReservationRef} | {PassiveSegmentRef: ns2:typeSegmentRef})}, NextSegment: {({AirSegmentRef: ns2:typeSegmentRef} | {HotelReservationRef: ns2:typeNonAirReservationRef} | {VehicleReservationRef: ns2:typeNonAirReservationRef} | {PassiveSegmentRef: ns2:typeSegmentRef})}, Key: ns2:typeRef, ProviderReservationInfoRef: ns2:typeRef, ProviderSegmentOrder: ns2:ProviderSegmentOrder)
     ns2:ProviderReservationDetail(ns2:typeProviderReservationDetail)
     ns2:ProviderReservationInfoRef(Key: ns2:typeRef)
     ns2:PseudoCityCode(ns2:typePCC)
     ns2:QueuePlace(PseudoCityCode: ns2:typePCC, QueueSelector: ns2:QueueSelector[])
     ns2:QueueSelector(Queue: xsd:string, Category: xsd:string, DateRange: xsd:string)
     ns2:RailLocation(ns2:Location, Code: ns2:typeRailLocationCode)
     ns2:RailSeatAssignment(Characteristic: ns2:Characteristic[], Key: ns2:typeRef, Status: ns2:typeStatusCode, Seat: xsd:string, RailSegmentRef: ns2:typeRef, CoachNumber: xsd:string, ElStat: ns2:typeElementStatus, KeyOverride: xsd:boolean)
     ns2:ReferencePoint(ns2:typeReferencePoint)
     ns2:RefundRemark(RemarkData: xsd:string)
     ns2:Remark(xsd:string, Key: ns2:typeRef)
     ns2:RequestKeyMappings(KeyMapping: ns2:KeyMapping[])
     ns2:RequiredField(Name: ns2:Name)
     ns2:Requisition(Number: xsd:string, Category: ns2:Category, Type: ns2:Type)
     ns2:ReservationName(({BookingTravelerRef: ns2:BookingTravelerRef} | {NameOverride: ns2:NameOverride}))
     ns2:ResponseMessage(xsd:string, Code: xsd:integer, Type: ns2:Type, ProviderCode: ns2:typeProviderCode, SupplierCode: ns2:typeSupplierCode)
     ns2:Restriction(Operation: xsd:string, Reason: xsd:string)
     ns2:ReviewBooking(Key: ns2:typeRef, Queue: ns2:Queue, QueueCategory: ns2:QueueCategory, DateTime: xsd:dateTime, PseudoCityCode: ns2:typePCC, ProviderCode: ns2:typeProviderCode, ProviderReservationInfoRef: ns2:typeRef, Remarks: ns2:Remarks, ElStat: ns2:typeElementStatus, KeyOverride: xsd:boolean)
     ns2:RoleInfo(Id: ns2:Id, Name: ns2:Name, Source: xsd:string, Description: ns2:Description)
     ns2:SSR(Key: ns2:typeRef, SegmentRef: ns2:typeRef, PassiveSegmentRef: ns2:typeRef, ProviderReservationInfoRef: ns2:typeRef, Type: ns2:typeSSRCode, Status: xsd:string, FreeText: ns2:typeSSRFreeText, Carrier: ns2:typeCarrier, CarrierSpecificText: ns2:CarrierSpecificText, Description: xsd:string, ProviderDefinedType: ns2:ProviderDefinedType, SSRRuleRef: ns2:typeRef, URL: xsd:anyURI, ElStat: ns2:typeElementStatus, KeyOverride: xsd:boolean, ProfileID: xsd:string, ProfileSecureFlightDocKey: ns2:typeRef)
     ns2:SSRInfo(SSR: ns2:SSR, BookingTravelerRef: ns2:typeRef[])
     ns2:SearchEvent(ns2:typeTimeRange, EarliestTime: xsd:string, LatestTime: xsd:string, Type: ns2:typeEventType)
     ns2:SearchPassenger(Name: ns2:Name, LoyaltyCard: ns2:LoyaltyCard[], DiscountCard: ns2:DiscountCard[], PersonalGeography: ns2:PersonalGeography, Code: ns2:typePTC, Age: xsd:integer, DOB: xsd:date, Gender: ns2:typeGender, PricePTCOnly: xsd:boolean, BookingTravelerRef: xsd:string, AccompaniedPassenger: xsd:boolean, ResidencyType: ns2:typeResidency, Key: ns2:typeRef)
     ns2:SearchTicketing(TicketStatus: ns2:TicketStatus, ReservationStatus: ns2:ReservationStatus, TicketDate: xsd:date)
     ns2:SeatAttribute(Value: ns2:Value)
     ns2:SeatAttributes(SeatAttribute: ns2:SeatAttribute[])
     ns2:SegmentRemark(xsd:string, Key: ns2:typeRef)
     ns2:SellMessage(xsd:string)
     ns2:ServiceData(SeatAttributes: ns2:SeatAttributes, CabinClass: ns2:CabinClass, SSRRef: ns2:typeKeyBasedReference[], Data: xsd:string, AirSegmentRef: ns2:typeRef, BookingTravelerRef: ns2:typeRef, StopOver: xsd:boolean, TravelerType: ns2:typePTC, EMDSummaryRef: ns2:typeRef, EMDCouponRef: ns2:typeRef)
     ns2:ServiceFeeInfo(FormOfPayment: ns2:FormOfPayment, ServiceFeeTaxInfo: ns2:ServiceFeeTaxInfo[], CreditCardAuth: ns2:CreditCardAuth, Payment: ns2:Payment, Status: ns2:typeStatus, Description: xsd:string, Key: ns2:typeRef, Confirmation: xsd:string, TicketNumber: xsd:string, BookingTravelerRef: ns2:typeRef, ProviderReservationInfoRef: ns2:typeRef, PassiveProviderReservationInfoRef: ns2:typeRef, TotalAmount: ns2:typeMoney, BaseAmount: ns2:typeMoney, Taxes: ns2:typeMoney, ElStat: ns2:typeElementStatus, KeyOverride: xsd:boolean, BookingTravelerName: xsd:string)
     ns2:ServiceFeeTaxInfo(Category: xsd:string, Amount: ns2:typeMoney)
     ns2:ServiceInfo(Description: xsd:string[], MediaItem: ns2:MediaItem[])
     ns2:ShopInformation(SearchRequest: {Origin: ns2:typeIATACode, Destination: ns2:typeIATACode, DepartureTime: xsd:string, ClassOfService: ns2:typeClassOfService}[], FlightsOffered: {Origin: ns2:typeIATACode, Destination: ns2:typeIATACode, DepartureTime: xsd:string, TravelOrder: xsd:int, Carrier: ns2:typeCarrier, FlightNumber: ns2:typeFlightNumber, ClassOfService: ns2:typeClassOfService, StopOver: xsd:boolean, Connection: xsd:boolean}[], CabinShopped: xsd:string, CabinSelected: xsd:string, LowestFareOffered: ns2:typeMoney)
     ns2:SimpleName(xsd:string)
     ns2:SpecialEquipment(Key: ns2:typeRef, Type: xsd:string, ElStat: ns2:typeElementStatus, KeyOverride: xsd:boolean)
     ns2:State(xsd:string)
     ns2:StockControl(Type: xsd:string, Number: xsd:string)
     ns2:SupplierLocator(SegmentRef: ns2:typeGeneralReference[], SupplierCode: ns2:typeCarrier, SupplierLocatorCode: xsd:string, ProviderReservationInfoRef: ns2:typeRef, CreateDateTime: xsd:dateTime)
     ns2:TaxDetail(Amount: ns2:typeMoney, OriginAirport: ns2:typeAirport, DestinationAirport: ns2:typeAirport, CountryCode: xsd:string, FareInfoRef: ns2:typeRef)
     ns2:TerminalSessionInfo(xsd:string)
     ns2:ThirdPartyInformation(SegmentRef: ns2:typeGeneralReference[], ThirdPartyCode: ns2:ThirdPartyCode, ThirdPartyLocatorCode: ns2:ThirdPartyLocatorCode, ThirdPartyName: ns2:typeThirdPartySupplier, ProviderReservationInfoRef: ns2:typeRef, Key: ns2:typeRef, ElStat: ns2:typeElementStatus, KeyOverride: xsd:boolean)
     ns2:TicketNumber(ns2:StringLength1to13)
     ns2:TransactionType(Air: {ns2:typeBookingTransactionsAllowed, BookingEnabled: xsd:boolean, ShoppingEnabled: xsd:boolean, PricingEnabled: xsd:boolean, Tier: ns2:Tier, DaysEnabled: xsd:boolean, WeekendsEnabled: xsd:boolean, AirportsEnabled: xsd:boolean, ODEnabled: xsd:boolean, OneWayShop: xsd:boolean, FlexExplore: xsd:boolean, RapidRepriceEnabled: xsd:boolean, ReturnUpsellFare: xsd:boolean}, Hotel: ns2:typeTransactionsAllowed, Rail: ns2:typeTransactionsAllowed, Vehicle: ns2:typeTransactionsAllowed, Passive: ns2:typeBookingTransactionsAllowed, BackgroundPassive: ns2:typeBookingTransactionsAllowed)
     ns2:TravelComplianceData(PolicyCompliance: {InPolicy: xsd:boolean, PolicyToken: ns2:StringLength1to128}[], ContractCompliance: {InContract: xsd:boolean, ContractToken: ns2:StringLength1to128}[], PreferredSupplier: {Preferred: xsd:boolean, ProfileType: ns2:typeProfileType}[], Key: ns2:typeRef, AirSegmentRef: ns2:typeRef, PassiveSegmentRef: ns2:typeRef, RailSegmentRef: ns2:typeRef, ReservationLocatorRef: ns2:typeLocatorCode, ElStat: ns2:typeElementStatus, KeyOverride: xsd:boolean)
     ns2:TravelInfo(TripName: ns2:TripName, TravelPurpose: ns2:TravelPurpose)
     ns2:TravelSegment(SegmentRemark: ns2:SegmentRemark[], Key: ns2:typeRef, Status: xsd:string, Passive: xsd:boolean, TravelOrder: xsd:integer, ProviderSegmentOrder: ns2:ProviderSegmentOrder, ElStat: ns2:typeElementStatus, KeyOverride: xsd:boolean, Origin: ns2:typeIATACode, Destination: ns2:typeIATACode, DepartureTime: xsd:string, ArrivalTime: xsd:string)
     ns2:TravelerInformation(EmergencyContact: {PhoneNumber: ns2:PhoneNumber, Name: xsd:anyType, Relationship: xsd:anyType}, HomeAirport: ns2:typeAirport, VisaExpirationDate: xsd:date, BookingTravelerRef: ns2:typeRef)
     ns2:TravelerType(Code: ns2:typePTC)
     ns2:UnassociatedRemark(RemarkData: xsd:string, BookingTravelerRef: ns2:typeRef[], ProviderReservationInfoRef: ns2:typeRef, ProviderCode: ns2:typeProviderCode, Key: ns2:typeRef, ElStat: ns2:typeElementStatus, KeyOverride: xsd:boolean)
     ns2:UnitedNations(Number: xsd:string)
     ns2:VendorLocation(ns2:typeVendorLocation, ProviderCode: ns2:typeProviderCode, VendorCode: ns2:typeSupplierCode, PreferredOption: xsd:boolean, VendorLocationID: ns2:VendorLocationID, Key: ns2:typeRef, MoreRatesToken: ns2:MoreRatesToken)
     ns2:XMLRemark(xsd:string, Key: ns2:typeRef, Category: ns2:Category, ElStat: ns2:typeElementStatus, KeyOverride: xsd:boolean)
     ns3:Characteristic(Smoking: xsd:boolean, Class: ns3:typeCoachClassType)
     ns3:Coach(Characteristic: ns3:Characteristic, Remark: ns2:Remark[], CoachNumber: xsd:string)
     ns3:FareValidity(RailJourneyRef: ns2:typeRef, NotValidBefore: xsd:date, NotValidAfter: xsd:date)
     ns3:FulFillmentType(ns3:FulFillmentType)
     ns3:JourneyRemark(xsd:string, Category: xsd:string)
     ns3:OperatingCompany(xsd:string, Code: xsd:string, Name: xsd:string)
     ns3:RailAutoSeatAssignment(SeatType: ns3:SeatType, SeatValue: ns3:SeatValue, RailSegmentRef: ns2:typeRef, BookingTravelerRef: ns2:typeRef)
     ns3:RailAvailInfo(ClassCode: ns2:typeRailClass, Quantity: xsd:integer, CabinClass: ns2:typeRailCabin)
     ns3:RailBookingInfo(RailFareRef: ns2:typeRef, RailJourneyRef: ns2:typeRef, OptionalService: xsd:boolean)
     ns3:RailExchangeInfo(RefundAmount: ns2:typeMoney, CancellationFee: ns2:typeMoney, ExchangeAmount: ns2:typeMoney, ApproximateRefundAmount: ns2:typeMoney, ApproximateCancellationFee: ns2:typeMoney, ApproximateExchangeAmount: ns2:typeMoney, RetainAmount: ns2:typeMoney)
     ns3:RailExchangeSolution(({RailJourney: ns3:RailJourney[]} | {RailJourneyRef: ns3:RailJourneyRef[]}), RailPricingInfo: ns3:RailPricingInfo[], RailExchangeInfo: ns3:RailExchangeInfo, Key: ns2:typeRef, OfferId: xsd:integer, TotalPrice: ns2:typeMoney, BasePrice: ns2:typeMoney, ApproximateTotalPrice: ns2:typeMoney, ApproximateBasePrice: ns2:typeMoney, EquivalentBasePrice: ns2:typeMoney, Taxes: ns2:typeMoney, Fees: ns2:typeMoney, Services: ns2:typeMoney, ApproximateTaxes: ns2:typeMoney, ApproximateFees: ns2:typeMoney, ProviderCode: ns2:typeProviderCode, SupplierCode: ns2:typeSupplierCode, HostTokenRef: ns2:typeRef, Reference: xsd:string)
     ns3:RailFare(RailFareNoteRef: ns3:RailFareNoteRef[], ({RailFareID: ns3:RailFareID[]} | {RailFareIDRef: ns3:RailFareIDRef[]}), FareValidity: ns3:FareValidity[], HostToken: ns2:HostToken, FulFillmentType: ns3:FulFillmentType[], RailFareComponent: ns3:RailFareComponent[], Key: ns2:typeRef, FareBasis: xsd:string, CabinClass: ns2:typeRailCabin, PassengerTypeCode: ns2:typePTC, Origin: ns2:typeIATACode, Destination: ns2:typeIATACode, EffectiveDate: xsd:string, Amount: ns2:typeMoney, RouteDescription: xsd:string, TicketTypeCode: xsd:string, FareReference: ns3:FareReference, CrossCityFare: xsd:boolean, OriginStationName: xsd:string, DestinationStationName: xsd:string, ReservationRequired: xsd:boolean, JourneyDirection: ns3:typeJourneyDirection, RailLocOrigin: ns2:typeRailLocationCode, RailLocDestination: ns2:typeRailLocationCode, ElStat: ns2:typeElementStatus, KeyOverride: xsd:boolean)
     ns3:RailFareComponent(Discount: {DiscountCard: ns2:DiscountCard[], Key: ns2:typeRef}[], Key: ns2:typeRef, Amount: ns2:typeMoney, Age: xsd:integer, PassengerTypeCode: ns2:typePTC, SupplierPassengerType: xsd:string, Quantity: xsd:integer)
     ns3:RailFareID(xsd:string, Key: ns2:typeRef, Category: xsd:string, ElStat: ns2:typeElementStatus, KeyOverride: xsd:boolean)
     ns3:RailFareIDList(RailFareID: ns3:RailFareID[])
     ns3:RailFareIDRef(Key: ns2:typeRef)
     ns3:RailFareList(RailFare: ns3:RailFare[])
     ns3:RailFareNote(xsd:string, Key: ns2:typeRef, NoteName: xsd:string, ElStat: ns2:typeElementStatus, KeyOverride: xsd:boolean)
     ns3:RailFareNoteList(RailFareNote: ns3:RailFareNote[])
     ns3:RailFareNoteRef(Key: ns2:typeRef)
     ns3:RailFareRef(Key: ns2:typeRef)
     ns3:RailInfo(Origin: ns2:typeIATACode, RailLocOrigin: ns2:typeRailLocationCode, Destination: ns2:typeIATACode, RailLocDestination: ns2:typeRailLocationCode, DepartureTime: xsd:string, ArrivalTime: xsd:string, TrainNumber: ns3:typeTrainNumber, ProviderCode: ns2:typeProviderCode, SupplierCode: ns2:typeSupplierCode)
     ns3:RailJourney(({RailSegment: ns3:RailSegment[]} | {RailSegmentRef: ns3:RailSegmentRef[]}), JourneyRemark: ns3:JourneyRemark[], HostToken: ns2:HostToken[], Key: ns2:typeRef, Origin: ns2:typeIATACode, Destination: ns2:typeIATACode, DepartureTime: xsd:string, ArrivalTime: xsd:string, OriginStationName: xsd:string, DestinationStationName: xsd:string, RailLocOrigin: ns2:typeRailLocationCode, RailLocDestination: ns2:typeRailLocationCode, RouteDescription: ns3:RouteDescription, JourneyDirection: ns3:typeJourneyDirection, JourneyDuration: xsd:integer, TotalPrice: ns2:typeMoney, BasePrice: ns2:typeMoney, ApproximateTotalPrice: ns2:typeMoney, ApproximateBasePrice: ns2:typeMoney, EquivalentBasePrice: ns2:typeMoney, Taxes: ns2:typeMoney, Fees: ns2:typeMoney, Services: ns2:typeMoney, ApproximateTaxes: ns2:typeMoney, ApproximateFees: ns2:typeMoney, ProviderCode: ns2:typeProviderCode, SupplierCode: ns2:typeSupplierCode, Status: xsd:string, ProviderReservationInfoRef: ns2:typeRef, PassiveProviderReservationInfoRef: ns2:typeRef, TravelOrder: xsd:integer, RouteReference: ns3:RouteReference, ElStat: ns2:typeElementStatus, KeyOverride: xsd:boolean, Operation: xsd:string)
     ns3:RailJourneyList(RailJourney: ns3:RailJourney[])
     ns3:RailJourneyRef(Key: ns2:typeRef)
     ns3:RailLegModifiers(PermittedConnectionPoints: {ConnectionPoint: ns2:typeLocation[]}, ProhibitedConnectionPoints: {ConnectionPoint: ns2:typeLocation[]}, Class: xsd:string)
     ns3:RailPricingInfo(({RailFare: ns3:RailFare[]} | {RailFareRef: ns3:RailFareRef[]}), RailBookingInfo: ns3:RailBookingInfo[], PassengerType: ns2:typePassengerType[], BookingTravelerRef: ns2:BookingTravelerRef[], Key: ns2:typeRef, ExchangeAmount: ns2:typeMoney, ApproximateExchangeAmount: ns2:typeMoney, TotalPrice: ns2:typeMoney, BasePrice: ns2:typeMoney, ApproximateTotalPrice: ns2:typeMoney, ApproximateBasePrice: ns2:typeMoney, EquivalentBasePrice: ns2:typeMoney, Taxes: ns2:typeMoney, Fees: ns2:typeMoney, Services: ns2:typeMoney, ApproximateTaxes: ns2:typeMoney, ApproximateFees: ns2:typeMoney, ElStat: ns2:typeElementStatus, KeyOverride: xsd:boolean)
     ns3:RailPricingModifiers(DiscountCard: ns2:DiscountCard[], ProhibitNonRefundableFares: xsd:boolean, ProhibitNonExchangeableFares: xsd:boolean, CurrencyType: ns2:typeCurrency, RailSearchType: ns2:typeRailSearchType)
     ns3:RailPricingSolution(({RailJourney: ns3:RailJourney[]} | {RailJourneyRef: ns3:RailJourneyRef[]}), RailPricingInfo: ns3:RailPricingInfo[], Key: ns2:typeRef, OfferId: xsd:integer, TotalPrice: ns2:typeMoney, BasePrice: ns2:typeMoney, ApproximateTotalPrice: ns2:typeMoney, ApproximateBasePrice: ns2:typeMoney, EquivalentBasePrice: ns2:typeMoney, Taxes: ns2:typeMoney, Fees: ns2:typeMoney, Services: ns2:typeMoney, ApproximateTaxes: ns2:typeMoney, ApproximateFees: ns2:typeMoney, ProviderCode: ns2:typeProviderCode, SupplierCode: ns2:typeSupplierCode, HostTokenRef: ns2:typeRef, Reference: xsd:string)
     ns3:RailRefundInfo(RefundAmount: ns2:typeMoney, CancellationFee: ns2:typeMoney, Refund: xsd:boolean, Retain: xsd:boolean, RetainAmount: ns2:typeMoney, NetAmount: ns2:typeMoney)
     ns3:RailReservation(AccountingRemark: ns2:AccountingRemark[], GeneralRemark: ns2:GeneralRemark[], Restriction: ns2:Restriction[], PassiveInfo: ns2:PassiveInfo, BookingTravelerRef: ns2:BookingTravelerRef[], RailJourney: ns3:RailJourney[], RailPricingInfo: ns3:RailPricingInfo[], Payment: ns2:Payment[], RailTicketInfo: ns3:RailTicketInfo[], RailFareNoteList: ns3:RailFareNoteList, SupplierLocator: ns2:SupplierLocator[], LocatorCode: ns2:typeLocatorCode, CreateDate: xsd:string, ModifiedDate: xsd:string, CustomerNumber: xsd:string, BookingStatus: xsd:string)
     ns3:RailSearchModifiers(PreferredSuppliers: {RailSupplier: ns3:RailSupplier[]}, MaxChanges: ns3:MaxChanges, Direction: ns3:typeRailDirection, Class: xsd:string, MaxSolutions: xsd:integer)
     ns3:RailSegment(SegmentRemark: ns2:SegmentRemark[], RailSegmentInfo: ns3:RailSegmentInfo[], OperatingCompany: ns3:OperatingCompany, RailAvailInfo: ns3:RailAvailInfo[], FulFillmentType: ns3:FulFillmentType[], Key: ns2:typeRef, Status: xsd:string, Passive: xsd:boolean, TravelOrder: xsd:integer, ProviderSegmentOrder: ns2:ProviderSegmentOrder, ElStat: ns2:typeElementStatus, KeyOverride: xsd:boolean, TrainNumber: ns3:typeTrainNumber, Origin: ns2:typeIATACode, Destination: ns2:typeIATACode, DepartureTime: xsd:string, ArrivalTime: xsd:string, OriginStationName: xsd:string, DestinationStationName: xsd:string, RailLocOrigin: ns2:typeRailLocationCode, RailLocDestination: ns2:typeRailLocationCode, TrainType: xsd:string, TrainTypeCode: ns3:typeTrainType, TransportMode: ns3:typeTransportMode, SeatAssignable: xsd:boolean, TransportCode: xsd:string, ReservationRequired: xsd:boolean, TravelTime: xsd:integer, HostTokenRef: ns2:typeRef, CabinClass: ns2:typeRailCabin, ClassCode: ns2:typeRailClass)
     ns3:RailSegmentInfo(xsd:string, Category: xsd:string, Type: ns3:typeRailSegmentInfo)
     ns3:RailSegmentList(RailSegment: ns3:RailSegment[])
     ns3:RailSegmentRef(Key: ns2:typeRef)
     ns3:RailSolutionChangedInfo(RailPricingSolution: ns3:RailPricingSolution, ReasonCode: ns3:ReasonCode)
     ns3:RailSpecificSeatAssignment(CoachLabel: xsd:string, PlaceLabel: xsd:string, Assignment: xsd:string, RailSegmentRef: ns2:typeRef, BookingTravelerRef: ns2:typeRef)
     ns3:RailSupplier(Code: ns2:typeSupplierCode)
     ns3:RailTicketInfo(RailJourneyRef: ns3:RailJourneyRef[], TicketAdvisory: ns3:TicketAdvisory[], Number: ns3:Number, IssueLocation: ns3:IssueLocation, TicketStatus: ns2:StringLength1to255, TicketFormType: ns3:TicketFormType, TrafficType: ns2:StringLength1to255, IssuedDate: xsd:dateTime, TicketType: ns2:StringLength1to255, BookingTravelerRef: ns2:typeRef)
     ns3:SearchRailLeg(SearchOrigin: ns2:typeSearchLocation[], SearchDestination: ns2:typeSearchLocation[], RailSegmentList: ns3:RailSegmentList, ({SearchDepTime: ns2:typeFlexibleTimeSpec[]} | {SearchArvTime: ns2:typeTimeSpec[]}), RailLegModifiers: ns3:RailLegModifiers)
     ns3:TicketAdvisory(ns2:StringLength1to500, Key: ns2:typeRef, LanguageCode: xsd:language)
     ns0:SessionContext(({SessTok: {id: xsd:string}} | {SessProp: {nm: xsd:string, val: xsd:string}[]}))
     

Global types:
     xsd:anyType
     ns1:AirBaseReq(BillingPointOfSaleInfo: ns2:BillingPointOfSaleInfo, AgentIDOverride: ns2:AgentIDOverride[], TerminalSessionInfo: xsd:string, OverridePCC: ns2:OverridePCC, TraceId: xsd:string, TokenId: xsd:string, AuthorizedBy: xsd:string, TargetBranch: ns2:typeBranchCode, OverrideLogging: ns2:typeLoggingLevel, LanguageCode: xsd:language, RetrieveProviderReservationDetails: xsd:boolean)
     ns1:AirSearchReq(BillingPointOfSaleInfo: ns2:BillingPointOfSaleInfo, AgentIDOverride: ns2:AgentIDOverride[], TerminalSessionInfo: xsd:string, OverridePCC: ns2:OverridePCC, NextResultReference: ns2:NextResultReference[], PointOfCommencement: ns2:PointOfCommencement, ({SearchAirLeg: ns1:SearchAirLeg[]} | {SearchSpecificAirSegment: ns1:SearchSpecificAirSegment[]}), AirSearchModifiers: ns1:AirSearchModifiers, JourneyData: ns1:JourneyData, TraceId: xsd:string, TokenId: xsd:string, AuthorizedBy: xsd:string, TargetBranch: ns2:typeBranchCode, OverrideLogging: ns2:typeLoggingLevel, LanguageCode: xsd:language, RetrieveProviderReservationDetails: xsd:boolean)
     ns1:AirSearchRsp(ResponseMessage: ns2:ResponseMessage[], NextResultReference: ns2:NextResultReference[], FlightDetailsList: ns1:FlightDetailsList, AirSegmentList: ns1:AirSegmentList, FareInfoList: ns1:FareInfoList, FareRemarkList: ns1:FareRemarkList, AirItinerarySolution: ns1:AirItinerarySolution[], HostTokenList: ns1:HostTokenList, APISRequirementsList: ns1:APISRequirementsList, FareNoteList: ns1:FareNoteList, ExpertSolutionList: ns1:ExpertSolutionList, RouteList: ns1:RouteList, AlternateRouteList: ns1:AlternateRouteList, AlternateLocationDistanceList: ns1:AlternateLocationDistanceList, FareInfoMessage: ns1:FareInfoMessage[], ({AirPricingSolution: ns1:AirPricingSolution[]} | {AirPricePointList: ns1:AirPricePointList}), RailSegmentList: ns3:RailSegmentList, RailJourneyList: ns3:RailJourneyList, RailFareNoteList: ns3:RailFareNoteList, RailFareIDList: ns3:RailFareIDList, RailFareList: ns3:RailFareList, RailPricingSolution: ns3:RailPricingSolution[], TraceId: xsd:string, TransactionId: xsd:string, ResponseTime: xsd:integer, CommandHistory: xsd:string, DistanceUnits: ns2:typeDistance)
     ns1:BaseAirExchangeQuoteReq(BillingPointOfSaleInfo: ns2:BillingPointOfSaleInfo, AgentIDOverride: ns2:AgentIDOverride[], TerminalSessionInfo: xsd:string, TicketNumber: ns2:StringLength1to13[], ProviderReservationInfo: {ProviderCode: ns2:typeProviderCode, ProviderLocatorCode: ns2:typeProviderLocatorCode}, AirPricingSolution: ns1:AirPricingSolution[], AirExchangeModifiers: ns1:AirExchangeModifiers, HostToken: ns2:HostToken[], OptionalServices: ns1:OptionalServices, FormOfPayment: ns2:FormOfPayment[], RepricingModifiers: ns1:RepricingModifiers, OriginalItineraryDetails: ns1:OriginalItineraryDetails, PCC: ns1:PCC, TraceId: xsd:string, TokenId: xsd:string, AuthorizedBy: xsd:string, TargetBranch: ns2:typeBranchCode, OverrideLogging: ns2:typeLoggingLevel, LanguageCode: xsd:language, FareRuleType: ns1:typeFareRuleType)
     ns1:BaseAirPriceReq(BillingPointOfSaleInfo: ns2:BillingPointOfSaleInfo, AgentIDOverride: ns2:AgentIDOverride[], TerminalSessionInfo: xsd:string, AirItinerary: ns1:AirItinerary, AirPricingModifiers: ns1:AirPricingModifiers, SearchPassenger: ns2:SearchPassenger[], AirPricingCommand: ns1:AirPricingCommand[], AirReservationLocatorCode: ns1:AirReservationLocatorCode, OptionalServices: ns1:OptionalServices, FormOfPayment: ns2:FormOfPayment[], PCC: ns1:PCC, SSR: ns2:SSR[], TraceId: xsd:string, TokenId: xsd:string, AuthorizedBy: xsd:string, TargetBranch: ns2:typeBranchCode, OverrideLogging: ns2:typeLoggingLevel, LanguageCode: xsd:language, CheckOBFees: xsd:string, FareRuleType: ns1:typeFareRuleType, SupplierCode: ns2:typeSupplierCode, TicketDate: xsd:date, CheckFlightDetails: xsd:boolean, ReturnMM: xsd:boolean, NSCC: ns1:NSCC, SplitPricing: xsd:boolean)
     ns1:BaseAirPriceRsp(ResponseMessage: ns2:ResponseMessage[], AirItinerary: ns1:AirItinerary, AirPriceResult: ns1:AirPriceResult[], TraceId: xsd:string, TransactionId: xsd:string, ResponseTime: xsd:integer, CommandHistory: xsd:string)
     ns1:BaseAirSearchReq(BillingPointOfSaleInfo: ns2:BillingPointOfSaleInfo, AgentIDOverride: ns2:AgentIDOverride[], TerminalSessionInfo: xsd:string, NextResultReference: ns2:NextResultReference[], ({SearchAirLeg: ns1:SearchAirLeg[]} | {SearchSpecificAirSegment: ns1:SearchSpecificAirSegment[]}), AirSearchModifiers: ns1:AirSearchModifiers, SplitTicketingSearch: ns1:SplitTicketingSearch, JourneyData: ns1:JourneyData, TraceId: xsd:string, TokenId: xsd:string, AuthorizedBy: xsd:string, TargetBranch: ns2:typeBranchCode, OverrideLogging: ns2:typeLoggingLevel, LanguageCode: xsd:language)
     ns1:BaseAvailabilitySearchRsp(ResponseMessage: ns2:ResponseMessage[], NextResultReference: ns2:NextResultReference[], FlightDetailsList: ns1:FlightDetailsList, AirSegmentList: ns1:AirSegmentList, FareInfoList: ns1:FareInfoList, FareRemarkList: ns1:FareRemarkList, AirItinerarySolution: ns1:AirItinerarySolution[], HostTokenList: ns1:HostTokenList, APISRequirementsList: ns1:APISRequirementsList, TraceId: xsd:string, TransactionId: xsd:string, ResponseTime: xsd:integer, CommandHistory: xsd:string, DistanceUnits: ns2:typeDistance)
     ns1:BaseBaggageAllowanceInfo(URLInfo: ns1:URLInfo[], TextInfo: ns1:TextInfo[], Origin: ns2:typeIATACode, Destination: ns2:typeIATACode, Carrier: ns2:typeCarrier)
     ns1:BaseLowFareSearchReq(BillingPointOfSaleInfo: ns2:BillingPointOfSaleInfo, AgentIDOverride: ns2:AgentIDOverride[], TerminalSessionInfo: xsd:string, NextResultReference: ns2:NextResultReference[], ({SearchAirLeg: ns1:SearchAirLeg[]} | {SearchSpecificAirSegment: ns1:SearchSpecificAirSegment[]}), AirSearchModifiers: ns1:AirSearchModifiers, SplitTicketingSearch: ns1:SplitTicketingSearch, JourneyData: ns1:JourneyData, SearchPassenger: ns2:SearchPassenger[], AirPricingModifiers: ns1:AirPricingModifiers, Enumeration: ns1:Enumeration, AirExchangeModifiers: ns1:AirExchangeModifiers, FlexExploreModifiers: ns1:FlexExploreModifiers, PCC: ns1:PCC, FareRulesFilterCategory: ns1:FareRulesFilterCategory, FormOfPayment: ns2:FormOfPayment[], TraceId: xsd:string, TokenId: xsd:string, AuthorizedBy: xsd:string, TargetBranch: ns2:typeBranchCode, OverrideLogging: ns2:typeLoggingLevel, LanguageCode: xsd:language, EnablePointToPointSearch: xsd:boolean, EnablePointToPointAlternates: xsd:boolean, MaxNumberOfExpertSolutions: xsd:integer, SolutionResult: xsd:boolean, PreferCompleteItinerary: xsd:boolean, MetaOptionIdentifier: ns1:MetaOptionIdentifier, ReturnUpsellFare: xsd:boolean, IncludeFareInfoMessages: xsd:boolean, ReturnBrandedFares: xsd:boolean, MultiGDSSearch: xsd:boolean, ReturnMM: xsd:boolean, CheckOBFees: xsd:string, NSCC: ns1:NSCC)
     ns1:MaxLayoverDurationRangeType
     ns1:MaxLayoverDurationType(Domestic: ns1:MaxLayoverDurationRangeType, Gateway: ns1:MaxLayoverDurationRangeType, International: ns1:MaxLayoverDurationRangeType)
     ns1:PriceChangeType(xsd:string, Amount: xsd:string, Carrier: xsd:string, SegmentRef: xsd:string)
     ns1:typeATPCOGlobalIndicator
     ns1:typeAirReservationWithFOP(AccountingRemark: ns2:AccountingRemark[], GeneralRemark: ns2:GeneralRemark[], Restriction: ns2:Restriction[], PassiveInfo: ns2:PassiveInfo, OptionalServices: ns1:OptionalServices, SupplierLocator: ns2:SupplierLocator[], ThirdPartyInformation: ns2:ThirdPartyInformation[], DocumentInfo: ns1:DocumentInfo, BookingTravelerRef: ns2:BookingTravelerRef[], ProviderReservationInfoRef: ns2:ProviderReservationInfoRef[], AirSegment: ns1:typeBaseAirSegment[], AirPricingInfo: ns1:AirPricingInfo[], Payment: ns2:Payment[], CreditCardAuth: ns2:CreditCardAuth[], FareNote: ns1:FareNote[], FeeInfo: ns2:typeFeeInfo[], TaxInfo: ns1:typeTaxInfoWithPaymentRef[], TicketingModifiers: ns1:TicketingModifiers[], AssociatedRemark: ns1:AssociatedRemark[], PocketItineraryRemark: ns1:PocketItineraryRemark[], AirExchangeBundleTotal: ns1:AirExchangeBundleTotal, AirExchangeBundle: ns1:AirExchangeBundle[], FormOfPayment: ns2:FormOfPayment[], LocatorCode: ns2:typeLocatorCode, CreateDate: xsd:string, ModifiedDate: xsd:string, CustomerNumber: xsd:string)
     ns1:typeAlliance
     ns1:typeAnchorFlightData(AirlineCode: ns2:typeCarrier, FlightNumber: ns2:typeFlightNumber, ConnectionIndicator: xsd:boolean)
     ns1:typeApplicableSegment(Key: ns2:typeRef, AirItineraryDetailsRef: ns2:typeRef, BookingCounts: xsd:string)
     ns1:typeAssessIndicator
     ns1:typeAvailabilitySource
     ns1:typeBackOffice
     ns1:typeBaseAirReservation(AccountingRemark: ns2:AccountingRemark[], GeneralRemark: ns2:GeneralRemark[], Restriction: ns2:Restriction[], PassiveInfo: ns2:PassiveInfo, OptionalServices: ns1:OptionalServices, SupplierLocator: ns2:SupplierLocator[], ThirdPartyInformation: ns2:ThirdPartyInformation[], DocumentInfo: ns1:DocumentInfo, BookingTravelerRef: ns2:BookingTravelerRef[], ProviderReservationInfoRef: ns2:ProviderReservationInfoRef[], AirSegment: ns1:typeBaseAirSegment[], AirPricingInfo: ns1:AirPricingInfo[], Payment: ns2:Payment[], CreditCardAuth: ns2:CreditCardAuth[], FareNote: ns1:FareNote[], FeeInfo: ns2:typeFeeInfo[], TaxInfo: ns1:typeTaxInfoWithPaymentRef[], TicketingModifiers: ns1:TicketingModifiers[], AssociatedRemark: ns1:AssociatedRemark[], PocketItineraryRemark: ns1:PocketItineraryRemark[], AirExchangeBundleTotal: ns1:AirExchangeBundleTotal, AirExchangeBundle: ns1:AirExchangeBundle[], LocatorCode: ns2:typeLocatorCode, CreateDate: xsd:string, ModifiedDate: xsd:string, CustomerNumber: xsd:string)
     ns1:typeBaseAirSegment(SegmentRemark: ns2:SegmentRemark[], SponsoredFltInfo: ns1:SponsoredFltInfo, CodeshareInfo: ns1:CodeshareInfo, AirAvailInfo: ns1:AirAvailInfo[], FlightDetails: ns1:FlightDetails[], FlightDetailsRef: ns1:FlightDetailsRef[], AlternateLocationDistanceRef: ns1:AlternateLocationDistanceRef[], Connection: ns1:Connection, SellMessage: xsd:string[], RailCoachDetails: ns1:RailCoachDetails[], Key: ns2:typeRef, Status: xsd:string, Passive: xsd:boolean, TravelOrder: xsd:integer, ProviderSegmentOrder: ns2:ProviderSegmentOrder, ElStat: ns2:typeElementStatus, KeyOverride: xsd:boolean, OpenSegment: xsd:boolean, Group: xsd:int, Carrier: ns2:typeCarrier, CabinClass: xsd:string, FlightNumber: ns2:typeFlightNumber, Origin: ns2:typeIATACode, Destination: ns2:typeIATACode, DepartureTime: xsd:string, ArrivalTime: xsd:string, FlightTime: xsd:integer, TravelTime: xsd:integer, Distance: xsd:integer, ProviderCode: ns2:typeProviderCode, SupplierCode: ns2:typeSupplierCode, ParticipantLevel: xsd:string, LinkAvailability: xsd:boolean, PolledAvailabilityOption: xsd:string, AvailabilityDisplayType: xsd:string, ClassOfService: ns2:typeClassOfService, ETicketability: ns1:typeEticketability, Equipment: ns1:typeEquipment, MarriageGroup: xsd:int, NumberOfStops: xsd:int, Seamless: xsd:boolean, ChangeOfPlane: xsd:boolean, GuaranteedPaymentCarrier: xsd:string, HostTokenRef: xsd:string, ProviderReservationInfoRef: ns2:typeRef, PassiveProviderReservationInfoRef: ns2:typeRef, OptionalServicesIndicator: xsd:boolean, AvailabilitySource: ns1:typeAvailabilitySource, APISRequirementsRef: xsd:string, BlackListed: xsd:boolean, OperationalStatus: xsd:string, NumberInParty: ns1:NumberInParty, RailCoachNumber: ns1:RailCoachNumber, BookingDate: xsd:date, FlownSegment: xsd:boolean, ScheduleChange: xsd:boolean, BrandIndicator: xsd:string)
     ns1:typeBillingDetailsDataType
     ns1:typeBillingDetailsName
     ns1:typeBooking
     ns1:typeBrandId
     ns1:typeBulkTicketModifierType(SuppressOnFareCalc: xsd:boolean)
     ns1:typeCarCode
     ns1:typeCarrierCode
     ns1:typeConnectionIndicator
     ns1:typeCouponStatus
     ns1:typeDaysOfOperation(Mon: xsd:boolean, Tue: xsd:boolean, Wed: xsd:boolean, Thu: xsd:boolean, Fri: xsd:boolean, Sat: xsd:boolean, Sun: xsd:boolean)
     ns1:typeDefaultBrandDetail(Text: ns1:typeTextElement[], ImageLocation: ns1:ImageLocation[], ApplicableSegment: ns1:typeApplicableSegment[], BrandID: ns1:typeBrandId)
     ns1:typeDestinationCode
     ns1:typeDisplayCategory
     ns1:typeDiversity
     ns1:typeEMDNumber
     ns1:typeEquipment
     ns1:typeEticketability
     ns1:typeFacility
     ns1:typeFailureInfo(Code: xsd:integer, Message: xsd:string)
     ns1:typeFareBreak
     ns1:typeFareDirectionality
     ns1:typeFareDiscount
     ns1:typeFareGuarantee
     ns1:typeFarePenalty(Amount: ns2:typeMoney, Percentage: ns2:typePercentageWithDecimal)
     ns1:typeFareRestrictionType
     ns1:typeFareRuleCategoryCode
     ns1:typeFareRuleFailureInfoReason
     ns1:typeFareRuleType
     ns1:typeFareStatusCode
     ns1:typeFareTripType
     ns1:typeFareTypeCode
     ns1:typeFaresIndicator
     ns1:typeFeeApplication
     ns1:typeIgnoreStopOver
     ns1:typeInventoryRequest
     ns1:typeItinerary
     ns1:typeItineraryOption
     ns1:typeLowFareSearchId
     ns1:typeMaxJourneyTime
     ns1:typeMealService
     ns1:typeMileOrRouteBasedFare
     ns1:typeNativeSearchModifier(xsd:string, ProviderCode: ns2:typeProviderCode)
     ns1:typeNonAirReservationRef(LocatorCode: ns2:typeLocatorCode)
     ns1:typeNumberOfPassengers
     ns1:typeOverrideOption
     ns1:typePassengerTicketNumber
     ns1:typePosition
     ns1:typePricingMethod
     ns1:typePrivateFare
     ns1:typePurposeCode
     ns1:typeRefundabilityValue
     ns1:typeReportingType
     ns1:typeRestrictionLengthOfStay(Length: xsd:integer, StayUnit: ns1:typeStayUnit, StayDate: xsd:date, MoreRulesPresent: xsd:boolean)
     ns1:typeRowLocation
     ns1:typeSeatAvailability
     ns1:typeSegmentRef(Key: ns2:typeRef)
     ns1:typeStayUnit
     ns1:typeSubCode
     ns1:typeTCRNumber
     ns1:typeTCRStatus
     ns1:typeTaxInfoWithPaymentRef(TaxDetail: ns2:TaxDetail[], IncludedInBase: ns2:IncludedInBase, PaymentRef: ns1:PaymentRef[], Key: ns2:typeRef, Category: xsd:string, CarrierDefinedCategory: xsd:string, SegmentRef: ns2:typeRef, FlightDetailsRef: ns2:typeRef, CouponRef: ns2:typeRef, Amount: ns2:typeMoney, OriginAirport: ns2:typeAirport, DestinationAirport: ns2:typeAirport, CountryCode: xsd:string, FareInfoRef: ns2:typeRef, TaxExempted: xsd:boolean, ProviderCode: ns2:typeProviderCode, SupplierCode: ns2:typeSupplierCode, Text: ns2:StringLength1to128)
     ns1:typeTextElement(xsd:string, Type: xsd:string, LanguageCode: xsd:language)
     ns1:typeTicketDesignator
     ns1:typeTicketFailureInfo(({TicketNumber: ns2:StringLength1to13, Name: ns2:Name} | {TCRNumber: ns1:typeTCRNumber}), BookingTravelerRef: ns2:typeRef[], Code: xsd:integer, Message: xsd:string)
     ns1:typeTicketModifierAccountingType(Value: xsd:string)
     ns1:typeTicketModifierAmountType(Amount: ns2:typeMoney)
     ns1:typeTicketModifierPercentType(Percent: ns2:typePercentageWithDecimal)
     ns1:typeTicketModifierValueType(Value: xsd:string, NetFareValue: xsd:boolean)
     ns1:typeTicketingModifiersRef(AirPricingInfoRef: ns1:AirPricingInfoRef[], Key: ns2:typeRef)
     ns1:typeTourCode
     ns1:typeTripType
     ns1:typeUnitOfMeasure(Value: xsd:float, Unit: xsd:string)
     ns1:typeUnitWeight
     ns1:typeValueCode
     ns1:typeVarianceIndicator
     ns1:typeVarianceType
     ns1:typeWeight(Value: xsd:integer, Unit: ns1:typeUnitWeight)
     ns2:BaseAsyncProviderSpecificResponse(ProviderCode: ns2:typeProviderCode, MoreResults: xsd:boolean)
     ns2:BaseCoreReq(BillingPointOfSaleInfo: ns2:BillingPointOfSaleInfo, AgentIDOverride: ns2:AgentIDOverride[], TerminalSessionInfo: xsd:string, TraceId: xsd:string, TokenId: xsd:string, AuthorizedBy: xsd:string, TargetBranch: ns2:typeBranchCode, OverrideLogging: ns2:typeLoggingLevel, LanguageCode: xsd:language)
     ns2:BaseCoreSearchReq(BillingPointOfSaleInfo: ns2:BillingPointOfSaleInfo, AgentIDOverride: ns2:AgentIDOverride[], TerminalSessionInfo: xsd:string, NextResultReference: ns2:NextResultReference[], TraceId: xsd:string, TokenId: xsd:string, AuthorizedBy: xsd:string, TargetBranch: ns2:typeBranchCode, OverrideLogging: ns2:typeLoggingLevel, LanguageCode: xsd:language)
     ns2:BaseCreateReservationReq(BillingPointOfSaleInfo: ns2:BillingPointOfSaleInfo, AgentIDOverride: ns2:AgentIDOverride[], TerminalSessionInfo: xsd:string, OverridePCC: ns2:OverridePCC, LinkedUniversalRecord: ns2:LinkedUniversalRecord[], BookingTraveler: ns2:BookingTraveler[], OSI: ns2:OSI[], AccountingRemark: ns2:AccountingRemark[], GeneralRemark: ns2:GeneralRemark[], XMLRemark: ns2:XMLRemark[], UnassociatedRemark: ns2:UnassociatedRemark[], Postscript: ns2:Postscript, PassiveInfo: ns2:PassiveInfo, ContinuityCheckOverride: ns2:ContinuityCheckOverride, AgencyContactInfo: ns2:AgencyContactInfo, CustomerID: ns2:CustomerID, FileFinishingInfo: ns2:FileFinishingInfo, CommissionRemark: ns2:CommissionRemark, ConsolidatorRemark: ns2:ConsolidatorRemark, InvoiceRemark: ns2:InvoiceRemark[], SSR: ns2:SSR[], EmailNotification: ns2:EmailNotification, QueuePlace: ns2:QueuePlace, TraceId: xsd:string, TokenId: xsd:string, AuthorizedBy: xsd:string, TargetBranch: ns2:typeBranchCode, OverrideLogging: ns2:typeLoggingLevel, LanguageCode: xsd:language, RetrieveProviderReservationDetails: xsd:boolean, RuleName: ns2:RuleName, UniversalRecordLocatorCode: ns2:typeLocatorCode, ProviderLocatorCode: ns2:typeLocatorCode, ProviderCode: xsd:string, CustomerNumber: xsd:string, Version: xsd:integer)
     ns2:BaseCreateWithFormOfPaymentReq(BillingPointOfSaleInfo: ns2:BillingPointOfSaleInfo, AgentIDOverride: ns2:AgentIDOverride[], TerminalSessionInfo: xsd:string, OverridePCC: ns2:OverridePCC, LinkedUniversalRecord: ns2:LinkedUniversalRecord[], BookingTraveler: ns2:BookingTraveler[], OSI: ns2:OSI[], AccountingRemark: ns2:AccountingRemark[], GeneralRemark: ns2:GeneralRemark[], XMLRemark: ns2:XMLRemark[], UnassociatedRemark: ns2:UnassociatedRemark[], Postscript: ns2:Postscript, PassiveInfo: ns2:PassiveInfo, ContinuityCheckOverride: ns2:ContinuityCheckOverride, AgencyContactInfo: ns2:AgencyContactInfo, CustomerID: ns2:CustomerID, FileFinishingInfo: ns2:FileFinishingInfo, CommissionRemark: ns2:CommissionRemark, ConsolidatorRemark: ns2:ConsolidatorRemark, InvoiceRemark: ns2:InvoiceRemark[], SSR: ns2:SSR[], EmailNotification: ns2:EmailNotification, QueuePlace: ns2:QueuePlace, FormOfPayment: ns2:FormOfPayment[], TraceId: xsd:string, TokenId: xsd:string, AuthorizedBy: xsd:string, TargetBranch: ns2:typeBranchCode, OverrideLogging: ns2:typeLoggingLevel, LanguageCode: xsd:language, RetrieveProviderReservationDetails: xsd:boolean, RuleName: ns2:RuleName, UniversalRecordLocatorCode: ns2:typeLocatorCode, ProviderLocatorCode: ns2:typeLocatorCode, ProviderCode: xsd:string, CustomerNumber: xsd:string, Version: xsd:integer)
     ns2:BaseReq(BillingPointOfSaleInfo: ns2:BillingPointOfSaleInfo, AgentIDOverride: ns2:AgentIDOverride[], TerminalSessionInfo: xsd:string, OverridePCC: ns2:OverridePCC, TraceId: xsd:string, TokenId: xsd:string, AuthorizedBy: xsd:string, TargetBranch: ns2:typeBranchCode, OverrideLogging: ns2:typeLoggingLevel, LanguageCode: xsd:language, RetrieveProviderReservationDetails: xsd:boolean)
     ns2:BaseReservation(AccountingRemark: ns2:AccountingRemark[], GeneralRemark: ns2:GeneralRemark[], Restriction: ns2:Restriction[], PassiveInfo: ns2:PassiveInfo, LocatorCode: ns2:typeLocatorCode, CreateDate: xsd:string, ModifiedDate: xsd:string, CustomerNumber: xsd:string)
     ns2:BaseRsp(ResponseMessage: ns2:ResponseMessage[], TraceId: xsd:string, TransactionId: xsd:string, ResponseTime: xsd:integer, CommandHistory: xsd:string)
     ns2:BaseSearchReq(BillingPointOfSaleInfo: ns2:BillingPointOfSaleInfo, AgentIDOverride: ns2:AgentIDOverride[], TerminalSessionInfo: xsd:string, OverridePCC: ns2:OverridePCC, NextResultReference: ns2:NextResultReference[], TraceId: xsd:string, TokenId: xsd:string, AuthorizedBy: xsd:string, TargetBranch: ns2:typeBranchCode, OverrideLogging: ns2:typeLoggingLevel, LanguageCode: xsd:language, RetrieveProviderReservationDetails: xsd:boolean)
     ns2:BaseSearchRsp(ResponseMessage: ns2:ResponseMessage[], NextResultReference: ns2:NextResultReference[], TraceId: xsd:string, TransactionId: xsd:string, ResponseTime: xsd:integer, CommandHistory: xsd:string)
     ns2:FormattedTextTextType(xsd:string, Formatted: xsd:boolean, Language: xsd:language, TextFormat: ns2:TextFormat)
     ns2:Location()
     ns2:MCOInformation(PassengerInfo: ns2:PassengerInfo[], MCONumber: xsd:string, Status: xsd:string, MCOType: xsd:string)
     ns2:ModificationType
     ns2:Numeric0to999
     ns2:OptionalServiceApplicabilityType
     ns2:OptionalServiceApplicationLimitType(ApplicableLevel: ns2:OptionalServiceApplicabilityType, ProviderDefinedApplicableLevels: xsd:string, MaximumQuantity: xsd:positiveInteger, MinimumQuantity: xsd:positiveInteger)
     ns2:SeatAssignment(Key: ns2:typeRef, Status: ns2:typeStatusCode, Seat: xsd:string, SeatTypeCode: ns2:typeSeatTypeCode, SegmentRef: ns2:typeRef, FlightDetailsRef: ns2:typeRef, ElStat: ns2:typeElementStatus, KeyOverride: xsd:boolean, RailCoachNumber: xsd:string)
     ns2:Segment(SegmentRemark: ns2:SegmentRemark[], Key: ns2:typeRef, Status: xsd:string, Passive: xsd:boolean, TravelOrder: xsd:integer, ProviderSegmentOrder: ns2:ProviderSegmentOrder, ElStat: ns2:typeElementStatus, KeyOverride: xsd:boolean)
     ns2:ServiceRuleType(ApplicationRules: {RequiredForAllTravelers: xsd:boolean, RequiredForAllSegments: xsd:boolean, RequiredForAllSegmentsInOD: xsd:boolean, UnselectedOptionRequired: xsd:boolean, SecondaryOptionCodeRequired: xsd:boolean}, ApplicationLevel: {ApplicationLimits: {ApplicationLimit: ns2:OptionalServiceApplicationLimitType[]}, ServiceData: ns2:ServiceData[], ApplicableLevels: ns2:OptionalServiceApplicabilityType[], ProviderDefinedApplicableLevels: xsd:string}, ModifyRules: {ModifyRule: {Modification: ns2:ModificationType, AutomaticallyAppliedOnAdd: xsd:boolean, CanDelete: xsd:boolean, CanAdd: xsd:boolean, Refundable: xsd:boolean, ProviderDefinedModificationType: xsd:string}[], SupportedModifications: ns2:ModificationType[], ProviderDefinedModificationType: xsd:string}, SecondaryTypeRules: {SecondaryTypeRule: {ApplicationLimit: ns2:OptionalServiceApplicationLimitType[], SecondaryType: ns2:typeRef}[]}, Remarks: ns2:FormattedTextTextType[], Key: ns2:typeRef)
     ns2:StringLength1
     ns2:StringLength1to10
     ns2:StringLength1to100
     ns2:StringLength1to1000
     ns2:StringLength1to1024
     ns2:StringLength1to116
     ns2:StringLength1to12
     ns2:StringLength1to128
     ns2:StringLength1to13
     ns2:StringLength1to14
     ns2:StringLength1to15
     ns2:StringLength1to16
     ns2:StringLength1to20
     ns2:StringLength1to2000
     ns2:StringLength1to25
     ns2:StringLength1to250
     ns2:StringLength1to255
     ns2:StringLength1to3
     ns2:StringLength1to30
     ns2:StringLength1to32
     ns2:StringLength1to5
     ns2:StringLength1to50
     ns2:StringLength1to500
     ns2:StringLength1to64
     ns2:StringLength1to8
     ns2:StringLength3
     ns2:StringLength6to128
     ns2:URTicketStatus
     ns2:typeAccountID
     ns2:typeAdjustmentTarget
     ns2:typeAdjustmentType
     ns2:typeAgencyHierarchyLongReference(ns2:typeAgencyHierarchyReference, ProfileID: ns2:typeProfileID, ProfileType: ns2:typeAgencyProfileLevel, ProfileVersion: xsd:int, ProfileName: ns2:ProfileName)
     ns2:typeAgencyHierarchyReference(ProfileID: ns2:typeProfileID, ProfileType: ns2:typeAgencyProfileLevel)
     ns2:typeAgencyID
     ns2:typeAgencyPayment(AgencyBillingIdentifier: ns2:AgencyBillingIdentifier, AgencyBillingNumber: ns2:AgencyBillingNumber, AgencyBillingPassword: ns2:AgencyBillingPassword)
     ns2:typeAgencyProfileLevel
     ns2:typeAgentCode
     ns2:typeAgentInfo()
     ns2:typeAirport
     ns2:typeAssociatedRemark(RemarkData: xsd:string, BookingTravelerRef: ns2:typeRef[], ProviderReservationInfoRef: ns2:typeRef, ProviderCode: ns2:typeProviderCode, Key: ns2:typeRef, ElStat: ns2:typeElementStatus, KeyOverride: xsd:boolean)
     ns2:typeAssociatedRemarkWithSegmentRef(RemarkData: xsd:string, BookingTravelerRef: ns2:typeRef[], ProviderReservationInfoRef: ns2:typeRef, ProviderCode: ns2:typeProviderCode, Key: ns2:typeRef, ElStat: ns2:typeElementStatus, KeyOverride: xsd:boolean, SegmentRef: ns2:typeRef)
     ns2:typeBookingTransactionsAllowed(BookingEnabled: xsd:boolean)
     ns2:typeBranchCode
     ns2:typeBranchId
     ns2:typeCardMerchantType
     ns2:typeCardNumber
     ns2:typeCarrier
     ns2:typeCity
     ns2:typeClassOfService
     ns2:typeCommissionLevel
     ns2:typeCommissionModifier
     ns2:typeCommissionType
     ns2:typeCountry
     ns2:typeCreditCardNumber
     ns2:typeCreditCardType(PhoneNumber: ns2:PhoneNumber, BillingAddress: ns2:typeStructuredAddress, Type: ns2:typeCardMerchantType, Number: ns2:typeCreditCardNumber, ExpDate: xsd:gYearMonth, Name: ns2:Name, CVV: ns2:CVV, ApprovalCode: ns2:ApprovalCode, ExtendedPayment: xsd:string, CustomerReference: xsd:string, AcceptanceOverride: xsd:boolean, ThirdPartyPayment: xsd:boolean, BankName: xsd:string, BankCountryCode: ns2:typeCountry, BankStateCode: ns2:typeState, Enett: xsd:boolean)
     ns2:typeCurrency
     ns2:typeDate
     ns2:typeDateRange(StartDate: xsd:date, EndDate: xsd:date)
     ns2:typeDirection
     ns2:typeDiscountNumber
     ns2:typeDistance
     ns2:typeDoorCount
     ns2:typeDurationYearInDays
     ns2:typeElement
     ns2:typeElementStatus
     ns2:typeEmailComment
     ns2:typeEmailType
     ns2:typeEndorsement
     ns2:typeErrorInfo(Code: xsd:string, Service: xsd:string, Type: xsd:string, Description: xsd:string, TransactionId: xsd:string, TraceId: xsd:string, CommandHistory: xsd:string, Auxdata: ns2:Auxdata, StackTrace: xsd:string)
     ns2:typeEventType
     ns2:typeExternalReference
     ns2:typeFareBasisCode
     ns2:typeFareFamily
     ns2:typeFarePull
     ns2:typeFeeInfo(TaxInfoRef: {Key: ns2:typeRef}[], IncludedInBase: ns2:IncludedInBase, BaseAmount: ns2:typeMoney, Description: xsd:string, SubCode: xsd:string, Key: ns2:typeRef, Amount: ns2:typeMoney, Code: xsd:string, FeeToken: xsd:string, PaymentRef: ns2:typeRef, BookingTravelerRef: ns2:typeRef, PassengerTypeCode: ns2:typePTC, Text: ns2:StringLength1to64, ProviderCode: ns2:typeProviderCode, SupplierCode: ns2:typeSupplierCode, ElStat: ns2:typeElementStatus, KeyOverride: xsd:boolean)
     ns2:typeFlexibleTimeSpec(TimeRange: ns2:typeTimeRange, SpecificTime: ns2:typeSpecificTime, SearchExtraDays: {DaysBefore: xsd:int, DaysAfter: xsd:int}, PreferredTime: xsd:string)
     ns2:typeFlightNumber
     ns2:typeFormOfPaymentPNRReference(Key: ns2:typeRef, ProviderReservationLevel: xsd:boolean)
     ns2:typeFormOfRefund
     ns2:typeFreeFormText(xsd:string)
     ns2:typeFuel
     ns2:typeFulfillmentIDType
     ns2:typeFulfillmentType
     ns2:typeGdsAccountingRemark
     ns2:typeGdsRemark
     ns2:typeGender
     ns2:typeGeneralReference(Key: ns2:typeRef)
     ns2:typeGeneralText
     ns2:typeGuaranteeInformation(Type: ns2:Type, AgencyType: ns2:AgencyType, IATANumber: ns2:StringLength1to128)
     ns2:typeHotelChainCode
     ns2:typeHotelCode
     ns2:typeIATA
     ns2:typeIATACode
     ns2:typeImageSize
     ns2:typeIntegerPercentage
     ns2:typeInvoiceRecordCategory
     ns2:typeItineraryCode
     ns2:typeItineraryType
     ns2:typeKeyBasedReference(Key: ns2:typeRef)
     ns2:typeKeyword(SubKey: ns2:typeSubKey[], Text: xsd:string[], Name: ns2:Name, Number: xsd:anyType, Description: xsd:anyType)
     ns2:typeLanguage
     ns2:typeLicenseCode
     ns2:typeLocation(({Airport: ns2:Airport} | {City: ns2:City} | {CityOrAirport: ns2:CityOrAirport}))
     ns2:typeLocatorCode
     ns2:typeLoggingLevel
     ns2:typeMCOFeeType
     ns2:typeMCOStatus
     ns2:typeMCOType
     ns2:typeMaxResults
     ns2:typeMaxResults1to100
     ns2:typeMerchandisingService
     ns2:typeMoney
     ns2:typeMoreResults
     ns2:typeNonAirReservationRef(LocatorCode: ns2:typeLocatorCode)
     ns2:typeNonBlanks
     ns2:typeOTACode
     ns2:typeOTAKeyword(SubKey: ns2:typeOTASubKey[], Text: xsd:string[], Name: ns2:Name, Number: xsd:anyType, Description: xsd:anyType)
     ns2:typeOTASubKey(Text: xsd:string[], Name: ns2:typeOTACode, Description: xsd:string)
     ns2:typeOtherImageSize
     ns2:typePCC
     ns2:typePTC
     ns2:typePassengerType(Name: ns2:Name, LoyaltyCard: ns2:LoyaltyCard[], DiscountCard: ns2:DiscountCard[], PersonalGeography: ns2:PersonalGeography, Code: ns2:typePTC, Age: xsd:integer, DOB: xsd:date, Gender: ns2:typeGender, PricePTCOnly: xsd:boolean, BookingTravelerRef: xsd:string, AccompaniedPassenger: xsd:boolean, ResidencyType: ns2:typeResidency)
     ns2:typePaymentCard(PhoneNumber: ns2:PhoneNumber, BillingAddress: ns2:typeStructuredAddress, Type: ns2:typeCardMerchantType, Number: ns2:typeCreditCardNumber, ExpDate: xsd:gYearMonth, Name: ns2:Name, CVV: ns2:CVV, ApprovalCode: ns2:ApprovalCode)
     ns2:typePercentageWithDecimal
     ns2:typePolicy
     ns2:typePolicyCode
     ns2:typePolicyCodesList(PolicyCode: ns2:PolicyCode[], MinPolicyCode: ns2:MinPolicyCode[], MaxPolicyCode: ns2:MaxPolicyCode[])
     ns2:typePolicyReference
     ns2:typePriceClassOfService
     ns2:typePricingType
     ns2:typePriorityCode
     ns2:typeProduct
     ns2:typeProfileApplicability
     ns2:typeProfileEntityStatus
     ns2:typeProfileEntityStatusWithDelete
     ns2:typeProfileID
     ns2:typeProfileLevel
     ns2:typeProfileLevelWithCredential
     ns2:typeProfileLevelWithSystem
     ns2:typeProfileRef(ProfileEntityID: xsd:string, ProfileLevel: ns2:typeProfileLevel)
     ns2:typeProfileType
     ns2:typeProviderCode
     ns2:typeProviderLocatorCode
     ns2:typeProviderReservationDetail(ProviderCode: ns2:typeProviderCode, ProviderLocatorCode: ns2:typeProviderLocatorCode)
     ns2:typeProviderReservationSpecificInfo(OperatedBy: ns2:OperatedBy[], ProviderReservationInfoRef: ns2:ProviderReservationInfoRef, ProviderReservationLevel: xsd:boolean, ReservationLevel: xsd:boolean)
     ns2:typeProviderToken
     ns2:typeProvisioningCode
     ns2:typePurchaseWindow
     ns2:typeQueueModifyAction
     ns2:typeRailCabin
     ns2:typeRailClass
     ns2:typeRailLocationCode
     ns2:typeRailSearchType
     ns2:typeRateCategory
     ns2:typeRateCode
     ns2:typeRateDescription(Text: ns2:Text[], Name: xsd:string)
     ns2:typeRateGuarantee
     ns2:typeRatePlanType
     ns2:typeRateTimePeriod
     ns2:typeRecordStatus
     ns2:typeRef
     ns2:typeReferencePoint
     ns2:typeRemark(xsd:string, ProviderReservationInfoRef: ns2:typeRef, ProviderCode: ns2:typeProviderCode)
     ns2:typeRemarkWithTravelerRef(RemarkData: xsd:string, BookingTravelerRef: ns2:typeRef[], ProviderReservationInfoRef: ns2:typeRef, ProviderCode: ns2:typeProviderCode)
     ns2:typeReqSeat
     ns2:typeReserveRequirement
     ns2:typeResidency
     ns2:typeResultMessage(xsd:string, Code: xsd:integer, Type: ns2:Type)
     ns2:typeRoleId
     ns2:typeSSRCode
     ns2:typeSSRFreeText
     ns2:typeSearchLocation(({Airport: ns2:Airport} | {City: ns2:City} | {CityOrAirport: ns2:CityOrAirport} | {CoordinateLocation: ns2:CoordinateLocation} | {RailLocation: ns2:RailLocation}), Distance: ns2:Distance)
     ns2:typeSearchTimeSpec()
     ns2:typeSeatTypeCode
     ns2:typeSegmentRef(Key: ns2:typeRef)
     ns2:typeSource
     ns2:typeSpecificTime(Time: xsd:string)
     ns2:typeStartFromResult
     ns2:typeState
     ns2:typeStatus
     ns2:typeStatusCode
     ns2:typeStructuredAddress(AddressName: ns2:AddressName, Street: ns2:Street[], City: ns2:City, State: ns2:State, PostalCode: ns2:PostalCode, Country: ns2:Country, ProviderReservationInfoRef: ns2:ProviderReservationInfoRef[], Key: ns2:typeRef, ElStat: ns2:typeElementStatus, KeyOverride: xsd:boolean)
     ns2:typeSubKey(Text: xsd:string[], Name: xsd:string, Description: xsd:string)
     ns2:typeSupplierCode
     ns2:typeTax(Amount: ns2:typeMoney, Code: xsd:string)
     ns2:typeTaxInfo(TaxDetail: ns2:TaxDetail[], IncludedInBase: ns2:IncludedInBase, Key: ns2:typeRef, Category: xsd:string, CarrierDefinedCategory: xsd:string, SegmentRef: ns2:typeRef, FlightDetailsRef: ns2:typeRef, CouponRef: ns2:typeRef, Amount: ns2:typeMoney, OriginAirport: ns2:typeAirport, DestinationAirport: ns2:typeAirport, CountryCode: xsd:string, FareInfoRef: ns2:typeRef, TaxExempted: xsd:boolean, ProviderCode: ns2:typeProviderCode, SupplierCode: ns2:typeSupplierCode, Text: ns2:StringLength1to128)
     ns2:typeThirdPartySupplier
     ns2:typeTicketNumber
     ns2:typeTicketStatus
     ns2:typeTimeRange(EarliestTime: xsd:string, LatestTime: xsd:string)
     ns2:typeTimeSpec(({TimeRange: ns2:typeTimeRange} | {SpecificTime: ns2:typeSpecificTime}), PreferredTime: xsd:string)
     ns2:typeTransactionsAllowed(ns2:typeBookingTransactionsAllowed, BookingEnabled: xsd:boolean, ShoppingEnabled: xsd:boolean, PricingEnabled: xsd:boolean)
     ns2:typeTravelerID
     ns2:typeTravelerLastName
     ns2:typeTrinary
     ns2:typeTypeCode
     ns2:typeURVersion
     ns2:typeVehicleCategory
     ns2:typeVehicleClass
     ns2:typeVehicleLocation
     ns2:typeVehicleTransmission
     ns2:typeVendorLocation(ProviderCode: ns2:typeProviderCode, VendorCode: ns2:typeSupplierCode, PreferredOption: xsd:boolean, VendorLocationID: ns2:VendorLocationID, Key: ns2:typeRef, MoreRatesToken: ns2:MoreRatesToken)
     ns2:typeVersion
     ns2:typeVoucherInformation(VoucherType: ns2:typeVoucherType, Amount: ns2:typeMoney, ConfirmationNumber: xsd:string, AccountName: xsd:string, Number: ns2:StringLength1to16)
     ns2:typeVoucherType
     ns2:typeWildcard
     ns2:typeWildcardMax50
     ns3:typeCoachClassType
     ns3:typeJourneyDirection
     ns3:typeRailDirection
     ns3:typeRailPricingSolution(({RailJourney: ns3:RailJourney[]} | {RailJourneyRef: ns3:RailJourneyRef[]}), RailPricingInfo: ns3:RailPricingInfo[], Key: ns2:typeRef, OfferId: xsd:integer, TotalPrice: ns2:typeMoney, BasePrice: ns2:typeMoney, ApproximateTotalPrice: ns2:typeMoney, ApproximateBasePrice: ns2:typeMoney, EquivalentBasePrice: ns2:typeMoney, Taxes: ns2:typeMoney, Fees: ns2:typeMoney, Services: ns2:typeMoney, ApproximateTaxes: ns2:typeMoney, ApproximateFees: ns2:typeMoney, ProviderCode: ns2:typeProviderCode, SupplierCode: ns2:typeSupplierCode, HostTokenRef: ns2:typeRef, Reference: xsd:string)
     ns3:typeRailSegmentInfo
     ns3:typeRailTicketStatus
     ns3:typeResponseType
     ns3:typeTrainNumber
     ns3:typeTrainType
     ns3:typeTransportMode
     xsd:ENTITIES
     xsd:ENTITY
     xsd:ID
     xsd:IDREF
     xsd:IDREFS
     xsd:NCName
     xsd:NMTOKEN
     xsd:NMTOKENS
     xsd:NOTATION
     xsd:Name
     xsd:QName
     xsd:anySimpleType
     xsd:anyURI
     xsd:base64Binary
     xsd:boolean
     xsd:byte
     xsd:date
     xsd:dateTime
     xsd:decimal
     xsd:double
     xsd:duration
     xsd:float
     xsd:gDay
     xsd:gMonth
     xsd:gMonthDay
     xsd:gYear
     xsd:gYearMonth
     xsd:hexBinary
     xsd:int
     xsd:integer
     xsd:language
     xsd:long
     xsd:negativeInteger
     xsd:nonNegativeInteger
     xsd:nonPositiveInteger
     xsd:normalizedString
     xsd:positiveInteger
     xsd:short
     xsd:string
     xsd:time
     xsd:token
     xsd:unsignedByte
     xsd:unsignedInt
     xsd:unsignedLong
     xsd:unsignedShort

Bindings:
     Soap11Binding: {http://www.travelport.com/service/air_v42_0}AirAvailabilitySearchBinding
     Soap11Binding: {http://www.travelport.com/service/air_v42_0}AirExchangeEligibilityBinding
     Soap11Binding: {http://www.travelport.com/service/air_v42_0}AirExchangeProcessBinding
     Soap11Binding: {http://www.travelport.com/service/air_v42_0}AirExchangeQuoteBinding
     Soap11Binding: {http://www.travelport.com/service/air_v42_0}AirExchangeTicketingBinding
     Soap11Binding: {http://www.travelport.com/service/air_v42_0}AirFareDisplayBinding
     Soap11Binding: {http://www.travelport.com/service/air_v42_0}AirFareRulesBinding
     Soap11Binding: {http://www.travelport.com/service/air_v42_0}AirLowFareSearchAsynchBinding
     Soap11Binding: {http://www.travelport.com/service/air_v42_0}AirLowFareSearchBinding
     Soap11Binding: {http://www.travelport.com/service/air_v42_0}AirMerchandisingDetailsBinding
     Soap11Binding: {http://www.travelport.com/service/air_v42_0}AirMerchandisingOfferAvailabilityBinding
     Soap11Binding: {http://www.travelport.com/service/air_v42_0}AirPrePayBinding
     Soap11Binding: {http://www.travelport.com/service/air_v42_0}AirPriceBinding
     Soap11Binding: {http://www.travelport.com/service/air_v42_0}AirRefundQuoteBinding
     Soap11Binding: {http://www.travelport.com/service/air_v42_0}AirRefundTicketBinding
     Soap11Binding: {http://www.travelport.com/service/air_v42_0}AirRepriceSearchBinding
     Soap11Binding: {http://www.travelport.com/service/air_v42_0}AirRetrieveDocumentBinding
     Soap11Binding: {http://www.travelport.com/service/air_v42_0}AirRetrieveLowFareSearchBinding
     Soap11Binding: {http://www.travelport.com/service/air_v42_0}AirScheduleSearchBinding
     Soap11Binding: {http://www.travelport.com/service/air_v42_0}AirTicketingBinding
     Soap11Binding: {http://www.travelport.com/service/air_v42_0}AirUpsellSearchBinding
     Soap11Binding: {http://www.travelport.com/service/air_v42_0}AirVoidDocumentBinding
     Soap11Binding: {http://www.travelport.com/service/air_v42_0}EMDIssuanceBinding
     Soap11Binding: {http://www.travelport.com/service/air_v42_0}EMDRetrieveBinding
     Soap11Binding: {http://www.travelport.com/service/air_v42_0}FlightDetailsBinding
     Soap11Binding: {http://www.travelport.com/service/air_v42_0}FlightInfoBinding
     Soap11Binding: {http://www.travelport.com/service/air_v42_0}FlightTimeTableBinding
     Soap11Binding: {http://www.travelport.com/service/air_v42_0}SeatMapBinding

Service: AirService
     Port: AirRepriceSearchPort (Soap11Binding: {http://www.travelport.com/service/air_v42_0}AirRepriceSearchBinding)
         Operations:
            service(BillingPointOfSaleInfo: ns2:BillingPointOfSaleInfo, AgentIDOverride: ns2:AgentIDOverride[], TerminalSessionInfo: xsd:string, OverridePCC: ns2:OverridePCC, AirReservationLocatorCode: ns1:AirReservationLocatorCode, AirPricingSolution: ns1:AirPricingSolution, TraceId: xsd:string, TokenId: xsd:string, AuthorizedBy: xsd:string, TargetBranch: ns2:typeBranchCode, OverrideLogging: ns2:typeLoggingLevel, LanguageCode: xsd:language, RetrieveProviderReservationDetails: xsd:boolean, FareRuleType: ns1:typeFareRuleType, IgnoreAvailability: xsd:boolean) -> ResponseMessage: ns2:ResponseMessage[], AirPricingSolution: ns1:AirPricingSolution, FareRule: ns1:FareRule[], TraceId: xsd:string, TransactionId: xsd:string, ResponseTime: xsd:integer, CommandHistory: xsd:string

     Port: AirScheduleSearchPort (Soap11Binding: {http://www.travelport.com/service/air_v42_0}AirScheduleSearchBinding)
         Operations:
            service(BillingPointOfSaleInfo: ns2:BillingPointOfSaleInfo, AgentIDOverride: ns2:AgentIDOverride[], TerminalSessionInfo: xsd:string, OverridePCC: ns2:OverridePCC, NextResultReference: ns2:NextResultReference[], PointOfCommencement: ns2:PointOfCommencement, ({SearchAirLeg: ns1:SearchAirLeg[]} | {SearchSpecificAirSegment: ns1:SearchSpecificAirSegment[]}), AirSearchModifiers: ns1:AirSearchModifiers, JourneyData: ns1:JourneyData, TraceId: xsd:string, TokenId: xsd:string, AuthorizedBy: xsd:string, TargetBranch: ns2:typeBranchCode, OverrideLogging: ns2:typeLoggingLevel, LanguageCode: xsd:language, RetrieveProviderReservationDetails: xsd:boolean) -> ResponseMessage: ns2:ResponseMessage[], NextResultReference: ns2:NextResultReference[], FlightDetailsList: ns1:FlightDetailsList, AirSegmentList: ns1:AirSegmentList, FareInfoList: ns1:FareInfoList, FareRemarkList: ns1:FareRemarkList, AirItinerarySolution: ns1:AirItinerarySolution[], HostTokenList: ns1:HostTokenList, APISRequirementsList: ns1:APISRequirementsList, FareNoteList: ns1:FareNoteList, ExpertSolutionList: ns1:ExpertSolutionList, RouteList: ns1:RouteList, AlternateRouteList: ns1:AlternateRouteList, AlternateLocationDistanceList: ns1:AlternateLocationDistanceList, FareInfoMessage: ns1:FareInfoMessage[], ({AirPricingSolution: ns1:AirPricingSolution[]} | {AirPricePointList: ns1:AirPricePointList}), RailSegmentList: ns3:RailSegmentList, RailJourneyList: ns3:RailJourneyList, RailFareNoteList: ns3:RailFareNoteList, RailFareIDList: ns3:RailFareIDList, RailFareList: ns3:RailFareList, RailPricingSolution: ns3:RailPricingSolution[], TraceId: xsd:string, TransactionId: xsd:string, ResponseTime: xsd:integer, CommandHistory: xsd:string, DistanceUnits: ns2:typeDistance

     Port: AirLowFareSearchPort (Soap11Binding: {http://www.travelport.com/service/air_v42_0}AirLowFareSearchBinding)
         Operations:
            service(BillingPointOfSaleInfo: ns2:BillingPointOfSaleInfo, AgentIDOverride: ns2:AgentIDOverride[], TerminalSessionInfo: xsd:string, NextResultReference: ns2:NextResultReference[], ({SearchAirLeg: ns1:SearchAirLeg[]} | {SearchSpecificAirSegment: ns1:SearchSpecificAirSegment[]}), AirSearchModifiers: ns1:AirSearchModifiers, SplitTicketingSearch: ns1:SplitTicketingSearch, JourneyData: ns1:JourneyData, SearchPassenger: ns2:SearchPassenger[], AirPricingModifiers: ns1:AirPricingModifiers, Enumeration: ns1:Enumeration, AirExchangeModifiers: ns1:AirExchangeModifiers, FlexExploreModifiers: ns1:FlexExploreModifiers, PCC: ns1:PCC, FareRulesFilterCategory: ns1:FareRulesFilterCategory, FormOfPayment: ns2:FormOfPayment[], TraceId: xsd:string, TokenId: xsd:string, AuthorizedBy: xsd:string, TargetBranch: ns2:typeBranchCode, OverrideLogging: ns2:typeLoggingLevel, LanguageCode: xsd:language, EnablePointToPointSearch: xsd:boolean, EnablePointToPointAlternates: xsd:boolean, MaxNumberOfExpertSolutions: xsd:integer, SolutionResult: xsd:boolean, PreferCompleteItinerary: xsd:boolean, MetaOptionIdentifier: ns1:MetaOptionIdentifier, ReturnUpsellFare: xsd:boolean, IncludeFareInfoMessages: xsd:boolean, ReturnBrandedFares: xsd:boolean, MultiGDSSearch: xsd:boolean, ReturnMM: xsd:boolean, CheckOBFees: xsd:string, NSCC: ns1:NSCC, PolicyReference: ns2:typePolicyReference, _soapheaders={sessionContext: ns0:SessionContext}) -> ResponseMessage: ns2:ResponseMessage[], NextResultReference: ns2:NextResultReference[], FlightDetailsList: ns1:FlightDetailsList, AirSegmentList: ns1:AirSegmentList, FareInfoList: ns1:FareInfoList, FareRemarkList: ns1:FareRemarkList, AirItinerarySolution: ns1:AirItinerarySolution[], HostTokenList: ns1:HostTokenList, APISRequirementsList: ns1:APISRequirementsList, FareNoteList: ns1:FareNoteList, ExpertSolutionList: ns1:ExpertSolutionList, RouteList: ns1:RouteList, AlternateRouteList: ns1:AlternateRouteList, AlternateLocationDistanceList: ns1:AlternateLocationDistanceList, FareInfoMessage: ns1:FareInfoMessage[], ({AirPricingSolution: ns1:AirPricingSolution[]} | {AirPricePointList: ns1:AirPricePointList}), RailSegmentList: ns3:RailSegmentList, RailJourneyList: ns3:RailJourneyList, RailFareNoteList: ns3:RailFareNoteList, RailFareIDList: ns3:RailFareIDList, RailFareList: ns3:RailFareList, RailPricingSolution: ns3:RailPricingSolution[], BrandList: ns1:BrandList, TraceId: xsd:string, TransactionId: xsd:string, ResponseTime: xsd:integer, CommandHistory: xsd:string, DistanceUnits: ns2:typeDistance, CurrencyType: ns2:typeCurrency

     Port: AirLowFareSearchAsynchPort (Soap11Binding: {http://www.travelport.com/service/air_v42_0}AirLowFareSearchAsynchBinding)
         Operations:
            service(BillingPointOfSaleInfo: ns2:BillingPointOfSaleInfo, AgentIDOverride: ns2:AgentIDOverride[], TerminalSessionInfo: xsd:string, NextResultReference: ns2:NextResultReference[], ({SearchAirLeg: ns1:SearchAirLeg[]} | {SearchSpecificAirSegment: ns1:SearchSpecificAirSegment[]}), AirSearchModifiers: ns1:AirSearchModifiers, SplitTicketingSearch: ns1:SplitTicketingSearch, JourneyData: ns1:JourneyData, SearchPassenger: ns2:SearchPassenger[], AirPricingModifiers: ns1:AirPricingModifiers, Enumeration: ns1:Enumeration, AirExchangeModifiers: ns1:AirExchangeModifiers, FlexExploreModifiers: ns1:FlexExploreModifiers, PCC: ns1:PCC, FareRulesFilterCategory: ns1:FareRulesFilterCategory, FormOfPayment: ns2:FormOfPayment[], AirSearchAsynchModifiers: ns1:AirSearchAsynchModifiers, TraceId: xsd:string, TokenId: xsd:string, AuthorizedBy: xsd:string, TargetBranch: ns2:typeBranchCode, OverrideLogging: ns2:typeLoggingLevel, LanguageCode: xsd:language, EnablePointToPointSearch: xsd:boolean, EnablePointToPointAlternates: xsd:boolean, MaxNumberOfExpertSolutions: xsd:integer, SolutionResult: xsd:boolean, PreferCompleteItinerary: xsd:boolean, MetaOptionIdentifier: ns1:MetaOptionIdentifier, ReturnUpsellFare: xsd:boolean, IncludeFareInfoMessages: xsd:boolean, ReturnBrandedFares: xsd:boolean, MultiGDSSearch: xsd:boolean, ReturnMM: xsd:boolean, CheckOBFees: xsd:string, NSCC: ns1:NSCC) -> ResponseMessage: ns2:ResponseMessage[], NextResultReference: ns2:NextResultReference[], FlightDetailsList: ns1:FlightDetailsList, AirSegmentList: ns1:AirSegmentList, FareInfoList: ns1:FareInfoList, FareRemarkList: ns1:FareRemarkList, AirItinerarySolution: ns1:AirItinerarySolution[], HostTokenList: ns1:HostTokenList, APISRequirementsList: ns1:APISRequirementsList, FareNoteList: ns1:FareNoteList, ExpertSolutionList: ns1:ExpertSolutionList, RouteList: ns1:RouteList, AlternateRouteList: ns1:AlternateRouteList, AlternateLocationDistanceList: ns1:AlternateLocationDistanceList, FareInfoMessage: ns1:FareInfoMessage[], ({AirPricingSolution: ns1:AirPricingSolution[]} | {AirPricePointList: ns1:AirPricePointList}), RailSegmentList: ns3:RailSegmentList, RailJourneyList: ns3:RailJourneyList, RailFareNoteList: ns3:RailFareNoteList, RailFareIDList: ns3:RailFareIDList, RailFareList: ns3:RailFareList, RailPricingSolution: ns3:RailPricingSolution[], AsyncProviderSpecificResponse: ns2:BaseAsyncProviderSpecificResponse[], BrandList: ns1:BrandList, TraceId: xsd:string, TransactionId: xsd:string, ResponseTime: xsd:integer, CommandHistory: xsd:string, DistanceUnits: ns2:typeDistance, SearchId: ns1:typeLowFareSearchId, CurrencyType: ns2:typeCurrency

     Port: AirRetrieveLowFareSearchPort (Soap11Binding: {http://www.travelport.com/service/air_v42_0}AirRetrieveLowFareSearchBinding)
         Operations:
            service(BillingPointOfSaleInfo: ns2:BillingPointOfSaleInfo, AgentIDOverride: ns2:AgentIDOverride[], TerminalSessionInfo: xsd:string, OverridePCC: ns2:OverridePCC, TraceId: xsd:string, TokenId: xsd:string, AuthorizedBy: xsd:string, TargetBranch: ns2:typeBranchCode, OverrideLogging: ns2:typeLoggingLevel, LanguageCode: xsd:language, RetrieveProviderReservationDetails: xsd:boolean, SearchId: ns1:typeLowFareSearchId, ProviderCode: ns2:typeProviderCode) -> ResponseMessage: ns2:ResponseMessage[], NextResultReference: ns2:NextResultReference[], FlightDetailsList: ns1:FlightDetailsList, AirSegmentList: ns1:AirSegmentList, FareInfoList: ns1:FareInfoList, FareRemarkList: ns1:FareRemarkList, AirItinerarySolution: ns1:AirItinerarySolution[], HostTokenList: ns1:HostTokenList, APISRequirementsList: ns1:APISRequirementsList, FareNoteList: ns1:FareNoteList, ExpertSolutionList: ns1:ExpertSolutionList, RouteList: ns1:RouteList, AlternateRouteList: ns1:AlternateRouteList, AlternateLocationDistanceList: ns1:AlternateLocationDistanceList, FareInfoMessage: ns1:FareInfoMessage[], ({AirPricingSolution: ns1:AirPricingSolution[]} | {AirPricePointList: ns1:AirPricePointList}), RailSegmentList: ns3:RailSegmentList, RailJourneyList: ns3:RailJourneyList, RailFareNoteList: ns3:RailFareNoteList, RailFareIDList: ns3:RailFareIDList, RailFareList: ns3:RailFareList, RailPricingSolution: ns3:RailPricingSolution[], AsyncProviderSpecificResponse: ns2:BaseAsyncProviderSpecificResponse[], BrandList: ns1:BrandList, TraceId: xsd:string, TransactionId: xsd:string, ResponseTime: xsd:integer, CommandHistory: xsd:string, DistanceUnits: ns2:typeDistance, CurrencyType: ns2:typeCurrency

     Port: AirPricePort (Soap11Binding: {http://www.travelport.com/service/air_v42_0}AirPriceBinding)
         Operations:
            service(BillingPointOfSaleInfo: ns2:BillingPointOfSaleInfo, AgentIDOverride: ns2:AgentIDOverride[], TerminalSessionInfo: xsd:string, AirItinerary: ns1:AirItinerary, AirPricingModifiers: ns1:AirPricingModifiers, SearchPassenger: ns2:SearchPassenger[], AirPricingCommand: ns1:AirPricingCommand[], AirReservationLocatorCode: ns1:AirReservationLocatorCode, OptionalServices: ns1:OptionalServices, FormOfPayment: ns2:FormOfPayment[], PCC: ns1:PCC, SSR: ns2:SSR[], TraceId: xsd:string, TokenId: xsd:string, AuthorizedBy: xsd:string, TargetBranch: ns2:typeBranchCode, OverrideLogging: ns2:typeLoggingLevel, LanguageCode: xsd:language, CheckOBFees: xsd:string, FareRuleType: ns1:typeFareRuleType, SupplierCode: ns2:typeSupplierCode, TicketDate: xsd:date, CheckFlightDetails: xsd:boolean, ReturnMM: xsd:boolean, NSCC: ns1:NSCC, SplitPricing: xsd:boolean, _soapheaders={sessionContext: ns0:SessionContext}) -> ResponseMessage: ns2:ResponseMessage[], AirItinerary: ns1:AirItinerary, AirPriceResult: ns1:AirPriceResult[], TraceId: xsd:string, TransactionId: xsd:string, ResponseTime: xsd:integer, CommandHistory: xsd:string

     Port: AirFareRulesPort (Soap11Binding: {http://www.travelport.com/service/air_v42_0}AirFareRulesBinding)
         Operations:
            service(BillingPointOfSaleInfo: ns2:BillingPointOfSaleInfo, AgentIDOverride: ns2:AgentIDOverride[], TerminalSessionInfo: xsd:string, OverridePCC: ns2:OverridePCC, ({AirReservationSelector: {FareInfoRef: ns1:FareInfoRef[], AirReservationLocatorCode: ns2:typeLocatorCode}} | {FareRuleLookup: ns1:FareRuleLookup} | {FareRuleKey: ns1:FareRuleKey[]} | {AirFareDisplayRuleKey: ns1:AirFareDisplayRuleKey}), AirFareRulesModifier: ns1:AirFareRulesModifier, TraceId: xsd:string, TokenId: xsd:string, AuthorizedBy: xsd:string, TargetBranch: ns2:typeBranchCode, OverrideLogging: ns2:typeLoggingLevel, LanguageCode: xsd:language, RetrieveProviderReservationDetails: xsd:boolean, FareRuleType: ns1:typeFareRuleType, _soapheaders={sessionContext: ns0:SessionContext}) -> ResponseMessage: ns2:ResponseMessage[], FareRule: ns1:FareRule[], TraceId: xsd:string, TransactionId: xsd:string, ResponseTime: xsd:integer, CommandHistory: xsd:string

     Port: AirAvailabilitySearchPort (Soap11Binding: {http://www.travelport.com/service/air_v42_0}AirAvailabilitySearchBinding)
         Operations:
            service(BillingPointOfSaleInfo: ns2:BillingPointOfSaleInfo, AgentIDOverride: ns2:AgentIDOverride[], TerminalSessionInfo: xsd:string, OverridePCC: ns2:OverridePCC, NextResultReference: ns2:NextResultReference[], PointOfCommencement: ns2:PointOfCommencement, ({SearchAirLeg: ns1:SearchAirLeg[]} | {SearchSpecificAirSegment: ns1:SearchSpecificAirSegment[]}), AirSearchModifiers: ns1:AirSearchModifiers, JourneyData: ns1:JourneyData, SearchPassenger: ns2:SearchPassenger[], PointOfSale: ns2:PointOfSale[], TraceId: xsd:string, TokenId: xsd:string, AuthorizedBy: xsd:string, TargetBranch: ns2:typeBranchCode, OverrideLogging: ns2:typeLoggingLevel, LanguageCode: xsd:language, RetrieveProviderReservationDetails: xsd:boolean, ReturnBrandIndicator: xsd:boolean, ChannelId: ns1:ChannelId, NSCC: ns1:NSCC, _soapheaders={sessionContext: ns0:SessionContext}) -> ResponseMessage: ns2:ResponseMessage[], NextResultReference: ns2:NextResultReference[], FlightDetailsList: ns1:FlightDetailsList, AirSegmentList: ns1:AirSegmentList, FareInfoList: ns1:FareInfoList, FareRemarkList: ns1:FareRemarkList, AirItinerarySolution: ns1:AirItinerarySolution[], HostTokenList: ns1:HostTokenList, APISRequirementsList: ns1:APISRequirementsList, TraceId: xsd:string, TransactionId: xsd:string, ResponseTime: xsd:integer, CommandHistory: xsd:string, DistanceUnits: ns2:typeDistance

     Port: AirFareDisplayPort (Soap11Binding: {http://www.travelport.com/service/air_v42_0}AirFareDisplayBinding)
         Operations:
            service(BillingPointOfSaleInfo: ns2:BillingPointOfSaleInfo, AgentIDOverride: ns2:AgentIDOverride[], TerminalSessionInfo: xsd:string, OverridePCC: ns2:OverridePCC, FareType: ns1:FareType[], PassengerType: ns2:typePassengerType[], BookingCode: ns1:BookingCode[], IncludeAddlBookingCodeInfo: ns1:IncludeAddlBookingCodeInfo, FareBasis: ns1:FareBasis, Carrier: ns2:Carrier[], AccountCode: ns2:AccountCode[], ContractCode: ns1:ContractCode, AirFareDisplayModifiers: ns1:AirFareDisplayModifiers, PointOfSale: ns2:PointOfSale[], AirFareDisplayRuleKey: ns1:AirFareDisplayRuleKey, TraceId: xsd:string, TokenId: xsd:string, AuthorizedBy: xsd:string, TargetBranch: ns2:typeBranchCode, OverrideLogging: ns2:typeLoggingLevel, LanguageCode: xsd:language, RetrieveProviderReservationDetails: xsd:boolean, Origin: ns2:typeIATACode, Destination: ns2:typeIATACode, ProviderCode: ns2:typeProviderCode, IncludeMileRouteInformation: ns1:typeMileOrRouteBasedFare, UnSaleableFaresOnly: xsd:boolean, ChannelId: ns1:ChannelId, NSCC: ns1:NSCC, ReturnMM: xsd:boolean, _soapheaders={sessionContext: ns0:SessionContext}) -> ResponseMessage: ns2:ResponseMessage[], FareDisplay: ns1:FareDisplay[], TraceId: xsd:string, TransactionId: xsd:string, ResponseTime: xsd:integer, CommandHistory: xsd:string

     Port: SeatMapPort (Soap11Binding: {http://www.travelport.com/service/air_v42_0}SeatMapBinding)
         Operations:
            service(BillingPointOfSaleInfo: ns2:BillingPointOfSaleInfo, AgentIDOverride: ns2:AgentIDOverride[], TerminalSessionInfo: xsd:string, OverridePCC: ns2:OverridePCC, AgencySellInfo: ns2:AgencySellInfo, AirSegment: ns1:typeBaseAirSegment[], HostToken: ns2:HostToken[], SearchTraveler: ns1:SearchTraveler[], HostReservation: ns1:HostReservation, MerchandisingPricingModifiers: ns1:MerchandisingPricingModifiers, TraceId: xsd:string, TokenId: xsd:string, AuthorizedBy: xsd:string, TargetBranch: ns2:typeBranchCode, OverrideLogging: ns2:typeLoggingLevel, LanguageCode: xsd:language, RetrieveProviderReservationDetails: xsd:boolean, ReturnSeatPricing: xsd:boolean, ReturnBrandingInfo: xsd:boolean, _soapheaders={sessionContext: ns0:SessionContext}) -> ResponseMessage: ns2:ResponseMessage[], HostToken: ns2:HostToken[], CabinClass: ns2:CabinClass, AirSegment: ns1:typeBaseAirSegment[], SearchTraveler: ns1:SearchTraveler[], OptionalServices: ns1:OptionalServices, Remark: ns2:Remark, Rows: ns1:Rows[], PaymentRestriction: ns2:PaymentRestriction[], SeatInformation: ns1:SeatInformation[], Copyright: xsd:string, TraceId: xsd:string, TransactionId: xsd:string, ResponseTime: xsd:integer, CommandHistory: xsd:string, GroupSeatPrice: ns2:typeMoney

     Port: AirRefundQuotePort (Soap11Binding: {http://www.travelport.com/service/air_v42_0}AirRefundQuoteBinding)
         Operations:
            service(BillingPointOfSaleInfo: ns2:BillingPointOfSaleInfo, AgentIDOverride: ns2:AgentIDOverride[], TerminalSessionInfo: xsd:string, OverridePCC: ns2:OverridePCC, TicketNumber: ns2:StringLength1to13[], TCRNumber: ns1:typeTCRNumber[], AirRefundModifiers: ns1:AirRefundModifiers, HostToken: ns2:HostToken[], TraceId: xsd:string, TokenId: xsd:string, AuthorizedBy: xsd:string, TargetBranch: ns2:typeBranchCode, OverrideLogging: ns2:typeLoggingLevel, LanguageCode: xsd:language, RetrieveProviderReservationDetails: xsd:boolean, Ignore: xsd:boolean) -> ResponseMessage: ns2:ResponseMessage[], AirRefundBundle: ns1:AirRefundBundle[], TCRRefundBundle: ns1:TCRRefundBundle[], TraceId: xsd:string, TransactionId: xsd:string, ResponseTime: xsd:integer, CommandHistory: xsd:string

     Port: AirRefundTicketPort (Soap11Binding: {http://www.travelport.com/service/air_v42_0}AirRefundTicketBinding)
         Operations:
            service(BillingPointOfSaleInfo: ns2:BillingPointOfSaleInfo, AgentIDOverride: ns2:AgentIDOverride[], TerminalSessionInfo: xsd:string, OverridePCC: ns2:OverridePCC, AirRefundBundle: ns1:AirRefundBundle[], TCRRefundBundle: ns1:TCRRefundBundle[], AirRefundModifiers: ns1:AirRefundModifiers, Commission: ns2:Commission[], FormOfPayment: ns2:FormOfPayment, TraceId: xsd:string, TokenId: xsd:string, AuthorizedBy: xsd:string, TargetBranch: ns2:typeBranchCode, OverrideLogging: ns2:typeLoggingLevel, LanguageCode: xsd:language, RetrieveProviderReservationDetails: xsd:boolean) -> ResponseMessage: ns2:ResponseMessage[], ETR: ns1:ETR[], TCR: ns1:TCR[], RefundFailureInfo: ns1:typeTicketFailureInfo[], TraceId: xsd:string, TransactionId: xsd:string, ResponseTime: xsd:integer, CommandHistory: xsd:string

     Port: AirTicketingPort (Soap11Binding: {http://www.travelport.com/service/air_v42_0}AirTicketingBinding)
         Operations:
            service(BillingPointOfSaleInfo: ns2:BillingPointOfSaleInfo, AgentIDOverride: ns2:AgentIDOverride[], TerminalSessionInfo: xsd:string, OverridePCC: ns2:OverridePCC, AirReservationLocatorCode: ns1:AirReservationLocatorCode, AirPricingInfoRef: {BookingTravelerRef: ns2:BookingTravelerRef[], Key: ns2:typeRef}[], TicketingModifiersRef: ns1:typeTicketingModifiersRef[], WaiverCode: ns1:WaiverCode, Commission: ns2:Commission[], DetailedBillingInformation: ns1:DetailedBillingInformation[], FaxDetailsInformation: ns1:FaxDetailsInformation, AirTicketingModifiers: ns1:AirTicketingModifiers[], TraceId: xsd:string, TokenId: xsd:string, AuthorizedBy: xsd:string, TargetBranch: ns2:typeBranchCode, OverrideLogging: ns2:typeLoggingLevel, LanguageCode: xsd:language, RetrieveProviderReservationDetails: xsd:boolean, ReturnInfoOnFail: xsd:boolean, BulkTicket: xsd:boolean) -> ResponseMessage: ns2:ResponseMessage[], ({AirSolutionChangedInfo: ns1:AirSolutionChangedInfo} | {ETR: ns1:ETR[], TicketFailureInfo: ns1:TicketFailureInfo[], DetailedBillingInformation: ns1:DetailedBillingInformation[]}), TraceId: xsd:string, TransactionId: xsd:string, ResponseTime: xsd:integer, CommandHistory: xsd:string

     Port: AirVoidDocumentPort (Soap11Binding: {http://www.travelport.com/service/air_v42_0}AirVoidDocumentBinding)
         Operations:
            service(BillingPointOfSaleInfo: ns2:BillingPointOfSaleInfo, AgentIDOverride: ns2:AgentIDOverride[], TerminalSessionInfo: xsd:string, OverridePCC: ns2:OverridePCC, AirReservationLocatorCode: ns1:AirReservationLocatorCode, VoidDocumentInfo: ns1:VoidDocumentInfo[], TraceId: xsd:string, TokenId: xsd:string, AuthorizedBy: xsd:string, TargetBranch: ns2:typeBranchCode, OverrideLogging: ns2:typeLoggingLevel, LanguageCode: xsd:language, RetrieveProviderReservationDetails: xsd:boolean, ShowETR: xsd:boolean, ProviderCode: ns2:typeProviderCode, ProviderLocatorCode: xsd:string) -> ResponseMessage: ns2:ResponseMessage[], ETR: ns1:ETR[], VoidResultInfo: ns1:VoidResultInfo[], TraceId: xsd:string, TransactionId: xsd:string, ResponseTime: xsd:integer, CommandHistory: xsd:string

     Port: AirRetrieveDocumentBindingPort (Soap11Binding: {http://www.travelport.com/service/air_v42_0}AirRetrieveDocumentBinding)
         Operations:
            service(BillingPointOfSaleInfo: ns2:BillingPointOfSaleInfo, AgentIDOverride: ns2:AgentIDOverride[], TerminalSessionInfo: xsd:string, OverridePCC: ns2:OverridePCC, ({AirReservationLocatorCode: ns1:AirReservationLocatorCode} | {TicketNumber: ns2:StringLength1to13[]} | {TCRNumber: ns1:typeTCRNumber[]}), TraceId: xsd:string, TokenId: xsd:string, AuthorizedBy: xsd:string, TargetBranch: ns2:typeBranchCode, OverrideLogging: ns2:typeLoggingLevel, LanguageCode: xsd:language, RetrieveProviderReservationDetails: xsd:boolean, ReturnRestrictions: xsd:boolean, ReturnPricing: xsd:boolean, RetrieveMCO: xsd:boolean, UniversalRecordLocatorCode: ns2:typeLocatorCode, ProviderCode: ns2:typeProviderCode, ProviderLocatorCode: ns2:typeProviderLocatorCode) -> ResponseMessage: ns2:ResponseMessage[], ETR: ns1:ETR[], MCO: ns2:MCO[], TCR: ns1:TCR[], DocumentFailureInfo: ns1:typeFailureInfo[], ServiceFeeInfo: ns2:ServiceFeeInfo[], TraceId: xsd:string, TransactionId: xsd:string, ResponseTime: xsd:integer, CommandHistory: xsd:string, UniversalRecordLocatorCode: ns2:typeLocatorCode

     Port: AirExchangeProcessPort (Soap11Binding: {http://www.travelport.com/service/air_v42_0}AirExchangeProcessBinding)
         Operations:
            service(BillingPointOfSaleInfo: ns2:BillingPointOfSaleInfo, AgentIDOverride: ns2:AgentIDOverride[], TerminalSessionInfo: xsd:string, OverridePCC: ns2:OverridePCC, AirReservationLocatorCode: ns1:AirReservationLocatorCode, TicketNumber: ns2:StringLength1to13[], SpecificSeatAssignment: ns1:SpecificSeatAssignment[], AirPricingSolution: ns1:AirPricingSolution[], AirExchangeModifiers: ns1:AirExchangeModifiers, AirExchangeBundleTotal: ns1:AirExchangeBundleTotal, AirExchangeBundle: ns1:AirExchangeBundle[], HostToken: ns2:HostToken[], OptionalServices: ns1:OptionalServices, FormOfPayment: ns2:FormOfPayment, FormOfPaymentRef: ns2:FormOfPaymentRef, SSRInfo: ns2:SSRInfo[], TraceId: xsd:string, TokenId: xsd:string, AuthorizedBy: xsd:string, TargetBranch: ns2:typeBranchCode, OverrideLogging: ns2:typeLoggingLevel, LanguageCode: xsd:language, RetrieveProviderReservationDetails: xsd:boolean, ReturnReservation: xsd:boolean) -> ResponseMessage: ns2:ResponseMessage[], TicketNumber: ns2:StringLength1to13[], BookingTraveler: ns2:BookingTraveler[], AirReservation: ns1:typeAirReservationWithFOP, ExchangeFailureInfo: ns1:typeTicketFailureInfo[], TraceId: xsd:string, TransactionId: xsd:string, ResponseTime: xsd:integer, CommandHistory: xsd:string

     Port: AirExchangeQuotePort (Soap11Binding: {http://www.travelport.com/service/air_v42_0}AirExchangeQuoteBinding)
         Operations:
            service(BillingPointOfSaleInfo: ns2:BillingPointOfSaleInfo, AgentIDOverride: ns2:AgentIDOverride[], TerminalSessionInfo: xsd:string, TicketNumber: ns2:StringLength1to13[], ProviderReservationInfo: {ProviderCode: ns2:typeProviderCode, ProviderLocatorCode: ns2:typeProviderLocatorCode}, AirPricingSolution: ns1:AirPricingSolution[], AirExchangeModifiers: ns1:AirExchangeModifiers, HostToken: ns2:HostToken[], OptionalServices: ns1:OptionalServices, FormOfPayment: ns2:FormOfPayment[], RepricingModifiers: ns1:RepricingModifiers, OriginalItineraryDetails: ns1:OriginalItineraryDetails, PCC: ns1:PCC, TraceId: xsd:string, TokenId: xsd:string, AuthorizedBy: xsd:string, TargetBranch: ns2:typeBranchCode, OverrideLogging: ns2:typeLoggingLevel, LanguageCode: xsd:language, FareRuleType: ns1:typeFareRuleType) -> ResponseMessage: ns2:ResponseMessage[], TicketNumber: ns2:StringLength1to13[], AirPricingSolution: ns1:AirPricingSolution[], AirExchangeBundleTotal: ns1:AirExchangeBundleTotal, AirExchangeBundle: ns1:AirExchangeBundle[], HostToken: ns2:HostToken[], OptionalServices: ns1:OptionalServices, FareRule: ns1:FareRule[], TraceId: xsd:string, TransactionId: xsd:string, ResponseTime: xsd:integer, CommandHistory: xsd:string

     Port: AirExchangeTicketingPort (Soap11Binding: {http://www.travelport.com/service/air_v42_0}AirExchangeTicketingBinding)
         Operations:
            service(BillingPointOfSaleInfo: ns2:BillingPointOfSaleInfo, AgentIDOverride: ns2:AgentIDOverride[], TerminalSessionInfo: xsd:string, OverridePCC: ns2:OverridePCC, AirReservationLocatorCode: ns1:AirReservationLocatorCode, TicketNumber: ns2:StringLength1to13, TicketingModifiersRef: ns1:typeTicketingModifiersRef[], WaiverCode: ns1:WaiverCode, DetailedBillingInformation: ns1:DetailedBillingInformation[], AirTicketingModifiers: ns1:AirTicketingModifiers[], TraceId: xsd:string, TokenId: xsd:string, AuthorizedBy: xsd:string, TargetBranch: ns2:typeBranchCode, OverrideLogging: ns2:typeLoggingLevel, LanguageCode: xsd:language, RetrieveProviderReservationDetails: xsd:boolean, BulkTicket: xsd:boolean, ChangeFeeOnTicket: xsd:boolean, _soapheaders={sessionContext: ns0:SessionContext}) -> ResponseMessage: ns2:ResponseMessage[], ({AirSolutionChangedInfo: ns1:AirSolutionChangedInfo} | {ETR: ns1:ETR, TicketFailureInfo: ns1:TicketFailureInfo, DetailedBillingInformation: ns1:DetailedBillingInformation}), TraceId: xsd:string, TransactionId: xsd:string, ResponseTime: xsd:integer, CommandHistory: xsd:string

     Port: AirMerchandisingOfferAvailabilityPort (Soap11Binding: {http://www.travelport.com/service/air_v42_0}AirMerchandisingOfferAvailabilityBinding)
         Operations:
            service(BillingPointOfSaleInfo: ns2:BillingPointOfSaleInfo, AgentIDOverride: ns2:AgentIDOverride[], TerminalSessionInfo: xsd:string, OverridePCC: ns2:OverridePCC, AgencySellInfo: ns2:AgencySellInfo, AirSolution: ns1:AirSolution, HostReservation: ns1:HostReservation[], OfferAvailabilityModifiers: ns1:OfferAvailabilityModifiers[], MerchandisingPricingModifiers: ns1:MerchandisingPricingModifiers, TraceId: xsd:string, TokenId: xsd:string, AuthorizedBy: xsd:string, TargetBranch: ns2:typeBranchCode, OverrideLogging: ns2:typeLoggingLevel, LanguageCode: xsd:language, RetrieveProviderReservationDetails: xsd:boolean) -> ResponseMessage: ns2:ResponseMessage[], AirSolution: ns1:AirSolution, Remark: ns2:Remark, OptionalServices: ns1:OptionalServices, EmbargoList: ns1:EmbargoList, TraceId: xsd:string, TransactionId: xsd:string, ResponseTime: xsd:integer, CommandHistory: xsd:string

     Port: AirUpsellSearchPort (Soap11Binding: {http://www.travelport.com/service/air_v42_0}AirUpsellSearchBinding)
         Operations:
            service(BillingPointOfSaleInfo: ns2:BillingPointOfSaleInfo, AgentIDOverride: ns2:AgentIDOverride[], TerminalSessionInfo: xsd:string, OverridePCC: ns2:OverridePCC, AirItinerary: ns1:AirItinerary, AirPriceResult: ns1:AirPriceResult[], TraceId: xsd:string, TokenId: xsd:string, AuthorizedBy: xsd:string, TargetBranch: ns2:typeBranchCode, OverrideLogging: ns2:typeLoggingLevel, LanguageCode: xsd:language, RetrieveProviderReservationDetails: xsd:boolean) -> ResponseMessage: ns2:ResponseMessage[], AirItinerary: ns1:AirItinerary, AirPriceResult: ns1:AirPriceResult[], TraceId: xsd:string, TransactionId: xsd:string, ResponseTime: xsd:integer, CommandHistory: xsd:string

     Port: FlightTimeTablePort (Soap11Binding: {http://www.travelport.com/service/air_v42_0}FlightTimeTableBinding)
         Operations:
            service(BillingPointOfSaleInfo: ns2:BillingPointOfSaleInfo, AgentIDOverride: ns2:AgentIDOverride[], TerminalSessionInfo: xsd:string, OverridePCC: ns2:OverridePCC, NextResultReference: ns2:NextResultReference[], FlightTimeTableCriteria: ns1:FlightTimeTableCriteria, TraceId: xsd:string, TokenId: xsd:string, AuthorizedBy: xsd:string, TargetBranch: ns2:typeBranchCode, OverrideLogging: ns2:typeLoggingLevel, LanguageCode: xsd:language, RetrieveProviderReservationDetails: xsd:boolean) -> ResponseMessage: ns2:ResponseMessage[], NextResultReference: ns2:NextResultReference[], FlightTimeTableList: {FlightTimeDetail: ns1:FlightTimeDetail[]}, TraceId: xsd:string, TransactionId: xsd:string, ResponseTime: xsd:integer, CommandHistory: xsd:string

     Port: AirPrePayPort (Soap11Binding: {http://www.travelport.com/service/air_v42_0}AirPrePayBinding)
         Operations:
            service(BillingPointOfSaleInfo: ns2:BillingPointOfSaleInfo, AgentIDOverride: ns2:AgentIDOverride[], TerminalSessionInfo: xsd:string, OverridePCC: ns2:OverridePCC, ({ListSearch: {({PersonNameSearch: ns1:PersonNameSearch} | {LoyaltyCard: ns2:LoyaltyCard[]}), StartFromResult: ns2:typeStartFromResult, MaxResults: ns2:typeMaxResults}} | {PrePayRetrieve: {Id: ns2:typeCardNumber, Type: xsd:string}}), TraceId: xsd:string, TokenId: xsd:string, AuthorizedBy: xsd:string, TargetBranch: ns2:typeBranchCode, OverrideLogging: ns2:typeLoggingLevel, LanguageCode: xsd:language, RetrieveProviderReservationDetails: xsd:boolean) -> ResponseMessage: ns2:ResponseMessage[], PrePayProfileInfo: ns1:PrePayProfileInfo[], TraceId: xsd:string, TransactionId: xsd:string, ResponseTime: xsd:integer, CommandHistory: xsd:string, MaxResults: ns2:typeMaxResults, MoreIndicator: xsd:boolean, MoreDataStartIndex: xsd:string

     Port: EMDRetrievePort (Soap11Binding: {http://www.travelport.com/service/air_v42_0}EMDRetrieveBinding)
         Operations:
            service(BillingPointOfSaleInfo: ns2:BillingPointOfSaleInfo, AgentIDOverride: ns2:AgentIDOverride[], TerminalSessionInfo: xsd:string, OverridePCC: ns2:OverridePCC, ({ListRetrieve: {ProviderReservationDetail: ns2:typeProviderReservationDetail}} | {DetailRetrieve: {ProviderReservationDetail: ns2:typeProviderReservationDetail, EMDNumber: ns1:typeEMDNumber}}), TraceId: xsd:string, TokenId: xsd:string, AuthorizedBy: xsd:string, TargetBranch: ns2:typeBranchCode, OverrideLogging: ns2:typeLoggingLevel, LanguageCode: xsd:language, RetrieveProviderReservationDetails: xsd:boolean) -> ResponseMessage: ns2:ResponseMessage[], ({EMDInfo: ns1:EMDInfo} | {EMDSummaryInfo: ns1:EMDSummaryInfo[]}), TraceId: xsd:string, TransactionId: xsd:string, ResponseTime: xsd:integer, CommandHistory: xsd:string

     Port: EMDIssuancePort (Soap11Binding: {http://www.travelport.com/service/air_v42_0}EMDIssuanceBinding)
         Operations:
            service(BillingPointOfSaleInfo: ns2:BillingPointOfSaleInfo, AgentIDOverride: ns2:AgentIDOverride[], TerminalSessionInfo: xsd:string, OverridePCC: ns2:OverridePCC, ProviderReservationDetail: ns2:typeProviderReservationDetail, TicketNumber: ns2:StringLength1to13, IssuanceModifiers: ns1:IssuanceModifiers, SelectionModifiers: ns1:SelectionModifiers, TraceId: xsd:string, TokenId: xsd:string, AuthorizedBy: xsd:string, TargetBranch: ns2:typeBranchCode, OverrideLogging: ns2:typeLoggingLevel, LanguageCode: xsd:language, RetrieveProviderReservationDetails: xsd:boolean, UniversalRecordLocatorCode: ns2:typeLocatorCode, ShowDetails: xsd:boolean) -> ResponseMessage: ns2:ResponseMessage[], ({EMDSummaryInfo: ns1:EMDSummaryInfo[]} | {EMDInfo: ns1:EMDInfo[]}), TraceId: xsd:string, TransactionId: xsd:string, ResponseTime: xsd:integer, CommandHistory: xsd:string

     Port: AirMerchandisingDetailsPort (Soap11Binding: {http://www.travelport.com/service/air_v42_0}AirMerchandisingDetailsBinding)
         Operations:
            service(BillingPointOfSaleInfo: ns2:BillingPointOfSaleInfo, AgentIDOverride: ns2:AgentIDOverride[], TerminalSessionInfo: xsd:string, OverridePCC: ns2:OverridePCC, ({MerchandisingDetails: ns1:MerchandisingDetails} | {OptionalServiceModifiers: ns1:OptionalServiceModifiers} | {MerchandisingAvailabilityDetails: ns1:MerchandisingAvailabilityDetails}), TraceId: xsd:string, TokenId: xsd:string, AuthorizedBy: xsd:string, TargetBranch: ns2:typeBranchCode, OverrideLogging: ns2:typeLoggingLevel, LanguageCode: xsd:language, RetrieveProviderReservationDetails: xsd:boolean) -> ResponseMessage: ns2:ResponseMessage[], OptionalServices: ns1:OptionalServices, Brand: ns1:Brand[], UnassociatedBookingCodeList: {ApplicableSegment: ns1:typeApplicableSegment[]}, TraceId: xsd:string, TransactionId: xsd:string, ResponseTime: xsd:integer, CommandHistory: xsd:string

     Port: AirExchangeEligibilityPort (Soap11Binding: {http://www.travelport.com/service/air_v42_0}AirExchangeEligibilityBinding)
         Operations:
            service(BillingPointOfSaleInfo: ns2:BillingPointOfSaleInfo, AgentIDOverride: ns2:AgentIDOverride[], TerminalSessionInfo: xsd:string, OverridePCC: ns2:OverridePCC, ProviderReservationInfo: {ProviderCode: ns2:typeProviderCode, ProviderLocatorCode: ns2:typeProviderLocatorCode}, TraceId: xsd:string, TokenId: xsd:string, AuthorizedBy: xsd:string, TargetBranch: ns2:typeBranchCode, OverrideLogging: ns2:typeLoggingLevel, LanguageCode: xsd:language, RetrieveProviderReservationDetails: xsd:boolean, Type: xsd:string) -> ResponseMessage: ns2:ResponseMessage[], ExchangeEligibilityInfo: ns1:ExchangeEligibilityInfo, TraceId: xsd:string, TransactionId: xsd:string, ResponseTime: xsd:integer, CommandHistory: xsd:string

Service: FlightService
     Port: FlightInfoPort (Soap11Binding: {http://www.travelport.com/service/air_v42_0}FlightInfoBinding)
         Operations:
            service(BillingPointOfSaleInfo: ns2:BillingPointOfSaleInfo, AgentIDOverride: ns2:AgentIDOverride[], TerminalSessionInfo: xsd:string, OverridePCC: ns2:OverridePCC, FlightInfoCriteria: ns1:FlightInfoCriteria[], TraceId: xsd:string, TokenId: xsd:string, AuthorizedBy: xsd:string, TargetBranch: ns2:typeBranchCode, OverrideLogging: ns2:typeLoggingLevel, LanguageCode: xsd:language, RetrieveProviderReservationDetails: xsd:boolean) -> ResponseMessage: ns2:ResponseMessage[], FlightInfo: ns1:FlightInfo[], TraceId: xsd:string, TransactionId: xsd:string, ResponseTime: xsd:integer, CommandHistory: xsd:string

     Port: FlightDetailsPort (Soap11Binding: {http://www.travelport.com/service/air_v42_0}FlightDetailsBinding)
         Operations:
            service(BillingPointOfSaleInfo: ns2:BillingPointOfSaleInfo, AgentIDOverride: ns2:AgentIDOverride[], TerminalSessionInfo: xsd:string, OverridePCC: ns2:OverridePCC, AirSegment: ns1:typeBaseAirSegment[], TraceId: xsd:string, TokenId: xsd:string, AuthorizedBy: xsd:string, TargetBranch: ns2:typeBranchCode, OverrideLogging: ns2:typeLoggingLevel, LanguageCode: xsd:language, RetrieveProviderReservationDetails: xsd:boolean) -> ResponseMessage: ns2:ResponseMessage[], AirSegment: ns1:typeBaseAirSegment[], CO2Emissions: ns1:CO2Emissions[], TraceId: xsd:string, TransactionId: xsd:string, ResponseTime: xsd:integer, CommandHistory: xsd:string

